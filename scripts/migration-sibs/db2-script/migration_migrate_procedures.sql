DROP PROCEDURE MIG_RUN_CU001_CU@
DROP PROCEDURE MIG_RUN_CA001_AA@
DROP PROCEDURE MIG_RUN_CA002_JB@
DROP PROCEDURE MIG_RUN_CA003_1@
DROP PROCEDURE MIG_RUN_CA003_2_BNM@
DROP PROCEDURE MIG_RUN_CA003_3_OFF@
DROP PROCEDURE MIG_RUN_CA003_4_REL@
DROP PROCEDURE MIG_RUN_CA003_5_INS@
DROP PROCEDURE MIG_RUN_CA003_6_MUL@
DROP PROCEDURE MIG_RUN_CA003_7_ISL@
DROP PROCEDURE MIG_RUN_CA003_8_BBA@
DROP PROCEDURE MIG_RUN_CA004@

/* --------- Start of Collateral ---------- */
DROP PROCEDURE MIG_RUN_CO001_AB@
DROP PROCEDURE MIG_RUN_CO002_AB_GOLD@
DROP PROCEDURE MIG_RUN_CO005_CS@
DROP PROCEDURE MIG_RUN_CO008_MS@
DROP PROCEDURE MIG_RUN_CO009_PT@
DROP PROCEDURE MIG_RUN_CO010_GT@
DROP PROCEDURE MIG_RUN_CO011_OT@
DROP PROCEDURE MIG_RUN_CO012_IN@
DROP PROCEDURE MIG_RUN_CO014_CL@

DROP PROCEDURE MIG_RUN_CO015_VL@
DROP PROCEDURE MIG_RUN_CO016_IN@
DROP PROCEDURE MIG_RUN_CO017_CD@
DROP PROCEDURE MIG_RUN_CO018_PG@
DROP PROCEDURE MIG_RUN_CO019_PL@

-- Need to be executed after the loading process
DROP PROCEDURE MIG_UPD_CO019_PL@


CREATE PROCEDURE MIG_RUN_CU001_CU
   LANGUAGE SQL
   BEGIN

		CALL "LOG_PROC_TIME"('MIG_RUN_CU001_CU', 'SIBS', 1);
		commit;

		CALL RUNSTATS_HELPER('MIG_CU001_CU', 'IS_VALID, CIF_ID, ISIC_CODE, PRIMARY_ADD_TYPE_CODE, SECONDARY_ADD_TYPE_CODE');
		
		------------------------------------
		-- Begin insert 
		-- SCI_LE_MAIN_PROFILE
		------------------------------------
	 	INSERT INTO SCI_LE_MAIN_PROFILE 
		(cms_le_main_profile_id,
			LMP_LE_ID,
			LMP_LONG_NAME,
			LMP_SHORT_NAME,
			LMP_LEGAL_CONST_NUM,
			LMP_LEGAL_CONST_VALUE,
			LMP_ID_COUNTRY_ISSUED,
			LMP_INC_CNTRY_ISO_CODE,
			LMP_ID_TYPE_NUM,
			LMP_ID_TYPE_VALUE,
			LMP_ID_NUMBER,
			LMP_INC_NUM_TEXT,
			LMP_INC_DATE,
            LMP_SECOND_ID_COUNTRY_ISSUED,
			LMP_SECOND_ID_TYPE_NUM,
			LMP_SECOND_ID_TYPE_VALUE,
			LMP_ID_OLD_NUM,
			LMP_TYPE_NUM,
			LMP_TYPE_VALUE,
            LMP_REL_START_DATE,
			CMS_BLACK_LISTED_IND,
            LMP_ACC_OFFICER_NUM,
            LMP_ACC_OFFICER_VALUE,
			SOURCE_ID,
			lmp_le_id_src_num,
			lmp_le_id_src_value,
			UPDATE_STATUS_IND)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR LEGAL_ENTITY_SEQ), 2)) as BIGINT),
			CIF_ID, 
			CUST_NAME_L, 
			CUST_NAME_S,
			CUST_CLASS_CAT,
			CUST_CLASS_CODE,
			ID_ISSUE_COUNTRY,
			ID_ISSUE_COUNTRY,
			ID_TYPE_CAT,
			ID_TYPE_CODE,
			ID_NUMBER, 
			ID_NUMBER, 
			ID_ISSUE_DATE,
            SECONDARY_ID_COUNTRY_ISSUED, 
			SECONDARY_ID_TYPE_CAT,
			t.SECONDARY_ID_TYPE_CODE,
			SECONDARY_ID_NUMBER,
			CUST_TYPE_CAT,
			CUST_TYPE,
            CUST_START_DATE, 
			blacklisted,
            LMP_ACC_OFFICER_NUM,
            LMP_ACC_OFFICER_VALUE,
			'SIBS',
			'SIBS',
			'SIBS',
			'I'
		FROM MIG_CU001_CU t 
		WHERE IS_VALID = 'Y');
--		WHERE NOT EXISTS 
--			(SELECT 1 FROM SCI_LE_MAIN_PROFILE
--				WHERE SOURCE_ID='SIBS' and LMP_LE_ID=t.CIF_ID) AND is_valid = 'Y');
                
		
	 	CALL "LOG_PROC_TIME"('MIG_RUN_CU001_CU', 'SIBS', 2);
		commit;
		
		CALL RUNSTATS_HELPER('SCI_LE_MAIN_PROFILE', 'SOURCE_ID, LMP_LE_ID, CMS_LE_MAIN_PROFILE_ID');
		
		-- update cms_le_main_profile_id into mig_cu001_cu table
		update mig_cu001_cu t
		set cms_le_main_profile_id = (select cms_le_main_profile_id
			from sci_le_main_profile mp
			where mp.lmp_le_id = t.cif_id
			and mp.source_id = 'SIBS')
		where is_valid = 'Y';
		
		CALL RUNSTATS_HELPER('MIG_CU001_CU', 'CMS_LE_MAIN_PROFILE_ID');
		
	 	CALL "LOG_PROC_TIME"('MIG_RUN_CU001_CU', 'SIBS', 3);
		commit;
				
		------------------------------------
		-- Begin insert 
		-- SCI_LE_SUB_PROFILE
		------------------------------------
	 	INSERT INTO SCI_LE_SUB_PROFILE 
		(CMS_LE_SUB_PROFILE_ID,
			LSP_ID,
			LSP_LE_ID,
			LSP_SHORT_NAME,
			CMS_LE_MAIN_PROFILE_ID,
            CMS_SUB_ORIG_ORGANISATION,
            LSP_DMCL_CNTRY_ISO_CODE,
			CMS_SUB_ORIG_COUNTRY,
			UPDATE_STATUS_IND)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CUSTOMER_SEQ), 2)) as BIGINT),
			1,
			t.CIF_ID, 
			t.CUST_NAME_S, 
			t.cms_le_main_profile_id,
            t.CMS_SUB_ORIG_ORGANISATION,
			t.LSP_DMCL_CNTRY_ISO_CODE,
			t.LSP_DMCL_CNTRY_ISO_CODE,
			'I'
		FROM MIG_CU001_CU t
		WHERE IS_VALID = 'Y');
	
	 	CALL "LOG_PROC_TIME"('MIG_RUN_CU001_CU', 'SIBS', 4);
		commit;

		------------------------------------
		-- Begin insert 
		-- SCI_LE_REG_ADDR
		-- primary address
		------------------------------------
		insert into SCI_LE_REG_ADDR
		(CMS_LE_REG_ADDR_ID,
			LRA_ID,
			LRA_LE_ID,
			LRA_TYPE_NUM,
			LRA_TYPE_VALUE,
			LRA_ADDR_LINE_1,
			LRA_ADDR_LINE_2,
            LRA_ADDR_LINE_3,
            LRA_ADDR_LINE_4, 
            LRA_ADDR_LINE_5,
			LRA_CITY_TEXT,
			LRA_STATE,
			LRA_POST_CODE,
			LRA_CNTRY_ISO_CODE,
			CMS_LE_MAIN_PROFILE_ID,
			UPDATE_STATUS_IND)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CONTACT_SEQ), 2)) as BIGINT), 
			1,
			CIF_ID, 
			PRIMARY_ADD_TYPE_CAT,
			PRIMARY_ADD_TYPE_CODE,
			PRIMARY_ADD_1,
			PRIMARY_ADD_2,
			PRIMARY_ADD_3,
			PRIMARY_ADD_4,
			PRIMARY_ADD_5,
            PRIMARY_CITY,
            PRIMARY_STATE,
			PRIMARY_POSTCODE,
			PRIMARY_COUNTRY,
			t.CMS_LE_MAIN_PROFILE_ID,
			'I'
		FROM MIG_CU001_CU t 
		-- WLS: only update when address type code is not empty
		where length(t.PRIMARY_ADD_TYPE_CODE)>0
		and NOT EXISTS 
			(SELECT 1 FROM SCI_LE_REG_ADDR b
				WHERE t.CMS_LE_MAIN_PROFILE_ID = b.CMS_LE_MAIN_PROFILE_ID
				--and b.LRA_LE_ID=t.CIF_ID 
				and t.PRIMARY_ADD_TYPE_CODE=b.LRA_TYPE_VALUE)
		AND is_valid = 'Y');
		
	 	CALL "LOG_PROC_TIME"('MIG_RUN_CU001_CU', 'SIBS', 5);
		commit;

		------------------------------------
		-- Begin insert 
		-- SCI_LE_REG_ADDR
		-- secondary address
		------------------------------------
		insert into SCI_LE_REG_ADDR
		(CMS_LE_REG_ADDR_ID,
			LRA_ID,
			LRA_LE_ID,
			LRA_TYPE_NUM,
			LRA_TYPE_VALUE,
			LRA_ADDR_LINE_1,
			LRA_ADDR_LINE_2,
            LRA_ADDR_LINE_3,
            LRA_ADDR_LINE_4, 
            LRA_ADDR_LINE_5,
			LRA_CITY_TEXT,
			LRA_STATE,
			LRA_POST_CODE,
			LRA_CNTRY_ISO_CODE,
			CMS_LE_MAIN_PROFILE_ID,
			UPDATE_STATUS_IND)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CONTACT_SEQ), 2)) as BIGINT), 
			1,
			CIF_ID, 
			SECONDARY_ADD_TYPE_CAT,
			SECONDARY_ADD_TYPE_CODE,
			SECONDARY_ADD_1,
			SECONDARY_ADD_2,
			SECONDARY_ADD_3,
			SECONDARY_ADD_4,
			SECONDARY_ADD_5,
			SECONDARY_CITY,
			SECONDARY_STATE,
			SECONDARY_POSTCODE,
			SECONDARY_COUNTRY,
			t.CMS_LE_MAIN_PROFILE_ID,
			'I'
		FROM MIG_CU001_CU t 
		-- WLS: only update when address type code is not empty
		where length(t.SECONDARY_ADD_TYPE_CODE)>0
		and NOT EXISTS 
			(SELECT 1 FROM SCI_LE_REG_ADDR b
				WHERE t.CMS_LE_MAIN_PROFILE_ID = b.CMS_LE_MAIN_PROFILE_ID
					and t.SECONDARY_ADD_TYPE_CODE = b.LRA_TYPE_VALUE) 
		AND is_valid = 'Y');
		
	 	CALL "LOG_PROC_TIME"('MIG_RUN_CU001_CU', 'SIBS', 6);
		commit;
		
		------------------------------------
		-- Begin insert 
		-- SCI_LE_REG_ADDR
		-- Mailing  address
		------------------------------------
		insert into SCI_LE_REG_ADDR
		(CMS_LE_REG_ADDR_ID,
			LRA_ID,
			LRA_LE_ID,
			LRA_TYPE_NUM,
			LRA_TYPE_VALUE,
			LRA_ADDR_LINE_1,
			LRA_ADDR_LINE_2,
            LRA_ADDR_LINE_3,
            LRA_ADDR_LINE_4, 
            LRA_ADDR_LINE_5,
			LRA_CITY_TEXT,
			LRA_STATE,
			LRA_POST_CODE,
			LRA_CNTRY_ISO_CODE,
			CMS_LE_MAIN_PROFILE_ID,
			UPDATE_STATUS_IND)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CONTACT_SEQ), 2)) as BIGINT), 
			1,
			CIF_ID, 
			MAILING_ADD_TYPE_CAT,
			MAILING_ADD_TYPE_CODE,
			MAILING_ADD_1,
			MAILING_ADD_2,
			MAILING_ADD_3,
			MAILING_ADD_4,
			MAILING_ADD_5,
			MAILING_CITY,
			MAILING_STATE,
			MAILING_POSTCODE,
			MAILING_COUNTRY,
			t.CMS_LE_MAIN_PROFILE_ID,
			'I'
		FROM MIG_CU001_CU t 
		-- WLS: only update when address type code is not empty
		where length(t.MAILING_ADD_TYPE_CODE)>0
		and NOT EXISTS 
			(SELECT 1 FROM SCI_LE_REG_ADDR b
				WHERE t.CMS_LE_MAIN_PROFILE_ID = b.CMS_LE_MAIN_PROFILE_ID
					and t.MAILING_ADD_TYPE_CODE = b.LRA_TYPE_VALUE) 
		AND is_valid = 'Y');
		
	 	CALL "LOG_PROC_TIME"('MIG_RUN_CU001_CU', 'SIBS', 7);
		commit;		

		------------------------------------
		-- Begin insert 
		-- sci_le_isic_dtl
		------------------------------------
	 	insert into SCI_LE_ISIC_DTL
		(CMS_LE_ISIC_DTL_ID,
			LID_ID,
			LID_LE_ID,
			LID_ISIC_TYPE_NUM,
			LID_ISIC_TYPE_VALUE,
			LID_ISIC_CODE_NUM,
			LID_ISIC_CODE_VALUE,
			CMS_LE_MAIN_PROFILE_ID,
			UPDATE_STATUS_IND)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR ISIC_CODE_SEQ), 2)) as BIGINT), 
			1,
			CIF_ID,
			'15',
			'ISIC',
			ISIC_CAT,
			ISIC_CODE,
			t.cms_le_main_profile_id,
			'I'
		FROM MIG_CU001_CU t
		where t.is_valid = 'Y'
		and length(t.ISIC_CODE) > 0);
		
		CALL "LOG_PROC_TIME"('MIG_RUN_CU001_CU', 'SIBS', 0);
					
END@


CREATE PROCEDURE MIG_RUN_CA001_AA
	LANGUAGE SQL
BEGIN	
	
    CALL "LOG_PROC_TIME"('MIG_RUN_CA001_AA', 'SIBS', 1);
	commit;

	CALL RUNSTATS_HELPER('SCI_LE_SUB_PROFILE', 'CMS_LE_MAIN_PROFILE_ID');
	CALL RUNSTATS_HELPER('MIG_CA001_AA', 'IS_VALID, LOS_BCA_REF_NUM, CIF_ID');
	
	-- LOCK TABLE MIG_CA001_AA IN SHARE MODE;
	UPDATE MIG_CA001_AA A 
	SET CMS_ACT_CIF_ID = 
		(SELECT cms_le_sub_profile_id 
		FROM sci_le_sub_profile sp, sci_le_main_profile mp
		WHERE mp.lmp_le_id = A.cif_id
		AND sp.cms_le_main_profile_id = mp.cms_le_main_profile_id
		AND mp.source_id = 'SIBS')
	WHERE A.IS_VALID = 'Y';
-- 	AND EXISTS (SELECT 1 
-- 		FROM sci_le_sub_profile sp1, sci_le_main_profile mp1
-- 		WHERE mp1.lmp_le_id = A.cif_id
-- 		AND sp1.cms_le_main_profile_id = mp1.cms_le_main_profile_id
-- 		AND mp1.source_id = 'SIBS');
	
    CALL "LOG_PROC_TIME"('MIG_RUN_CA001_AA', 'SIBS', 2);
	commit;
	
	
	-------------------------------------
	-- Actual Table
	-- SCI_LSP_LMT_PROFILE
	-------------------------------------
	INSERT INTO sci_lsp_lmt_profile (cms_lsp_lmt_profile_id, llp_le_id, cif_source_id, llp_lsp_id, los_bca_ref_num, llp_bca_ref_num, 
									cms_bca_joint_ind, llp_bca_ref_appr_date, cms_orig_country, cms_orig_organisation, 
									llp_next_annl_rvw_date, cms_bca_status, cms_bca_create_date, cms_customer_id,
									application_type, application_law_type, lmt_profile_type, source_id,
									UPDATE_STATUS_IND, is_migrated_ind)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR limit_profile_seq), 2)) as BIGINT),
			cif_id, cif_source, 1, los_bca_ref_num, aa_number, joint_borrower_ind, aa_approved_date, ori_loc_country, ori_loc_org_code,
			annual_review_date, aa_stat, aa_create_date, CMS_ACT_CIF_ID,
			application_type, application_law_type, 'BANKING', 'RLOS', 'I', 'Y'
	   FROM MIG_CA001_AA t
	  WHERE is_valid = 'Y'
-- 	  AND NOT EXISTS (SELECT '1' FROM sci_lsp_lmt_profile 
-- 	  					 WHERE llp_bca_ref_num = t.aa_number
-- 	  					   AND source_id = 'SIBS') 
	 );


	CALL "LOG_PROC_TIME"('MIG_RUN_CA001_AA', 'SIBS', 3);
	commit;

	-------------------------------------
	-- Staging Table
	-- STAGE_LIMIT_PROFILE
	-------------------------------------
	INSERT INTO stage_limit_profile (cms_lsp_lmt_profile_id, llp_le_id, cif_source_id, llp_lsp_id, los_bca_ref_num, llp_bca_ref_num, 
									cms_bca_joint_ind, llp_bca_ref_appr_date, cms_orig_country, cms_orig_organisation, 
									llp_next_annl_rvw_date, cms_bca_status, cms_bca_create_date, cms_customer_id,
									application_type, application_law_type, lmt_profile_type, source_id,
									UPDATE_STATUS_IND)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR limit_profile_seq), 2)) as BIGINT),
			cif_id, cif_source, 1, los_bca_ref_num, aa_number, joint_borrower_ind, aa_approved_date, ori_loc_country, ori_loc_org_code,
			annual_review_date, aa_stat, aa_create_date, CMS_ACT_CIF_ID, 
			application_type, application_law_type, 'BANKING', 'RLOS', 'I'
	   FROM MIG_CA001_AA t
	  WHERE t.is_valid = 'Y');
								 
	CALL "LOG_PROC_TIME"('MIG_RUN_CA001_AA', 'SIBS', 4);
	commit;

	update mig_ca001_aa t
	set cms_act_lmt_profile_id = (select cms_lsp_lmt_profile_id
		from sci_lsp_lmt_profile pf
		where pf.los_bca_ref_num = t.los_bca_ref_num
		and pf.source_id = 'RLOS')
	where t.is_valid = 'Y';
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA001_AA', 'SIBS', 5);
	commit;
		
	-------------------------------------
	-- Actual Table
	-- CMS_TAT_DOCUMENT
	-------------------------------------
	INSERT INTO CMS_TAT_DOCUMENT (TAT_ID, CMS_LSP_LMT_PROFILE_ID, STATUS, CMS_VERSION_TIME)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_TAT_DOC_SEQ), 2)) as BIGINT),
			t.cms_act_lmt_profile_id, 'ACTIVE', 0
	FROM MIG_CA001_AA t
	where t.is_valid = 'Y'
	and t.cms_act_lmt_profile_id is not null);
								 
	CALL "LOG_PROC_TIME"('MIG_RUN_CA001_AA', 'SIBS', 6);
	commit;

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_TAT_DOCUMENT
	-------------------------------------
	INSERT INTO CMS_STAGE_TAT_DOCUMENT (TAT_ID, CMS_LSP_LMT_PROFILE_ID, STATUS, CMS_VERSION_TIME)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_TAT_DOC_SEQ), 2)) as BIGINT),
			t.CMS_ACT_LMT_PROFILE_ID, 'ACTIVE', 0
	FROM MIG_CA001_AA t
	where t.is_valid = 'Y'
	and t.cms_act_lmt_profile_id is not null);
								 
	CALL "LOG_PROC_TIME"('MIG_RUN_CA001_AA', 'SIBS', 0);
	commit;
	  
END@


CREATE PROCEDURE MIG_RUN_CA002_JB
	LANGUAGE SQL
BEGIN
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA002_JB', 'SIBS', 1);
	commit;
	-------------------------------------
	-- Actual Table
	-- SCI_LSP_JOINT_BORROWER
	-------------------------------------
	--CALL SYSPROC.ADMIN_CMD('reorg table SCI_LSP_JOINT_BORROWER');
	call runstats_helper('MIG_CA002_JB', 'CIF_ID, IS_VALID');
	
	-- LOCK TABLE MIG_CA002_JB IN SHARE MODE;
	UPDATE MIG_CA002_JB A 
	SET CMS_ACT_CIF_ID = 
		(SELECT cms_le_sub_profile_id FROM sci_le_main_profile mp, sci_le_sub_profile sp 
		 WHERE sp.cms_le_main_profile_id = mp.cms_le_main_profile_id
		 AND mp.source_id = 'SIBS' 
		 AND mp.lmp_le_id = A.cif_id)
	WHERE A.IS_VALID = 'Y';
	-- AND EXISTS (SELECT 1 
		 -- FROM sci_le_main_profile mp1, sci_le_sub_profile sp1 
		 -- WHERE sp1.cms_le_main_profile_id = mp1.cms_le_main_profile_id
		 -- AND mp1.source_id = 'SIBS' 
		 -- AND mp1.lmp_le_id = A.cif_id);
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA002_JB', 'SIBS', 2);
	commit;

	INSERT INTO SCI_LSP_JOINT_BORROWER (cms_lsp_joint_borrower_id, cms_lmp_limit_profile_id, ljb_le_id,
									 ljb_lsp_id, ljb_bca_ref_num, source_id, cms_le_sub_profile_id,
									 UPDATE_STATUS_IND)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR SCI_LSP_JOINT_BORROWER_SEQ), 2)) as BIGINT),
			CMS_ACT_LMT_PROFILE_ID,
			t.CIF_ID,
			'1',
			t.AA_NUMBER,
			'SIBS',
			CMS_ACT_CIF_ID,
			'I'
	   FROM MIG_CA002_JB t
	  WHERE t.is_valid = 'Y');
								 
	CALL "LOG_PROC_TIME"('MIG_RUN_CA002_JB', 'SIBS', 0);
	commit;
	

END@

CREATE PROCEDURE MIG_RUN_CA003_1
	LANGUAGE SQL
BEGIN	
	
    CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 1);
	commit;

	-------------------------------------
	-- Actual Table
	-- SCI_LSP_APPR_LMTS
	--
	-------------------------------------
	
	--CALL SYSPROC.ADMIN_CMD('reorg table SCI_LSP_APPR_LMTS');
	CALL RUNSTATS_HELPER('MIG_CA003_1', 'IS_VALID, LIMIT_ID');

	INSERT INTO SCI_LSP_APPR_LMTS (CMS_LSP_APPR_LMTS_ID, LMT_LE_ID, LMT_LSP_ID, LOS_BCA_REF_NUM, LMT_BCA_REF_NUM,
			LOS_LMT_ID, LMT_ID, LMT_OUTER_LMT_ID, LMT_EXPRY_DATE, CMS_BKG_COUNTRY, CMS_BKG_ORGANISATION,
			LMT_CRRNCY_ISO_CODE, LMT_AMT, LMT_TENOR, LMT_TENOR_BASIS_NUM, LMT_TENOR_BASIS_VALUE, CMS_ACTIVATED_LIMIT, 
			CMS_OUTSTANDING_AMT, LMT_PRD_TYPE_NUM, LMT_PRD_TYPE_VALUE, LMT_FAC_TYPE_NUM, LMT_FAC_TYPE_VALUE,
			LMT_TYPE_NUM, LMT_TYPE_VALUE, CMS_LIMIT_PROFILE_ID, CMS_LIMIT_STATUS, SOURCE_ID, LMT_FAC_CODE,
			LMT_FAC_SEQ, CMS_REF_ID, UPDATE_STATUS_IND, CMS_DRAWING_LIMIT)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR LIMIT_SEQ), 2)) as BIGINT), CIF_ID, 1, LOS_AA_NUMBER, AA_NUMBER, 
			LIMIT_ID, LIMIT_ID, 0, EXPIRY_DATE, ORI_LOC_COUNTRY, ORG_LOC_ORG_CODE,
			LIMIT_CURRENCY, LIMIT_AMT, LIMIT_TENOR, '28', LIMIT_TENOR_UOM, DRAWING_LIMIT_AMT,
			OUTSTANDING_AMT, PRODUCT_TYPE_CAT, PRODUCT_TYPE_CODE, FACILITY_TYPE_CAT, FACILITY_CODE,
			'25', 'OUTER', T.CMS_ACT_LMT_PROFILE_ID, 'ACTIVE', 'RLOS', T.FACILITY_CODE,
			T.FACILITY_SEQ, CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR LIMIT_SEQ), 2)) as BIGINT), 'I', DRAWING_LIMIT_AMT
	FROM MIG_CA003_1 T
	WHERE T.IS_VALID = 'Y');		
	
	commit;
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 2);
	commit;

	CALL RUNSTATS_HELPER ('SCI_LSP_APPR_LMTS', 'ACCOUNT_TYPE, LMT_FAC_CODE, LMT_ID, SOURCE_ID');

	UPDATE SCI_LSP_APPR_LMTS A 
	SET ACCOUNT_TYPE = 
		(SELECT ACCOUNT_TYPE
		FROM HOST_FACILITY_TYPE fac
		WHERE fac.FACILITY_CODE = A.LMT_FAC_CODE)
	WHERE ACCOUNT_TYPE is NULL;

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 3);
	commit;

	-------------------------------------
	-- Staging Table
	-- STAGE_LIMIT
	--
	-------------------------------------
	
	--CALL SYSPROC.ADMIN_CMD('reorg table STAGE_LIMIT');

	INSERT INTO STAGE_LIMIT (CMS_LSP_APPR_LMTS_ID, LMT_LE_ID, LMT_LSP_ID, LOS_BCA_REF_NUM, LMT_BCA_REF_NUM, LOS_LMT_ID,
			LMT_ID, LMT_OUTER_LMT_ID, LMT_EXPRY_DATE, CMS_BKG_COUNTRY, CMS_BKG_ORGANISATION, LMT_CRRNCY_ISO_CODE, LMT_AMT,
			LMT_TENOR, LMT_TENOR_BASIS_NUM, LMT_TENOR_BASIS_VALUE, CMS_ACTIVATED_LIMIT, CMS_OUTSTANDING_AMT, LMT_PRD_TYPE_NUM, 
			LMT_PRD_TYPE_VALUE, LMT_FAC_TYPE_NUM, LMT_FAC_TYPE_VALUE, LMT_TYPE_NUM, LMT_TYPE_VALUE, 
			CMS_LIMIT_PROFILE_ID, CMS_LIMIT_STATUS, SOURCE_ID, LMT_FAC_CODE, LMT_FAC_SEQ, UPDATE_STATUS_IND, CMS_DRAWING_LIMIT)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR LIMIT_SEQ), 2)) as BIGINT),
			CIF_ID, 1, LOS_AA_NUMBER, AA_NUMBER, LIMIT_ID,
			LIMIT_ID, 0, EXPIRY_DATE, ORI_LOC_COUNTRY, ORG_LOC_ORG_CODE, LIMIT_CURRENCY, LIMIT_AMT,
			LIMIT_TENOR, '28', LIMIT_TENOR_UOM, DRAWING_LIMIT_AMT, OUTSTANDING_AMT, PRODUCT_TYPE_CAT,
			PRODUCT_TYPE_CODE, FACILITY_TYPE_CAT, FACILITY_CODE, '25', 'OUTER',
			T.CMS_ACT_LMT_PROFILE_ID, 'ACTIVE', 'RLOS', T.FACILITY_CODE, T.FACILITY_SEQ, 'I', DRAWING_LIMIT_AMT
	FROM MIG_CA003_1 T
	WHERE IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 4);
	commit;
	
	CALL RUNSTATS_HELPER ('STAGE_LIMIT', 'LMT_FAC_CODE, ACCOUNT_TYPE, SOURCE_ID, LMT_ID, CMS_LSP_APPR_LMTS_ID');

	UPDATE STAGE_LIMIT A 
	SET ACCOUNT_TYPE = 
		(SELECT ACCOUNT_TYPE
		FROM HOST_FACILITY_TYPE fac
		WHERE fac.FACILITY_CODE = A.LMT_FAC_CODE)
	WHERE ACCOUNT_TYPE is NULL;

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 5);
	commit;
	
	--CALL RUNSTATS_HELPER ('SCI_LSP_APPR_LMTS');

	--LOCK TABLE MIG_CA003_1 IN SHARE MODE;
	UPDATE MIG_CA003_1 A 
	SET CMS_ACT_LMT_ID = 
		(SELECT CMS_LSP_APPR_LMTS_ID
		FROM SCI_LSP_APPR_LMTS LMTS
		WHERE A.LIMIT_ID = LMTS.LMT_ID
		AND LMTS.SOURCE_ID = 'RLOS')
	WHERE A.IS_VALID = 'Y';
--     	AND EXISTS (SELECT 1
-- 		FROM SCI_LSP_APPR_LMTS LMTS1
-- 		WHERE A.LIMIT_ID = LMTS1.LMT_ID
-- 		AND LMTS1.SOURCE_ID = 'RLOS');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 6);
	commit;

	--CALL SYSPROC.ADMIN_CMD('reorg table CMS_FACILITY_MASTER');
	CALL RUNSTATS_HELPER ('MIG_CA003_1', 'CMS_ACT_LMT_ID');
	
	INSERT INTO CMS_FACILITY_MASTER (ID, CURRENCY_CODE, CMS_LSP_APPR_LMTS_ID,ACTUAL_PLEDGED_LIMIT, ALLOW_INCENTIVE_IND, ALT_RATE, 
		ALT_SCHEDULE, APPL_SRC_CODE_NUM, APPL_SRC_CODE_VALUE, AVAIL_PERIOD_DAY, AVAIL_PERIOD_MONTH, CAL_FIRST_INSTL_DATE, 
		CGC_BNM_APPROVED_DATE, CREDIT_LINE_IND, DEALER_NUM_LPP_CODE_NUM, DEALER_NUM_LPP_CODE_VALUE, DEPARTMENT_CODE_NUM, 
		DEPARTMENT_CODE_VALUE, DISBURSEMENT_MANNER, ECOF_ADMIN_COST, ECOF_RATE, ECOF_VARIANCE, ECOF_VARIANCE_CODE, 
		EFFECTIVE_COSE_OF_FUND, AVAIL_DATE, AVAIL_PERIOD, FLOOR_PLEDGED_LIMIT, INT_IN_SUSPENSE, ISO_REFERRAL_NUM,
		LAST_MAINTENANCE_DATE, LAWYER_CODE_NUM, LAWYER_CODE_VALUE, LEVEL, MAIN_FACILITY_IND, MAIN_FACILITY_AA_NUM, 
		MAIN_FACILITY_CODE, MAIN_FACILITY_SEQ, OD_EXCESS_RATE_VAR, OD_EXCESS_RATE_VAR_CODE, PAR_VALUE_SHARES, 
		PROD_PACKAGE_CODE_NUM, PROD_PACKAGE_CODE_VALUE, REFINANCE_FROM_BANK_CODE_NUM, REFINANCE_FROM_BANK_CODE_VALUE, 
		RETENTION_PERIOD_CODE, RETENTION_SUM, REVOLVING_IND, REVOLVING_ON_CRITERIA_IND, SOLICITOR_NAME, 
		SOLICITOR_REFERENCE, SPEC_PROVISION, STANDBY_LINE, STANDBY_LINE_FAC_CODE, STANDBY_LINE_FAC_SEQ, ACF_NO, 
		RETENTION_PERIOD, DATE_INSTRUCTED, CMS_DRAWING_LIMIT, LMT_PRD_TYPE_VALUE)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FACILITY_MASTER_SEQ), 2)) AS BIGINT),
			LIMIT_CURRENCY, CMS_ACT_LMT_ID, ACTUAL_PLEDGED_LIMIT, ALLOW_INCENTIVE_IND, ALT_RATE, ALT_SCHEDULE, 
			APPL_SRC_CODE_NUM, APPL_SRC_CODE_VALUE, AVAIL_PERIOD_DAY, AVAIL_PERIOD_MONTH, CAL_FIRST_INSTL_DATE, 
			CGC_BNM_APPROVED_DATE, CREDIT_LINE_IND, DEALER_NUM_LPP_CODE_NUM, DEALER_NUM_LPP_CODE_VALUE, DEPARTMENT_CODE_NUM, 
			DEPARTMENT_CODE_VALUE, DISBURSEMENT_MANNER, ECOF_ADMIN_COST, ECOF_RATE, ECOF_VARIANCE, ECOF_VARIANCE_CODE, 
			EFFECTIVE_COSE_OF_FUND, AVAIL_DATE, AVAIL_PERIOD, FLOOR_PLEDGED_LIMIT, INT_IN_SUSPENSE, ISO_REFERRAL_NUM,
			LAST_MAINTENANCE_DATE, LAWYER_CODE_NUM, LAWYER_CODE_VALUE, LEVEL, MAIN_FACILITY_IND, STRIP(MAIN_FACILITY_AA_NUM, LEADING, '0'), 
			MAIN_FACILITY_CODE, MAIN_FACILITY_SEQ, OD_EXCESS_RATE_VAR, OD_EXCESS_RATE_VAR_CODE, PAR_VALUE_SHARES, 
			PROD_PACKAGE_CODE_NUM, PROD_PACKAGE_CODE_VALUE, REFINANCE_FROM_BANK_CODE_NUM, REFINANCE_FROM_BANK_CODE_VALUE, 
			RETENTION_PERIOD_CODE, RETENTION_SUM, REVOLVING_IND, REVOLVING_ON_CRITERIA_IND, SOLICITOR_NAME, 
			SOLICITOR_REFERENCE, SPEC_PROVISION, STANDBY_LINE, STANDBY_LINE_FAC_CODE, STANDBY_LINE_FAC_SEQ, ACF_NO,
			RETENTION_PERIOD, DATE_INSTRUCTED, DRAWING_LIMIT_AMT, PRODUCT_TYPE_CODE
	FROM MIG_CA003_1 T
	WHERE T.CMS_ACT_LMT_ID IS NOT NULL		
	AND IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 7);
	commit;

	--LOCK TABLE MIG_CA003_1 IN SHARE MODE;
	-- transaction not yet create at this point of time
-- 	UPDATE MIG_CA003_1 A 
-- 	SET CMS_STG_LMT_ID = 
-- 		(SELECT STAGING_REFERENCE_ID
-- 		FROM TRANSACTION TRX, SCI_LSP_APPR_LMTS LMTS
-- 		WHERE TRX.TRANSACTION_TYPE = 'LIMIT'
-- 		AND TRX.REFERENCE_ID = LMTS.CMS_LSP_APPR_LMTS_ID
-- 		AND LMTS.SOURCE_ID = 'RLOS'
-- 		AND LMTS.LMT_ID = A.LIMIT_ID
-- 		AND A.IS_VALID = 'Y')
-- 	WHERE A.IS_VALID = 'Y';

	

	update mig_ca003_1 a
	set cms_stg_lmt_id = (select cms_lsp_appr_lmts_id
		from stage_limit l
		where lmt_id = a.limit_id
		and source_id = 'RLOS')
	where a.is_valid = 'Y';

	CALL RUNSTATS_HELPER ('MIG_CA003_1', 'CMS_STG_LMT_ID, FAC_STATUS_CODE_VALUE, CMS_ACT_LMT_PROFILE_ID');
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 8);
	commit;

	--CALL SYSPROC.ADMIN_CMD('reorg table CMS_STG_FACILITY_MASTER');

	INSERT INTO CMS_STG_FACILITY_MASTER (ID, CURRENCY_CODE, CMS_LSP_APPR_LMTS_ID,ACTUAL_PLEDGED_LIMIT, ALLOW_INCENTIVE_IND, ALT_RATE, 
		ALT_SCHEDULE, APPL_SRC_CODE_NUM, APPL_SRC_CODE_VALUE, AVAIL_PERIOD_DAY, AVAIL_PERIOD_MONTH, CAL_FIRST_INSTL_DATE, 
		CGC_BNM_APPROVED_DATE, CREDIT_LINE_IND, DEALER_NUM_LPP_CODE_NUM, DEALER_NUM_LPP_CODE_VALUE, DEPARTMENT_CODE_NUM, 
		DEPARTMENT_CODE_VALUE, DISBURSEMENT_MANNER, ECOF_ADMIN_COST, ECOF_RATE, ECOF_VARIANCE, ECOF_VARIANCE_CODE, 
		EFFECTIVE_COSE_OF_FUND, AVAIL_DATE, AVAIL_PERIOD, FLOOR_PLEDGED_LIMIT, INT_IN_SUSPENSE, ISO_REFERRAL_NUM,
		LAST_MAINTENANCE_DATE, LAWYER_CODE_NUM, LAWYER_CODE_VALUE, LEVEL, MAIN_FACILITY_IND, MAIN_FACILITY_AA_NUM, 
		MAIN_FACILITY_CODE, MAIN_FACILITY_SEQ, OD_EXCESS_RATE_VAR, OD_EXCESS_RATE_VAR_CODE, PAR_VALUE_SHARES, 
		PROD_PACKAGE_CODE_NUM, PROD_PACKAGE_CODE_VALUE, REFINANCE_FROM_BANK_CODE_NUM, REFINANCE_FROM_BANK_CODE_VALUE, 
		RETENTION_PERIOD_CODE, RETENTION_SUM, REVOLVING_IND, REVOLVING_ON_CRITERIA_IND, SOLICITOR_NAME, 
		SOLICITOR_REFERENCE, SPEC_PROVISION, STANDBY_LINE, STANDBY_LINE_FAC_CODE, STANDBY_LINE_FAC_SEQ, ACF_NO, 
		RETENTION_PERIOD, DATE_INSTRUCTED, CMS_DRAWING_LIMIT, LMT_PRD_TYPE_VALUE)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FACILITY_MASTER_SEQ), 2)) AS BIGINT),
			LIMIT_CURRENCY, CMS_ACT_LMT_ID, ACTUAL_PLEDGED_LIMIT, ALLOW_INCENTIVE_IND, ALT_RATE, ALT_SCHEDULE, 
			APPL_SRC_CODE_NUM, APPL_SRC_CODE_VALUE, AVAIL_PERIOD_DAY, AVAIL_PERIOD_MONTH, CAL_FIRST_INSTL_DATE, 
			CGC_BNM_APPROVED_DATE, CREDIT_LINE_IND, DEALER_NUM_LPP_CODE_NUM, DEALER_NUM_LPP_CODE_VALUE, DEPARTMENT_CODE_NUM, 
			DEPARTMENT_CODE_VALUE, DISBURSEMENT_MANNER, ECOF_ADMIN_COST, ECOF_RATE, ECOF_VARIANCE, ECOF_VARIANCE_CODE, 
			EFFECTIVE_COSE_OF_FUND, AVAIL_DATE, AVAIL_PERIOD, FLOOR_PLEDGED_LIMIT, INT_IN_SUSPENSE, ISO_REFERRAL_NUM,
			LAST_MAINTENANCE_DATE, LAWYER_CODE_NUM, LAWYER_CODE_VALUE, LEVEL, MAIN_FACILITY_IND, STRIP(MAIN_FACILITY_AA_NUM, LEADING, '0'), 
			MAIN_FACILITY_CODE, MAIN_FACILITY_SEQ, OD_EXCESS_RATE_VAR, OD_EXCESS_RATE_VAR_CODE, PAR_VALUE_SHARES, 
			PROD_PACKAGE_CODE_NUM, PROD_PACKAGE_CODE_VALUE, REFINANCE_FROM_BANK_CODE_NUM, REFINANCE_FROM_BANK_CODE_VALUE, 
			RETENTION_PERIOD_CODE, RETENTION_SUM, REVOLVING_IND, REVOLVING_ON_CRITERIA_IND, SOLICITOR_NAME, 
			SOLICITOR_REFERENCE, SPEC_PROVISION, STANDBY_LINE, STANDBY_LINE_FAC_CODE, STANDBY_LINE_FAC_SEQ, ACF_NO,
			RETENTION_PERIOD, DATE_INSTRUCTED, DRAWING_LIMIT_AMT, PRODUCT_TYPE_CODE
	FROM MIG_CA003_1 T
	WHERE T.CMS_ACT_LMT_ID IS NOT NULL		
	AND IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 9);
	commit;

	CALL RUNSTATS_HELPER ('CMS_FACILITY_MASTER', 'CMS_LSP_APPR_LMTS_ID, ID');

	--LOCK TABLE MIG_CA003_1 IN SHARE MODE;
	UPDATE MIG_CA003_1 A 
	SET CMS_ACT_FAC_MASTER_ID = 
		(SELECT ID
		FROM CMS_FACILITY_MASTER FAC
		WHERE A.CMS_ACT_LMT_ID = FAC.CMS_LSP_APPR_LMTS_ID)
	WHERE A.IS_VALID = 'Y';
-- 	AND EXISTS (SELECT 1
-- 		FROM CMS_FACILITY_MASTER FAC1
-- 		WHERE A.CMS_ACT_LMT_ID = FAC1.CMS_LSP_APPR_LMTS_ID);

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 10);
	commit;

	--CALL SYSPROC.ADMIN_CMD('reorg table CMS_FAC_FEE_CHARGE');

	INSERT INTO CMS_FAC_FEE_CHARGE (CMS_FAC_MASTER_ID, CURRENCY_CODE, COMMISSION_BASIS_CODE_NUM, COMMISSION_BASIS_CODE_VALUE, COMMISSION_FEES, COMMISSION_RATE,
			COMMITMENT_RATE, COMTMT_RATE_NUM_CODE_NUM, COMTMT_RATE_NUM_CODE_VALUE, HANDLING_FEES, LATE_CHARGE_TYPE, MAX_COMSSN_AMOUNT,
			MIN_COMSSN_AMOUNT, OTHERS_FEE, SUBSIDY_AMOUNT)
	(SELECT CMS_ACT_FAC_MASTER_ID, LIMIT_CURRENCY, COMMISSION_BASIS_CODE_NUM, COMMISSION_BASIS_CODE_VALUE, COMMISSION_FEES, COMMISSION_RATE,
			COMMITMENT_RATE, COMTMT_RATE_NUM_CODE_NUM, COMTMT_RATE_NUM_CODE_VALUE, HANDLING_FEES, LATE_CHARGE_TYPE, MAX_COMSSN_AMOUNT,
			MIN_COMSSN_AMOUNT, OTHERS_FEE, SUBSIDY_AMOUNT
	FROM MIG_CA003_1 T
	WHERE T.CMS_ACT_FAC_MASTER_ID IS NOT NULL		
	AND IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 11);
	commit;

	CALL RUNSTATS_HELPER ('CMS_STG_FACILITY_MASTER', 'CMS_LSP_APPR_LMTS_ID, ID');

	--LOCK TABLE MIG_CA003_1 IN SHARE MODE;
-- 	UPDATE MIG_CA003_1 A 
-- 	SET CMS_STG_FAC_MASTER_ID = 
-- 		(SELECT stgFac.ID
-- 		FROM CMS_STG_FACILITY_MASTER stgFac, SCI_LSP_APPR_LMTS stg
-- 		WHERE stgFac.CMS_LSP_APPR_LMTS_ID = stg.CMS_LSP_APPR_LMTS_ID
--         	AND stg.LMT_ID = A.LIMIT_ID
-- 		)
-- 	WHERE A.IS_VALID = 'Y'
--     	AND EXISTS (SELECT 1
-- 		FROM CMS_STG_FACILITY_MASTER stgFac, STAGE_LIMIT stg
-- 		WHERE stgFac.CMS_LSP_APPR_LMTS_ID = stg.CMS_LSP_APPR_LMTS_ID
--         	AND stg.LMT_ID = A.LIMIT_ID);

	UPDATE MIG_CA003_1 A 
	SET CMS_STG_FAC_MASTER_ID = 
		(SELECT stgFac.ID
		FROM CMS_STG_FACILITY_MASTER stgFac
		WHERE stgFac.CMS_LSP_APPR_LMTS_ID = A.CMS_ACT_LMT_ID)
	WHERE A.IS_VALID = 'Y';

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 12);
	commit;

	CALL RUNSTATS_HELPER ('MIG_CA003_1', 'IS_VALID, CMS_STG_FAC_MASTER_ID');
	--CALL SYSPROC.ADMIN_CMD('reorg table CMS_STG_FAC_FEE_CHARGE');
	
	INSERT INTO CMS_STG_FAC_FEE_CHARGE (CMS_FAC_MASTER_ID, CURRENCY_CODE, COMMISSION_BASIS_CODE_NUM, COMMISSION_BASIS_CODE_VALUE, COMMISSION_FEES, COMMISSION_RATE,
			COMMITMENT_RATE, COMTMT_RATE_NUM_CODE_NUM, COMTMT_RATE_NUM_CODE_VALUE, HANDLING_FEES, LATE_CHARGE_TYPE, MAX_COMSSN_AMOUNT,
			MIN_COMSSN_AMOUNT, OTHERS_FEE, SUBSIDY_AMOUNT)
	(SELECT CMS_STG_FAC_MASTER_ID, LIMIT_CURRENCY, COMMISSION_BASIS_CODE_NUM, COMMISSION_BASIS_CODE_VALUE, COMMISSION_FEES, COMMISSION_RATE,
			COMMITMENT_RATE, COMTMT_RATE_NUM_CODE_NUM, COMTMT_RATE_NUM_CODE_VALUE, HANDLING_FEES, LATE_CHARGE_TYPE, MAX_COMSSN_AMOUNT,
			MIN_COMSSN_AMOUNT, OTHERS_FEE, SUBSIDY_AMOUNT
	FROM MIG_CA003_1 T
	WHERE T.CMS_STG_FAC_MASTER_ID IS NOT NULL		
	AND IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 13);
	commit;

	--CALL SYSPROC.ADMIN_CMD('reorg table CMS_FAC_GENERAL');

	INSERT INTO CMS_FAC_GENERAL (CMS_FAC_MASTER_ID, CURRENCY_CODE, APPLICATION_DATE, APPROVED_DATE, CAR_CODE_NUM, CAR_CODE_FLAG, CAR_CODE_VALUE,
		FAC_STATUS_CODE_NUM, FAC_STATUS_CODE_VALUE, FINAL_PAYMENT, FINANCED_AMOUNT, INSTALLMENT_AMOUNT, LMT_STATUS_CODE_NUM,
		LMT_STATUS_CODE_VALUE, LOAN_PURPOSE_CODE_NUM, LOAN_PURPOSE_CODE_VALUE, OFFER_ACCEPTED_DATE, OFFER_DATE, OFFICER_CODE_NUM, 
		OFFICER_CODE_VALUE, ORIGINAL_AMOUNT, OUTSTANDING_AMOUNT, PERSON_APPROVED_CODE_NUM, PERSON_APPROVED_CODE_VALUE, UTILISED_AMOUNT, ENTERED_DATE)
	(SELECT CMS_ACT_FAC_MASTER_ID, LIMIT_CURRENCY, APPLICATION_DATE, APPROVED_DATE, CAR_CODE_NUM, CAR_CODE_FLAG, CAR_CODE_VALUE,
		FAC_STATUS_CODE_NUM, FAC_STATUS_CODE_VALUE, FINAL_PAYMENT, FINANCED_AMOUNT, INSTALLMENT_AMOUNT, LMT_STATUS_CODE_NUM,
		LMT_STATUS_CODE_VALUE, LOAN_PURPOSE_CODE_NUM, LOAN_PURPOSE_CODE_VALUE, OFFER_ACCEPTED_DATE, OFFER_DATE, OFFICER_CODE_NUM, 
		OFFICER_CODE_VALUE, ORIGINAL_AMOUNT, OUTSTANDING_AMOUNT, PERSON_APPROVED_CODE_NUM, PERSON_APPROVED_CODE_VALUE, UTILISED_AMOUNT, ENTERED_DATE
	FROM MIG_CA003_1 T
	WHERE T.CMS_ACT_FAC_MASTER_ID IS NOT NULL		
	AND IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 14);
	commit;

	--CALL SYSPROC.ADMIN_CMD('reorg table CMS_STG_FAC_GENERAL');

	INSERT INTO CMS_STG_FAC_GENERAL (CMS_FAC_MASTER_ID, CURRENCY_CODE, APPLICATION_DATE, APPROVED_DATE, CAR_CODE_NUM, CAR_CODE_FLAG, CAR_CODE_VALUE,
		FAC_STATUS_CODE_NUM, FAC_STATUS_CODE_VALUE, FINAL_PAYMENT, FINANCED_AMOUNT, INSTALLMENT_AMOUNT, LMT_STATUS_CODE_NUM,
		LMT_STATUS_CODE_VALUE, LOAN_PURPOSE_CODE_NUM, LOAN_PURPOSE_CODE_VALUE, OFFER_ACCEPTED_DATE, OFFER_DATE, OFFICER_CODE_NUM, 
		OFFICER_CODE_VALUE, ORIGINAL_AMOUNT, OUTSTANDING_AMOUNT, PERSON_APPROVED_CODE_NUM, PERSON_APPROVED_CODE_VALUE, UTILISED_AMOUNT, ENTERED_DATE)
	(SELECT CMS_STG_FAC_MASTER_ID, LIMIT_CURRENCY, APPLICATION_DATE, APPROVED_DATE, CAR_CODE_NUM, CAR_CODE_FLAG, CAR_CODE_VALUE,
		FAC_STATUS_CODE_NUM, FAC_STATUS_CODE_VALUE, FINAL_PAYMENT, FINANCED_AMOUNT, INSTALLMENT_AMOUNT, LMT_STATUS_CODE_NUM,
		LMT_STATUS_CODE_VALUE, LOAN_PURPOSE_CODE_NUM, LOAN_PURPOSE_CODE_VALUE, OFFER_ACCEPTED_DATE, OFFER_DATE, OFFICER_CODE_NUM, 
		OFFICER_CODE_VALUE, ORIGINAL_AMOUNT, OUTSTANDING_AMOUNT, PERSON_APPROVED_CODE_NUM, PERSON_APPROVED_CODE_VALUE, UTILISED_AMOUNT, ENTERED_DATE
	FROM MIG_CA003_1 T
	WHERE T.CMS_STG_FAC_MASTER_ID IS NOT NULL		
	AND IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 15);
	commit;

	--CALL SYSPROC.ADMIN_CMD('reorg table CMS_FAC_INTEREST');

	INSERT INTO CMS_FAC_INTEREST (CMS_FAC_MASTER_ID, INTEREST_RATE, INTEREST_TYPE_CODE_NUM, INTEREST_TYPE_CODE_VALUE, PRIME_RATE_CEILING, PRIME_RATE_FLOOR,
		PRIME_REVIEW_DATE, PRIME_REVIEW_TERM, PRIME_REVIEW_TERM_CODE_NUM, PRIME_REVIEW_TERM_CODE_VALUE, SPREAD, SPREAD_SIGN,
		INTEREST_BASE, INTEREST_MODE, INTEREST_YEAR_BASE)
	(SELECT CMS_ACT_FAC_MASTER_ID, INTEREST_RATE, INTEREST_TYPE_CODE_NUM, INTEREST_TYPE_CODE_VALUE, PRIME_RATE_CEILING, PRIME_RATE_FLOOR,
		PRIME_REVIEW_DATE, PRIME_REVIEW_TERM, PRIME_REVIEW_TERM_CODE_NUM, PRIME_REVIEW_TERM_CODE_VALUE, SPREAD, SPREAD_SIGN, 
		INTEREST_BASE, INTEREST_MODE, INTEREST_YEAR_BASE
	FROM MIG_CA003_1 T
	WHERE T.CMS_ACT_FAC_MASTER_ID IS NOT NULL		
	AND IS_VALID = 'Y');
	
	commit;
	
	update cms_fac_interest set spread_sign = null where spread_sign = '';

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 16);
	commit;

	--CALL SYSPROC.ADMIN_CMD('reorg table CMS_STG_FAC_INTEREST');

	INSERT INTO CMS_STG_FAC_INTEREST (CMS_FAC_MASTER_ID, INTEREST_RATE, INTEREST_TYPE_CODE_NUM, INTEREST_TYPE_CODE_VALUE, PRIME_RATE_CEILING, PRIME_RATE_FLOOR,
		PRIME_REVIEW_DATE, PRIME_REVIEW_TERM, PRIME_REVIEW_TERM_CODE_NUM, PRIME_REVIEW_TERM_CODE_VALUE, SPREAD, SPREAD_SIGN,
		INTEREST_BASE, INTEREST_MODE, INTEREST_YEAR_BASE)
	(SELECT CMS_STG_FAC_MASTER_ID, INTEREST_RATE, INTEREST_TYPE_CODE_NUM, INTEREST_TYPE_CODE_VALUE, PRIME_RATE_CEILING, PRIME_RATE_FLOOR,
		PRIME_REVIEW_DATE, PRIME_REVIEW_TERM, PRIME_REVIEW_TERM_CODE_NUM, PRIME_REVIEW_TERM_CODE_VALUE, SPREAD, SPREAD_SIGN,
		INTEREST_BASE, INTEREST_MODE, INTEREST_YEAR_BASE
	FROM MIG_CA003_1 T
	WHERE T.CMS_STG_FAC_MASTER_ID IS NOT NULL		
	AND IS_VALID = 'Y');
	
	commit;
	
	update cms_stg_fac_interest set spread_sign = null where spread_sign = '';

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 17);
	commit;

	--CALL SYSPROC.ADMIN_CMD('reorg table CMS_FAC_PAYMENT');

	INSERT INTO CMS_FAC_PAYMENT (CMS_FAC_MASTER_ID, GRADE_PERIOD_VALUE, GRADE_PERIOD_CODE_VALUE, INT_PAYMENT_FREQ_VALUE, PAYMENT_CODE_VALUE, PAYMENT_FREQ_VALUE, PAYMENT_FREQ_CODE_VALUE, INT_PAYMENT_FREQ_CODE_VALUE)
	(SELECT CMS_ACT_FAC_MASTER_ID, GRADE_PERIOD_VALUE, GRADE_PERIOD_CODE_VALUE, INT_PAYMENT_FREQ_VALUE, PAYMENT_CODE_VALUE, PAYMENT_FREQ_VALUE, PAYMENT_FREQ_CODE_VALUE, INT_PAYMENT_FREQ_CODE_VALUE
	FROM MIG_CA003_1 T
	WHERE T.CMS_ACT_FAC_MASTER_ID IS NOT NULL		
	AND IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 18);
	commit;

	--CALL SYSPROC.ADMIN_CMD('reorg table CMS_STG_FAC_PAYMENT');

	INSERT INTO CMS_STG_FAC_PAYMENT (CMS_FAC_MASTER_ID, GRADE_PERIOD_VALUE, GRADE_PERIOD_CODE_VALUE, INT_PAYMENT_FREQ_VALUE, PAYMENT_CODE_VALUE, PAYMENT_FREQ_VALUE, PAYMENT_FREQ_CODE_VALUE, INT_PAYMENT_FREQ_CODE_VALUE)
	(SELECT CMS_STG_FAC_MASTER_ID, GRADE_PERIOD_VALUE, GRADE_PERIOD_CODE_VALUE, INT_PAYMENT_FREQ_VALUE, PAYMENT_CODE_VALUE, PAYMENT_FREQ_VALUE, PAYMENT_FREQ_CODE_VALUE, INT_PAYMENT_FREQ_CODE_VALUE
	FROM MIG_CA003_1 T
	WHERE T.CMS_STG_FAC_MASTER_ID IS NOT NULL		
	AND IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 19);
	commit;

	-- already run in auto create trx set 1
	--CALL RUNSTATS_HELPER ('CMS_TAT_DOCUMENT');
	--CALL RUNSTATS_HELPER ('SCI_LSP_LMT_PROFILE');
	
-- 	UPDATE CMS_TAT_DOCUMENT A 
-- 	SET DOC_COMPLETION_DATE = CURRENT DATE
-- 	WHERE EXISTS (SELECT 1 FROM MIG_CA003_1 mig
-- 			WHERE A.CMS_LSP_LMT_PROFILE_ID = mig.CMS_ACT_LMT_PROFILE_ID
-- 			AND mig.LOS_AA_NUMBER NOT IN (SELECT mig2.LOS_AA_NUMBER 
-- 					 		FROM MIG_CA003_1 mig2
-- 					 		WHERE mig2.FAC_STATUS_CODE_VALUE IN ('P','T')
-- 							AND mig2.IS_VALID = 'Y'
-- 					 		GROUP BY mig2.LOS_AA_NUMBER)
-- 			AND mig.IS_VALID = 'Y');

	-- UPDATE CMS_TAT_DOCUMENT A 
	-- SET DOC_COMPLETION_DATE = CURRENT DATE
	-- WHERE EXISTS (SELECT 1 FROM sci_lsp_lmt_profile pf
			-- WHERE A.CMS_LSP_LMT_PROFILE_ID = pf.cms_lsp_LMT_PROFILE_ID
			-- and is_migrated_ind = 'Y'
			-- and not exists (select 1 							
					 		-- FROM MIG_CA003_1 mig2
					 		-- WHERE mig2.FAC_STATUS_CODE_VALUE IN ('P','T')
							-- AND mig2.IS_VALID = 'Y'
							-- and mig2.CMS_ACT_LMT_PROFILE_ID = pf.CMS_LSP_LMT_PROFILE_ID)
			-- AND pf.source_id = 'RLOS');
			
	UPDATE CMS_TAT_DOCUMENT A 
	SET DOC_COMPLETION_DATE = CURRENT DATE
	WHERE EXISTS (select 1 FROM MIG_CA003_1 mig2
                        WHERE mig2.FAC_STATUS_CODE_VALUE NOT IN ('P','T')
                        AND mig2.IS_VALID = 'Y'
                        and mig2.CMS_ACT_LMT_PROFILE_ID = A.CMS_LSP_LMT_PROFILE_ID fetch first row only);				
			
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_1', 'SIBS', 0);
	commit;
	  
END@


CREATE PROCEDURE MIG_RUN_CA003_2_BNM
	LANGUAGE SQL
BEGIN
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_2_BNM', 'SIBS', 1);
	commit;

	CALL RUNSTATS_HELPER('MIG_CA003_2_BNM','CMS_ACT_FAC_MASTER_ID,IS_VALID, CMS_ACT_LIMIT_ID');
	-------------------------------------
	-- Actual Table
	-- CMS_FAC_BNM_CODES
	-------------------------------------
    	INSERT INTO CMS_FAC_BNM_CODES (CMS_FAC_MASTER_ID, BUMI_NRCC_CODE_NUM, BUMI_NRCC_CODE_VALUE, 
    			EXEMPTED_CODE_NUM, EXEMPTED_CODE_VALUE, GOODS_FINANCED_ONE_CODE_NUM, GOODS_FINANCED_ONE_CODE_VALUE, 
    			GOODS_FINANCED_TWO_CODE_NUM, GOODS_FINANCED_TWO_CODE_VALUE, HOST_TIER_SEQ, INDUSTRY_CODE_NUM,
    			INDUSTRY_CODE_VALUE, PRESCRIBED_RATE_CODE_NUM, PRESCRIBED_RATE_CODE_VALUE, PURPOSE_CODE_NUM, 
    			PURPOSE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, SECTOR_CODE_NUM, SECTOR_CODE_VALUE, 
    			SMALL_SCALE_CODE_NUM, SMALL_SCALE_CODE_VALUE, STATE_CODE_NUM, STATE_CODE_VALUE, EXEMPTED_CODE_IND) 
    	(SELECT CMS_ACT_FAC_MASTER_ID, BUMI_NRCC_CODE_NUM, BUMI_NRCC_CODE_VALUE, EXEMPTED_CODE_NUM, EXEMPTED_CODE_VALUE, GOODS_FINANCED_ONE_CODE_NUM, 
    			GOODS_FINANCED_ONE_CODE_VALUE, GOODS_FINANCED_TWO_CODE_NUM, GOODS_FINANCED_TWO_CODE_VALUE, HOST_TIER_SEQ, 
    			INDUSTRY_CODE_NUM, INDUSTRY_CODE_VALUE, PRESCRIBED_RATE_CODE_NUM, PRESCRIBED_RATE_CODE_VALUE, PURPOSE_CODE_NUM, 
    			PURPOSE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, SECTOR_CODE_NUM, SECTOR_CODE_VALUE, 
    			SMALL_SCALE_CODE_NUM, SMALL_SCALE_CODE_VALUE, STATE_CODE_NUM, STATE_CODE_VALUE, EXEMPTED_CODE_IND
    	FROM MIG_CA003_2_BNM
    	WHERE CMS_ACT_FAC_MASTER_ID IS NOT NULL		
	AND IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_2_BNM', 'SIBS', 2);
	commit;
    
	CREATE INDEX TEMP_INDEX_1 ON MIG_CA003_2_BNM 
		(IS_VALID, CMS_ACT_LIMIT_ID) ALLOW REVERSE SCANS
		collect statistics;
	COMMIT;
		
	-------------------------------------
	-- Stage Table
	-- CMS_STG_FAC_BNM_CODES
	-------------------------------------
    	INSERT INTO CMS_STG_FAC_BNM_CODES (CMS_FAC_MASTER_ID, BUMI_NRCC_CODE_NUM, BUMI_NRCC_CODE_VALUE, 
    			EXEMPTED_CODE_NUM, EXEMPTED_CODE_VALUE, GOODS_FINANCED_ONE_CODE_NUM, GOODS_FINANCED_ONE_CODE_VALUE, 
    			GOODS_FINANCED_TWO_CODE_NUM, GOODS_FINANCED_TWO_CODE_VALUE, HOST_TIER_SEQ, INDUSTRY_CODE_NUM,
    			INDUSTRY_CODE_VALUE, PRESCRIBED_RATE_CODE_NUM, PRESCRIBED_RATE_CODE_VALUE, PURPOSE_CODE_NUM, 
    			PURPOSE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, SECTOR_CODE_NUM, SECTOR_CODE_VALUE, 
    			SMALL_SCALE_CODE_NUM, SMALL_SCALE_CODE_VALUE, STATE_CODE_NUM, STATE_CODE_VALUE, EXEMPTED_CODE_IND) 
    	(SELECT c.ID, BUMI_NRCC_CODE_NUM, BUMI_NRCC_CODE_VALUE, EXEMPTED_CODE_NUM, EXEMPTED_CODE_VALUE, GOODS_FINANCED_ONE_CODE_NUM, 
    			GOODS_FINANCED_ONE_CODE_VALUE, GOODS_FINANCED_TWO_CODE_NUM, GOODS_FINANCED_TWO_CODE_VALUE, HOST_TIER_SEQ, 
    			INDUSTRY_CODE_NUM, INDUSTRY_CODE_VALUE, PRESCRIBED_RATE_CODE_NUM, PRESCRIBED_RATE_CODE_VALUE, PURPOSE_CODE_NUM, 
    			PURPOSE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, SECTOR_CODE_NUM, SECTOR_CODE_VALUE, 
    			SMALL_SCALE_CODE_NUM, SMALL_SCALE_CODE_VALUE, STATE_CODE_NUM, STATE_CODE_VALUE, EXEMPTED_CODE_IND
    	FROM MIG_CA003_2_BNM a, CMS_STG_FACILITY_MASTER c
    	WHERE a.CMS_ACT_LIMIT_ID = c.CMS_LSP_APPR_LMTS_ID 
    	AND a.IS_VALID = 'Y');

	DROP INDEX TEMP_INDEX_1;
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_2_BNM', 'SIBS', 0);

    
END@

CREATE PROCEDURE MIG_RUN_CA003_3_OFF
	LANGUAGE SQL
BEGIN
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_3_OFF', 'SIBS', 1);
	commit;

	CALL RUNSTATS_HELPER ('MIG_CA003_3_OFF', 'IS_VALID, CMS_ACT_FAC_MASTER_ID, SEQ_NUM');
	-------------------------------------
	-- Actual Table
	-- CMS_FAC_OFFICER
	-------------------------------------
    	INSERT INTO CMS_FAC_OFFICER (ID, CMS_FAC_MASTER_ID, OFFICER_CODE_NUM, OFFICER_CODE_VALUE, OFFICER_TYPE_CODE_NUM, 
			OFFICER_TYPE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, STATUS, SEQ_NUM, HOST_SEQ_NUM,
			CMS_REF_ID) 
    	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_OFFICER_SEQ), 2)) AS BIGINT), 
    			CMS_ACT_FAC_MASTER_ID, OFFICER_CODE_NUM, OFFICER_CODE_VALUE, OFFICER_TYPE_CODE_NUM, 
			OFFICER_TYPE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, 'I', SEQ_NUM, SEQ_NUM,
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_OFFICER_SEQ), 2)) AS BIGINT)
    	FROM MIG_CA003_3_OFF
    	WHERE IS_VALID = 'Y'
    	AND CMS_ACT_FAC_MASTER_ID IS NOT NULL);

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_3_OFF', 'SIBS', 2);
	commit;
    
	CREATE INDEX TEMP_INDEX_1 ON MIG_CA003_3_OFF
		(IS_VALID, CMS_ACT_FAC_MASTER_ID, SEQ_NUM)
		ALLOW REVERSE SCANS
		collect statistics;
	COMMIT;
		
	LOCK TABLE MIG_CA003_3_OFF IN SHARE MODE;
	UPDATE MIG_CA003_3_OFF A 
	SET CMS_ACT_FAC_OFFICER_ID = 
		(SELECT ID
		FROM CMS_FAC_OFFICER B
		WHERE B.CMS_FAC_MASTER_ID = A.CMS_ACT_FAC_MASTER_ID
		AND B.SEQ_NUM = A.SEQ_NUM)
	WHERE A.IS_VALID = 'Y';
	-- AND EXISTS (SELECT 1
		-- FROM CMS_FAC_OFFICER C
		-- WHERE C.CMS_FAC_MASTER_ID = A.CMS_ACT_FAC_MASTER_ID
		-- AND C.SEQ_NUM = A.SEQ_NUM);

	DROP INDEX TEMP_INDEX_1;
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_3_OFF', 'SIBS', 3);
	commit;

	-- hshii: already updated together with insert script
-- 	UPDATE CMS_FAC_OFFICER A 
-- 	SET CMS_REF_ID = 
-- 		(SELECT B.CMS_ACT_FAC_OFFICER_ID
-- 		FROM MIG_CA003_3_OFF B
-- 		WHERE B.CMS_ACT_FAC_MASTER_ID = A.CMS_FAC_MASTER_ID
-- 		AND B.SEQ_NUM = A.SEQ_NUM
-- 		AND B.IS_VALID = 'Y')
-- 	WHERE CMS_REF_ID IS NULL
-- 	AND EXISTS(SELECT 1 FROM MIG_CA003_3_OFF C
-- 		   WHERE C.CMS_ACT_FAC_MASTER_ID = A.CMS_FAC_MASTER_ID
-- 		   AND C.SEQ_NUM = A.SEQ_NUM
-- 		   AND C.IS_VALID = 'Y');

--	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_3_OFF', 'SIBS', 4);
--	commit;

	create index temp_index_1 on mig_ca003_3_off
		(is_valid, cms_act_limit_id) allow reverse scans
		collect statistics;
		
	COMMIT;
	-------------------------------------
	-- Stage Table
	-- CMS_STG_FAC_OFFICER
	-------------------------------------
    	INSERT INTO CMS_STG_FAC_OFFICER (ID, CMS_FAC_MASTER_ID, CMS_REF_ID, OFFICER_CODE_NUM, OFFICER_CODE_VALUE, OFFICER_TYPE_CODE_NUM, 
			OFFICER_TYPE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, STATUS, SEQ_NUM, HOST_SEQ_NUM) 
    	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_OFFICER_SEQ), 2)) AS BIGINT), 
    			c.ID, a.CMS_ACT_FAC_OFFICER_ID, OFFICER_CODE_NUM, OFFICER_CODE_VALUE, OFFICER_TYPE_CODE_NUM, 
			OFFICER_TYPE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, 'I', SEQ_NUM, a.SEQ_NUM
    	FROM MIG_CA003_3_OFF a, CMS_STG_FACILITY_MASTER c
    	WHERE a.cms_act_limit_id = c.CMS_LSP_APPR_LMTS_ID 
    	AND a.IS_VALID = 'Y');

	drop index temp_index_1;
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_3_OFF', 'SIBS', 0);

    
END@


CREATE PROCEDURE MIG_RUN_CA003_4_REL
	LANGUAGE SQL
BEGIN
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_4_REL', 'SIBS', 1);
	commit;

	CALL RUNSTATS_HELPER('MIG_CA003_4_REL', 'IS_VALID, CMS_ACT_FAC_MASTER_ID, CIF_NUMBER, CMS_ACT_LIMIT_ID');
	-------------------------------------
	-- Actual Table
	-- CMS_FAC_RELATIONSHIP
	-------------------------------------
	INSERT INTO CMS_FAC_RELATIONSHIP (ID, CMS_FAC_MASTER_ID, CIF_NUMBER, CMS_LE_MAIN_PROFILE_ID, ACCT_RELATIONSHIP_CODE_NUM, ACCT_RELATIONSHIP_CODE_VALUE, 
		GUARANTEE_AMOUNT, GUARANTEE_PERCENTAGE, SHARE_HOLDER_PERCENTAGE, HOST_ADD_SEQ_NUM, RECEIVE_MAIL_CODE,
		HOLD_MAIN_CODE_NUM, HOLD_MAIN_CODE_VALUE, NAME_ASSOC_WITH_FAC_ORDER, NAME_CONJUNCTION_POSITION, NAME_CONJUNCTION, 
		PROFIT_RATIO, DIVIDEND_RATIO, CUSTOMER_NAME, STATUS, CMS_REF_ID, CURRENCY_CODE) 
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_RELATIONSHIP_SEQ), 2)) AS BIGINT), 
		CMS_ACT_FAC_MASTER_ID, STRIP(CIF_NUMBER, LEADING, '0'), CMS_LE_MAIN_PROFILE_ID, ACCT_RELATIONSHIP_CODE_NUM, ACCT_RELATIONSHIP_CODE_VALUE, 
		GUARANTEE_AMOUNT, GUARANTEE_PERCENTAGE, SHARE_HOLDER_PERCENTAGE, HOST_ADD_SEQ_NUM, RECEIVE_MAIL_CODE,
		HOLD_MAIN_CODE_NUM, HOLD_MAIN_CODE_VALUE, NAME_ASSOC_WITH_FAC_ORDER, NAME_CONJUNCTION_POSITION, NAME_CONJUNCTION_CODE,
		PROFIT_RATIO, DIVIDEND_RATIO, CUSTOMER_NAME, 'I',
		CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_RELATIONSHIP_SEQ), 2)) AS BIGINT), CURRENCY_CODE
	FROM MIG_CA003_4_REL
	WHERE IS_VALID = 'Y'
    AND CMS_ACT_FAC_MASTER_ID IS NOT NULL
		);
		
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_4_REL', 'SIBS', 2);
	commit;
    
	--CALL SYSPROC.ADMIN_CMD('reorg table CMS_FAC_RELATIONSHIP');
	CALL RUNSTATS_HELPER('CMS_FAC_RELATIONSHIP', 'CMS_FAC_MASTER_ID, CIF_NUMBER');


--	create index temp_index_1 on mig_ca003_4_rel
--	(is_valid, cms_act_fac_master_id, cif_number)
--	allow reverse scans;	
	
	create index temp_index_1 on mig_ca003_4_rel
	(is_valid, cms_act_fac_master_id, cif_number)
	allow reverse scans
	collect statistics;		
	
	commit;
	
	--LOCK TABLE MIG_CA003_4_REL IN EXCLUSIVE MODE;
	UPDATE MIG_CA003_4_REL A 
	SET CMS_ACT_FAC_RELATIONSHIP_ID = 
		(SELECT ID FROM CMS_FAC_RELATIONSHIP B
		WHERE B.CMS_FAC_MASTER_ID = A.CMS_ACT_FAC_MASTER_ID
        AND B.CIF_NUMBER = STRIP(A.CIF_NUMBER, LEADING, '0'))
	WHERE A.IS_VALID = 'Y'
	AND CMS_ACT_FAC_MASTER_ID IS NOT NULL;
	--AND EXISTS (SELECT 1 FROM CMS_FAC_RELATIONSHIP C
		--WHERE C.CMS_FAC_MASTER_ID = A.CMS_ACT_FAC_MASTER_ID);

	drop index temp_index_1;
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_4_REL', 'SIBS', 3);
	commit;

-- 	UPDATE CMS_FAC_RELATIONSHIP A 
-- 	SET CMS_REF_ID = 
-- 		(SELECT B.CMS_ACT_FAC_RELATIONSHIP_ID
-- 		FROM MIG_CA003_4_REL B
-- 		WHERE B.CMS_ACT_FAC_MASTER_ID = A.CMS_FAC_MASTER_ID
--         AND B.CIF_NUMBER = A.CIF_NUMBER
-- 		AND B.IS_VALID = 'Y')
-- 	WHERE CMS_REF_ID IS NULL
-- 	AND EXISTS(SELECT 1 FROM MIG_CA003_4_REL C
-- 		   WHERE C.CMS_ACT_FAC_MASTER_ID = A.CMS_FAC_MASTER_ID
--            AND C.CIF_NUMBER = A.CIF_NUMBER
-- 		   AND C.IS_VALID = 'Y');


	-- hshii: already update together with insert query
-- 	CALL RUNSTATS_HELPER('MIG_CA003_4_REL');
-- 	UPDATE CMS_FAC_RELATIONSHIP
-- 	SET CMS_REF_ID = ID
-- 	WHERE EXISTS (SELECT 1 FROM MIG_CA003_4_REL
-- 		WHERE CMS_ACT_FAC_RELATIONSHIP_ID = ID
-- 		AND IS_VALID = 'Y');

-- 	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_4_REL', 'SIBS', 4);
-- 	commit;

		
	COMMIT;
	-------------------------------------
	-- Stage Table
	-- CMS_FAC_RELATIONSHIP
	-------------------------------------
	INSERT INTO CMS_STG_FAC_RELATIONSHIP (ID, CMS_FAC_MASTER_ID, CMS_REF_ID, CIF_NUMBER, CMS_LE_MAIN_PROFILE_ID, ACCT_RELATIONSHIP_CODE_NUM, ACCT_RELATIONSHIP_CODE_VALUE, 
		GUARANTEE_AMOUNT, GUARANTEE_PERCENTAGE, SHARE_HOLDER_PERCENTAGE, HOST_ADD_SEQ_NUM, RECEIVE_MAIL_CODE,
		HOLD_MAIN_CODE_NUM, HOLD_MAIN_CODE_VALUE, NAME_ASSOC_WITH_FAC_ORDER, NAME_CONJUNCTION_POSITION, NAME_CONJUNCTION, 
		PROFIT_RATIO, DIVIDEND_RATIO, CUSTOMER_NAME, STATUS, CURRENCY_CODE) 
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_RELATIONSHIP_SEQ), 2)) AS BIGINT), 
		c.ID, a.CMS_ACT_FAC_RELATIONSHIP_ID, STRIP(CIF_NUMBER, LEADING, '0'), CMS_LE_MAIN_PROFILE_ID, ACCT_RELATIONSHIP_CODE_NUM, ACCT_RELATIONSHIP_CODE_VALUE, 
		GUARANTEE_AMOUNT, GUARANTEE_PERCENTAGE, SHARE_HOLDER_PERCENTAGE, HOST_ADD_SEQ_NUM, RECEIVE_MAIL_CODE,
		HOLD_MAIN_CODE_NUM, HOLD_MAIN_CODE_VALUE, NAME_ASSOC_WITH_FAC_ORDER, NAME_CONJUNCTION_POSITION, NAME_CONJUNCTION_CODE,
		PROFIT_RATIO, DIVIDEND_RATIO, CUSTOMER_NAME, 'I', a.CURRENCY_CODE
	FROM MIG_CA003_4_REL a, CMS_STG_FACILITY_MASTER c
	WHERE a.CMS_ACT_LIMIT_ID = c.CMS_LSP_APPR_LMTS_ID 
	AND a.IS_VALID = 'Y');	

	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_4_REL', 'SIBS', 0);
    
END@


CREATE PROCEDURE MIG_RUN_CA003_5_INS
	LANGUAGE SQL
BEGIN
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_5_INS', 'SIBS', 1);
	commit;
    
	-------------------------------------
	-- update mig_set_1 flag
	-------------------------------------
  	UPDATE MIG_CA003_5_INS A SET MIG_SET_1 = 'Y'
  	WHERE (COVERAGE_TYPE_CODE_VALUE is not null OR INSR_COMPANY_CODE_VALUE is not null 
            OR POLICY_NUMBER is not null OR POLICY_NUMBER_CV_NOTE is not null 
            OR INSURED_AMOUNT is not null OR INSURANCE_PREMIUM is not null 
            OR ISSUED_DATE is not null OR EXPIRY_DATE is not null 
            OR EFFECTIVE_DATE is not null OR ARRANGEMENT_IND is not null OR REMARKS is not null)
	AND A.IS_VALID = 'Y';	

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_5_INS', 'SIBS', 2);
	commit;
    
	-------------------------------------
	-- update mig_set_2 flag
	-------------------------------------
  	UPDATE MIG_CA003_5_INS A SET MIG_SET_2 = 'Y'
  	WHERE (COVERAGE_TYPE_CODE_VALUE_1 is not null OR INSR_COMPANY_CODE_VALUE_1 is not null 
            OR POLICY_NUMBER_1 is not null OR POLICY_NUMBER_CV_NOTE_1 is not null 
            OR INSURED_AMOUNT_1 is not null OR INSURANCE_PREMIUM_1 is not null 
            OR ISSUED_DATE_1 is not null OR EXPIRY_DATE_1 is not null 
            OR EFFECTIVE_DATE_1 is not null OR ARRANGEMENT_IND_1 is not null OR REMARKS_1 is not null)
	AND A.IS_VALID = 'Y';	

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_5_INS', 'SIBS', 3);
	commit;
    
	-------------------------------------
	-- Actual Table
	-- CMS_FAC_BBA_VARI_PACKAGE
	-------------------------------------
    INSERT INTO CMS_FAC_INSURANCE(ID, CMS_REF_ID, CMS_FAC_MASTER_ID, CURRENCY_CODE, 
        ARRANGEMENT_IND, COVERAGE_TYPE_CODE_NUM, COVERAGE_TYPE_CODE_VALUE, EFFECTIVE_DATE, EXPIRY_DATE, 
        INSR_COMPANY_CODE_NUM, INSR_COMPANY_CODE_VALUE, INSURANCE_PREMIUM, INSURED_AMOUNT, ISSUED_DATE, 
        POLICY_NUMBER, POLICY_NUMBER_CV_NOTE, REMARKS)  
    (SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_INSR_SEQ), 2)) as BIGINT),
        CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_INSR_SEQ), 2)) as BIGINT),
        c.ID, c.CURRENCY_CODE, ARRANGEMENT_IND, COVERAGE_TYPE_CODE_NUM, COVERAGE_TYPE_CODE_VALUE, EFFECTIVE_DATE, EXPIRY_DATE, 
        INSR_COMPANY_CODE_NUM, INSR_COMPANY_CODE_VALUE, INSURANCE_PREMIUM, INSURED_AMOUNT, ISSUED_DATE, 
        POLICY_NUMBER, POLICY_NUMBER_CV_NOTE, REMARKS
    FROM MIG_CA003_5_INS a, sci_lsp_appr_lmts b, cms_facility_master c
    WHERE a.LMT_ID = b.LMT_ID
    AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
    AND a.IS_VALID = 'Y'
    AND a.MIG_SET_1 = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_5_INS', 'SIBS', 4);
	commit;

	-------------------------------------
	-- Update cms_ref_id back to mig table
	-- CMS_REF_ID_1
	-------------------------------------
  	UPDATE MIG_CA003_5_INS a 
    set CMS_REF_ID_1 = (select act.cms_ref_id from cms_fac_insurance act, sci_lsp_appr_lmts b, cms_facility_master c
                        WHERE a.LMT_ID = b.LMT_ID
                        AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID
                        AND c.ID = act.CMS_FAC_MASTER_ID)
  	where a.IS_VALID = 'Y'
    AND a.MIG_SET_1 = 'Y';
    -- AND EXISTS (select 1 from cms_fac_insurance act1, sci_lsp_appr_lmts b1, cms_facility_master c1
                        -- WHERE a.LMT_ID = b1.LMT_ID
                        -- AND b1.CMS_LSP_APPR_LMTS_ID = c1.CMS_LSP_APPR_LMTS_ID
                        -- AND c1.ID = act1.CMS_FAC_MASTER_ID);	

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_5_INS', 'SIBS', 5);
	commit;
    
	-------------------------------------
	-- Stage Table
	-- CMS_STG_FAC_BBA_VARI_PACKAGE
	-------------------------------------
    INSERT INTO CMS_STG_FAC_INSURANCE(ID, CMS_REF_ID, CMS_FAC_MASTER_ID, CURRENCY_CODE, 
        ARRANGEMENT_IND, COVERAGE_TYPE_CODE_NUM, COVERAGE_TYPE_CODE_VALUE, EFFECTIVE_DATE, EXPIRY_DATE, 
        INSR_COMPANY_CODE_NUM, INSR_COMPANY_CODE_VALUE, INSURANCE_PREMIUM, INSURED_AMOUNT, ISSUED_DATE, 
        POLICY_NUMBER, POLICY_NUMBER_CV_NOTE, REMARKS)  
    (SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_INSR_SEQ), 2)) as BIGINT),
        a.CMS_REF_ID_1, c.ID, c.CURRENCY_CODE, ARRANGEMENT_IND, COVERAGE_TYPE_CODE_NUM, COVERAGE_TYPE_CODE_VALUE, 
        EFFECTIVE_DATE, EXPIRY_DATE, INSR_COMPANY_CODE_NUM, INSR_COMPANY_CODE_VALUE, INSURANCE_PREMIUM, INSURED_AMOUNT, 
        ISSUED_DATE, POLICY_NUMBER, POLICY_NUMBER_CV_NOTE, REMARKS
    FROM MIG_CA003_5_INS a, SCI_LSP_APPR_LMTS b, cms_stg_facility_master c
    WHERE a.LMT_ID = b.LMT_ID
    AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
    AND a.IS_VALID = 'Y'
    AND a.MIG_SET_1 = 'Y');

    CALL "LOG_PROC_TIME"('MIG_RUN_CA003_5_INS', 'SIBS', 6);
	commit;

	-------------------------------------
	-- Actual Table
	-- CMS_FAC_BBA_VARI_PACKAGE
	-------------------------------------
    INSERT INTO CMS_FAC_INSURANCE(ID, CMS_REF_ID, CMS_FAC_MASTER_ID, CURRENCY_CODE, 
        ARRANGEMENT_IND, COVERAGE_TYPE_CODE_NUM, COVERAGE_TYPE_CODE_VALUE, EFFECTIVE_DATE, EXPIRY_DATE, 
        INSR_COMPANY_CODE_NUM, INSR_COMPANY_CODE_VALUE, INSURANCE_PREMIUM, INSURED_AMOUNT, ISSUED_DATE, 
        POLICY_NUMBER, POLICY_NUMBER_CV_NOTE, REMARKS)  
    (SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_INSR_SEQ), 2)) as BIGINT),
        CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_INSR_SEQ), 2)) as BIGINT),
        c.ID, c.CURRENCY_CODE, ARRANGEMENT_IND, COVERAGE_TYPE_CODE_NUM, COVERAGE_TYPE_CODE_VALUE, EFFECTIVE_DATE, EXPIRY_DATE, 
        INSR_COMPANY_CODE_NUM, INSR_COMPANY_CODE_VALUE, INSURANCE_PREMIUM, INSURED_AMOUNT, ISSUED_DATE, 
        POLICY_NUMBER, POLICY_NUMBER_CV_NOTE, REMARKS
    FROM MIG_CA003_5_INS a, sci_lsp_appr_lmts b, cms_facility_master c
    WHERE a.LMT_ID = b.LMT_ID
    AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
    AND a.IS_VALID = 'Y'
    AND a.MIG_SET_2 = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_5_INS', 'SIBS', 7);
	commit;

	-------------------------------------
	-- Update cms_ref_id back to mig table
	-- CMS_REF_ID_1
	-------------------------------------
  	UPDATE MIG_CA003_5_INS a 
    set CMS_REF_ID_2 = (select act.cms_ref_id from cms_fac_insurance act, sci_lsp_appr_lmts b, cms_facility_master c
                        WHERE a.LMT_ID = b.LMT_ID
                        AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID
                        AND c.ID = act.CMS_FAC_MASTER_ID
                        AND not exists (select 1 from cms_fac_insurance act1 where a.cms_ref_id_1 = act1.cms_ref_id))
  	where a.IS_VALID = 'Y'
    AND a.MIG_SET_2 = 'Y';
    -- AND EXISTS (select 1 from cms_fac_insurance act2, sci_lsp_appr_lmts b1, cms_facility_master c1
                        -- WHERE a.LMT_ID = b1.LMT_ID
                        -- AND b1.CMS_LSP_APPR_LMTS_ID = c1.CMS_LSP_APPR_LMTS_ID
                        -- AND c1.ID = act2.CMS_FAC_MASTER_ID
                        -- AND not exists (select 1 from cms_fac_insurance act3 where a.cms_ref_id_1 = act3.cms_ref_id));	

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_5_INS', 'SIBS', 8);
	commit;
    
	-------------------------------------
	-- Stage Table
	-- CMS_STG_FAC_BBA_VARI_PACKAGE
	-------------------------------------
    INSERT INTO CMS_STG_FAC_INSURANCE(ID, CMS_REF_ID, CMS_FAC_MASTER_ID, CURRENCY_CODE, 
        ARRANGEMENT_IND, COVERAGE_TYPE_CODE_NUM, COVERAGE_TYPE_CODE_VALUE, EFFECTIVE_DATE, EXPIRY_DATE, 
        INSR_COMPANY_CODE_NUM, INSR_COMPANY_CODE_VALUE, INSURANCE_PREMIUM, INSURED_AMOUNT, ISSUED_DATE, 
        POLICY_NUMBER, POLICY_NUMBER_CV_NOTE, REMARKS)  
    (SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_INSR_SEQ), 2)) as BIGINT),
        a.CMS_REF_ID_2, c.ID, c.CURRENCY_CODE, ARRANGEMENT_IND, COVERAGE_TYPE_CODE_NUM, COVERAGE_TYPE_CODE_VALUE, 
        EFFECTIVE_DATE, EXPIRY_DATE, INSR_COMPANY_CODE_NUM, INSR_COMPANY_CODE_VALUE, INSURANCE_PREMIUM, INSURED_AMOUNT, 
        ISSUED_DATE, POLICY_NUMBER, POLICY_NUMBER_CV_NOTE, REMARKS
    FROM MIG_CA003_5_INS a, SCI_LSP_APPR_LMTS b, cms_stg_facility_master c
    WHERE a.LMT_ID = b.LMT_ID
    AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
    AND a.IS_VALID = 'Y'
    AND a.MIG_SET_2 = 'Y');    
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_5_INS', 'SIBS', 0);

    
END@

CREATE PROCEDURE MIG_RUN_CA003_6_MUL
	LANGUAGE SQL
BEGIN
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_6_MUL', 'SIBS', 1);
	commit;
    
	CALL RUNSTATS_HELPER('MIG_CA003_6_MUL', 'IS_VALID, CMS_ACT_FAC_MASTER_ID, TIER_SEQ_NO, LMT_ID');
	-------------------------------------
	-- Actual Table
	-- CMS_FAC_MULTI_TIER_FINANCING
	-------------------------------------
    INSERT INTO CMS_FAC_MULTI_TIER_FINANCING(ID, CMS_REF_ID, CMS_FAC_MASTER_ID, TIER_SEQ_NO, TIER_TERM, TIER_TERM_CODE, RATE) 
    (SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_MULTI_TIER_SEQ), 2)) as BIGINT),
        CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_MULTI_TIER_SEQ), 2)) as BIGINT),
        CMS_ACT_FAC_MASTER_ID, TIER_SEQ_NO, TIER_TERM, TIER_TERM_CODE, RATE
    FROM MIG_CA003_6_MUL a
    WHERE a.IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_6_MUL', 'SIBS', 2);
	commit;
	
	CALL RUNSTATS_HELPER('CMS_FAC_MULTI_TIER_FINANCING', '(CMS_FAC_MASTER_ID,TIER_SEQ_NO)');
    
	UPDATE MIG_CA003_6_MUL mul
	SET CMS_REF_ID = (SELECT CMS_REF_ID FROM CMS_FAC_MULTI_TIER_FINANCING mtf
		WHERE mtf.CMS_FAC_MASTER_ID = mul.CMS_ACT_FAC_MASTER_ID
		AND mtf.TIER_SEQ_NO = mul.TIER_SEQ_NO)
	WHERE EXISTS (SELECT 1 FROM CMS_FAC_MULTI_TIER_FINANCING mtf1
		WHERE mtf1.CMS_FAC_MASTER_ID = mul.CMS_ACT_FAC_MASTER_ID
		AND mtf1.TIER_SEQ_NO = mul.TIER_SEQ_NO)
	AND IS_VALID = 'Y';

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_6_MUL', 'SIBS', 3);
	commit;

	-------------------------------------
	-- Stage Table
	-- CMS_STG_FAC_BBA_VARI_PACKAGE
	-------------------------------------
    INSERT INTO CMS_STG_FAC_MULTI_TIER_FINANCING(ID, CMS_REF_ID, CMS_FAC_MASTER_ID, TIER_SEQ_NO, TIER_TERM, TIER_TERM_CODE, RATE) 
    (SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_MULTI_TIER_SEQ), 2)) as BIGINT),        
        a.CMS_REF_ID, c.ID, a.TIER_SEQ_NO, a.TIER_TERM, a.TIER_TERM_CODE, a.RATE
    FROM MIG_CA003_6_MUL a, SCI_LSP_APPR_LMTS b, CMS_STG_FACILITY_MASTER c
    WHERE a.LMT_ID = b.LMT_ID
    AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
    AND a.IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_6_MUL', 'SIBS', 0);

    
END@


CREATE PROCEDURE MIG_RUN_CA003_7_ISL
	LANGUAGE SQL
BEGIN
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_7_ISL', 'SIBS', 1);
	commit;

	-------------------------------------
	-- Actual Table
	-- cms_fac_islamic_master
	-------------------------------------
   INSERT INTO CMS_FAC_ISLAMIC_MASTER(CMS_FAC_MASTER_ID, GPP_TERM, GPP_TERM_CODE, GPP_PAYMENT_MODE_NUM, GPP_PAYMENT_MODE_VALUE, 
        SELLING_PRICE, TOTAL_GPP_AMT, SECURITY_DEP_OF_MTH, SECURITY_DEP_PERCENTAGE, SECURITY_DEP_AMT, 
        CUSOTMER_INTEREST_RATE, GPP_CALCULATION_METHOD_NUM, GPP_CALCULATION_MEHTOD_VALUE, FULREL_PROFIC_CALC_METHOD, 
        COMPOUNDING_METHOD, DATE_STOP_COMPOUNDING, REFUND_GPP_PROFIT_NUM, REFUND_GPP_PROFIT_VALUE, 
        REFUND_FULREL_PROFIT_NUM, REFUND_FULREL_PROFIT_VALUE, COMMISSION_RATE, FIXED_COM_AMOUNT, 
        COMMISSION_TERM, COMMISSION_EXPIRY_DATE, EXC_CMP_IN_PMT_AMT, SPTF_DUAL_REPAYMENT_MODE_NUM, 
        SPTF_DUAL_REPAYMENT_MODE_VALUE, SNP_AGREEMENT_DATE, GPP_DURATION_FOR_SNP, SNP_TERM, 
        SNP_TERM_CODE_VALUE, FULL_REL_PFT_12_METHOD, CURRENCY_CODE, SPTF_GRACE_EXP_DATE, FIXED_AMT_REFUND)    
    (SELECT c.ID, GPP_TERM, GPP_TERM_CODE, GPP_PAYMENT_MODE_NUM, GPP_PAYMENT_MODE_VALUE, 
        SELLING_PRICE, TOTAL_GPP_AMT, SECURITY_DEP_OF_MTH, SECURITY_DEP_PERCENTAGE, SECURITY_DEP_AMT, 
        CUSTOMER_INTEREST_RATE, GPP_CALCULATION_METHOD_NUM, GPP_CALCULATION_MEHTOD_VALUE, FULREL_PROFIC_CALC_METHOD, 
        COMPOUNDING_METHOD, DATE_STOP_COMPOUNDING, REFUND_GPP_PROFIT_NUM, REFUND_GPP_PROFIT_VALUE, 
        REFUND_FULREL_PROFIT_NUM, REFUND_FULREL_PROFIT_VALUE, COMMISSION_RATE, FIXED_COM_AMOUNT, 
        COMMISSION_TERM, COMMISSION_EXPIRY_DATE, EXC_CMP_IN_PMT_AMT, SPTF_DUAL_REPAYMENT_MODE_NUM, 
        SPTF_DUAL_REPAYMENT_MODE_VALUE, SNP_AGREEMENT_DATE, GPP_DURATION_FOR_SNP, SNP_TERM, 
        SNP_TERM_CODE_VALUE, FULL_REL_PFT_12_METHOD, c.CURRENCY_CODE, SPTF_GRACE_EXP_DATE, FIXED_AMT_REFUND 
    FROM MIG_CA003_7_ISL a, sci_lsp_appr_lmts b, cms_facility_master c
    WHERE a.LMT_ID = b.LMT_ID
    AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
    AND a.IS_VALID = 'Y');
    
    commit;
    
    update cms_fac_islamic_master set gpp_duration_for_snp = null where gpp_duration_for_snp = '';

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_7_ISL', 'SIBS', 2);
	commit;
    
	-------------------------------------
	-- Stage Table
	-- CMS_STG_FAC_ISLAMIC_MASTER
	-------------------------------------
   INSERT INTO CMS_STG_FAC_ISLAMIC_MASTER(CMS_FAC_MASTER_ID, GPP_TERM, GPP_TERM_CODE, GPP_PAYMENT_MODE_NUM, GPP_PAYMENT_MODE_VALUE, 
        SELLING_PRICE, TOTAL_GPP_AMT, SECURITY_DEP_OF_MTH, SECURITY_DEP_PERCENTAGE, SECURITY_DEP_AMT, 
        CUSOTMER_INTEREST_RATE, GPP_CALCULATION_METHOD_NUM, GPP_CALCULATION_MEHTOD_VALUE, FULREL_PROFIC_CALC_METHOD, 
        COMPOUNDING_METHOD, DATE_STOP_COMPOUNDING, REFUND_GPP_PROFIT_NUM, REFUND_GPP_PROFIT_VALUE, 
        REFUND_FULREL_PROFIT_NUM, REFUND_FULREL_PROFIT_VALUE, COMMISSION_RATE, FIXED_COM_AMOUNT, 
        COMMISSION_TERM, COMMISSION_EXPIRY_DATE, EXC_CMP_IN_PMT_AMT, SPTF_DUAL_REPAYMENT_MODE_NUM, 
        SPTF_DUAL_REPAYMENT_MODE_VALUE, SNP_AGREEMENT_DATE, GPP_DURATION_FOR_SNP, SNP_TERM, 
        SNP_TERM_CODE_VALUE, FULL_REL_PFT_12_METHOD, CURRENCY_CODE, SPTF_GRACE_EXP_DATE, FIXED_AMT_REFUND)    
    (SELECT c.ID, GPP_TERM, GPP_TERM_CODE, GPP_PAYMENT_MODE_NUM, GPP_PAYMENT_MODE_VALUE, 
        SELLING_PRICE, TOTAL_GPP_AMT, SECURITY_DEP_OF_MTH, SECURITY_DEP_PERCENTAGE, SECURITY_DEP_AMT, 
        CUSTOMER_INTEREST_RATE, GPP_CALCULATION_METHOD_NUM, GPP_CALCULATION_MEHTOD_VALUE, FULREL_PROFIC_CALC_METHOD, 
        COMPOUNDING_METHOD, DATE_STOP_COMPOUNDING, REFUND_GPP_PROFIT_NUM, REFUND_GPP_PROFIT_VALUE, 
        REFUND_FULREL_PROFIT_NUM, REFUND_FULREL_PROFIT_VALUE, COMMISSION_RATE, FIXED_COM_AMOUNT, 
        COMMISSION_TERM, COMMISSION_EXPIRY_DATE, EXC_CMP_IN_PMT_AMT, SPTF_DUAL_REPAYMENT_MODE_NUM, 
        SPTF_DUAL_REPAYMENT_MODE_VALUE, SNP_AGREEMENT_DATE, GPP_DURATION_FOR_SNP, SNP_TERM, 
        SNP_TERM_CODE_VALUE, FULL_REL_PFT_12_METHOD, c.CURRENCY_CODE, SPTF_GRACE_EXP_DATE, FIXED_AMT_REFUND 
    FROM MIG_CA003_7_ISL a, sci_lsp_appr_lmts b, cms_facility_master c
    WHERE a.LMT_ID = b.LMT_ID
    AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
    AND a.IS_VALID = 'Y');

    commit;
    
    update cms_stg_fac_islamic_master set gpp_duration_for_snp = null where gpp_duration_for_snp = '';

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_7_ISL', 'SIBS', 0);

    
END@

CREATE PROCEDURE MIG_RUN_CA003_8_BBA
	LANGUAGE SQL
BEGIN
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_8_BBA', 'SIBS', 1);
	commit;

	-------------------------------------
	-- Actual Table
	-- CMS_FAC_BBA_VARI_PACKAGE
	-------------------------------------
    INSERT INTO CMS_FAC_BBA_VARI_PACKAGE (CMS_FAC_MASTER_ID, CUST_PROF_RATE, REBATE_METHOD, GPP_PAYMENT_MODE, GPP_CAL_METHOD, 
        GPP_TERM, GPP_TERM_CODE, FULL_RELEASE_PROFIT, REFUND_FULL_RELEASE_PROFIT, FUL_REL_PROFIT_CAL_METHOD, INSTALLMENT, 
        FINAL_PAYMENT_AMT, TOTAL_GPP_AMT, SELLING_PRICE, TOTAL_PROFIT, LAST_MAINTAIN_DATE, CURRENCY_CODE) 
    (SELECT c.ID, CUST_PROF_RATE, REBATE_METHOD, GPP_PAYMENT_MODE, GPP_CAL_METHOD, 
        GPP_TERM, GPP_TERM_CODE, FULL_RELEASE_PROFIT, REFUND_FULL_RELEASE_PROFIT, FUL_REL_PROFIT_CAL_METHOD, INSTALLMENT, 
        FINAL_PAYMENT_AMT, TOTAL_GPP_AMT, SELLING_PRICE, TOTAL_PROFIT, LAST_MAINTAIN_DATE, c.CURRENCY_CODE
    FROM MIG_CA003_8_BBA a, sci_lsp_appr_lmts b, cms_facility_master c
    WHERE a.LMT_ID = b.LMT_ID
    AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
    AND a.IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_8_BBA', 'SIBS', 2);
	commit;
    
	-------------------------------------
	-- Stage Table
	-- CMS_STG_FAC_BBA_VARI_PACKAGE
	-------------------------------------
    INSERT INTO CMS_STG_FAC_BBA_VARI_PACKAGE (CMS_FAC_MASTER_ID, CUST_PROF_RATE, REBATE_METHOD, GPP_PAYMENT_MODE, GPP_CAL_METHOD, 
        GPP_TERM, GPP_TERM_CODE, FULL_RELEASE_PROFIT, REFUND_FULL_RELEASE_PROFIT, FUL_REL_PROFIT_CAL_METHOD, INSTALLMENT, 
        FINAL_PAYMENT_AMT, TOTAL_GPP_AMT, SELLING_PRICE, TOTAL_PROFIT, LAST_MAINTAIN_DATE, CURRENCY_CODE) 
    (SELECT c.ID, CUST_PROF_RATE, REBATE_METHOD, GPP_PAYMENT_MODE, GPP_CAL_METHOD, 
        GPP_TERM, GPP_TERM_CODE, FULL_RELEASE_PROFIT, REFUND_FULL_RELEASE_PROFIT, FUL_REL_PROFIT_CAL_METHOD, INSTALLMENT, 
        FINAL_PAYMENT_AMT, TOTAL_GPP_AMT, SELLING_PRICE, TOTAL_PROFIT, LAST_MAINTAIN_DATE, c.CURRENCY_CODE
    FROM MIG_CA003_8_BBA a, SCI_LSP_APPR_LMTS b, CMS_STG_FACILITY_MASTER c
    WHERE a.LMT_ID = b.LMT_ID
    AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
    AND a.IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CA003_8_BBA', 'SIBS', 0);

    
END@



CREATE PROCEDURE MIG_RUN_CA004
	LANGUAGE SQL
BEGIN
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA004', 'SIBS', 1);
	commit;
	-------------------------------------
	-- Actual Table
	-- SCI_LSP_JOINT_BORROWER
	-------------------------------------
	--CALL SYSPROC.ADMIN_CMD('reorg table SCI_LSP_SYS_XREF');
	
	CALL RUNSTATS_HELPER('SCI_LSP_SYS_XREF', 'LSX_EXT_SYS_ACCT_NUM, LSX_EXT_SYS_ACCT_SEQ, LSX_EXT_SYS_CODE_VALUE');
	CALL RUNSTATS_HELPER('MIG_CA004', 'IS_VALID, LIMIT_ID, EXTERNAL_SYSTEM_ACCT_NO, ACCT_SEQ, AA_NUMBER, FACILITY_CODE, FACILITY_SEQ');
	CALL RUNSTATS_HELPER('SCI_LSP_APPR_LMTS', '(LMT_BCA_REF_NUM, LMT_FAC_CODE, LMT_FAC_SEQ), LMT_ID, SOURCE_ID');
	
	create index temp_index_1 on sci_lsp_sys_xref
		(lsx_ext_sys_code_value, lsx_ext_sys_acct_num, lsx_ext_sys_acct_seq)
		allow reverse scans
		collect statistics;
		
	commit;
	
	update mig_ca004
	set cms_act_acct_id = (select cms_lsp_sys_xref_id
		from sci_lsp_sys_xref
		where LSX_EXT_SYS_ACCT_NUM = EXTERNAL_SYSTEM_ACCT_NO 
		and LSX_EXT_SYS_ACCT_SEQ = ACCT_SEQ
		and lsx_ext_sys_code_value = 'SIBS')
	where is_valid = 'Y';
	commit;
	
	
	INSERT INTO SCI_LSP_SYS_XREF(CMS_LSP_SYS_XREF_ID, LSX_EXT_SYS_CODE_VALUE, LSX_EXT_SYS_ACCT_NUM, 
		LSX_BKG_LOCTN_CTRY, LSX_BKG_LOCTN_ORG, LSX_EXT_SYS_ACCT_TYPE, LSX_EXT_SYS_ACCT_SEQ, LSX_LSP_ID,
		ACCT_DELQ_IND, UPDATE_STATUS_IND, ACCT_STATUS, LSX_EXT_SYS_CODE_NUM, LSX_EXT_CTY_CODE_VALUE)
	(select CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CUSTOMER_X_REF_SEQ), 2)) as BIGINT),
	'SIBS', t.EXTERNAL_SYSTEM_ACCT_NO, LOC_COUNTRY, LOC_ORG_CODE, ACCT_TYPE, ACCT_SEQ, 1, 'N', 'I', 'A', '37', LOC_COUNTRY
	from (select row_number() over(partition by EXTERNAL_SYSTEM_ACCT_NO, ACCT_SEQ) rownum ,
			EXTERNAL_SYSTEM_ACCT_NO, LOC_COUNTRY, LOC_ORG_CODE, ACCT_TYPE, ACCT_SEQ
		from mig_ca004 
		where is_valid = 'Y'
		and cms_act_acct_id is null) t
	where rownum = 1);
	
		
-- 	INSERT INTO SCI_LSP_SYS_XREF(CMS_LSP_SYS_XREF_ID, LSX_EXT_SYS_CODE_VALUE, LSX_EXT_SYS_ACCT_NUM, LSX_LE_ID, CMS_LE_SUB_PROFILE_ID,
-- 		LSX_BCA_REF_NUM, LSX_BKG_LOCTN_CTRY, LSX_BKG_LOCTN_ORG, LSX_EXT_SYS_ACCT_TYPE, LSX_EXT_SYS_ACCT_SEQ, LSX_LSP_ID,
-- 		ACCT_DELQ_IND, UPDATE_STATUS_IND, ACCT_STATUS, LSX_EXT_SYS_CODE_NUM, LSX_EXT_CTY_CODE_VALUE)
-- 	(select CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CUSTOMER_X_REF_SEQ), 2)) as BIGINT),
-- 	'SIBS', t.EXTERNAL_SYSTEM_ACCT_NO, llp.LLP_LE_ID, llp.CMS_CUSTOMER_ID,
-- 	t.AA_NUMBER, LOC_COUNTRY, LOC_ORG_CODE, ACCT_TYPE, ACCT_SEQ, 1, 'N', 'I', 'A', '37', LOC_COUNTRY
-- 	FROM MIG_CA004 t, SCI_LSP_LMT_PROFILE llp, SCI_LSP_APPR_LMTS lmts 
-- 	WHERE t.is_valid = 'Y'
-- 	AND llp.CMS_LSP_LMT_PROFILE_ID = lmts.CMS_LIMIT_PROFILE_ID 
-- 	--AND llp.source_id = 'RLOS'
-- 	AND lmts.LMT_ID = t.LIMIT_ID
-- 	AND lmts.source_id = 'RLOS'
-- 	AND NOT EXISTS (SELECT '1' 
-- 			FROM SCI_LSP_SYS_XREF 
-- 			WHERE LSX_EXT_SYS_ACCT_NUM = t.EXTERNAL_SYSTEM_ACCT_NO 
-- 			and LSX_EXT_SYS_ACCT_SEQ = t.ACCT_SEQ
-- 			and LSX_EXT_SYS_CODE_VALUE='SIBS' fetch first 1 row only));
				
	CALL "LOG_PROC_TIME"('MIG_RUN_CA004', 'SIBS', 2);
	commit;

	CALL RUNSTATS_HELPER('CMS_STAGE_LSP_SYS_XREF', 'LSX_EXT_SYS_ACCT_NUM, LSX_EXT_SYS_ACCT_SEQ, LSX_EXT_SYS_CODE_VALUE');
	
	update mig_ca004
	set cms_stg_acct_id = (select cms_lsp_sys_xref_id
		from CMS_STAGE_LSP_SYS_XREF
		where LSX_EXT_SYS_ACCT_NUM = EXTERNAL_SYSTEM_ACCT_NO 
		and LSX_EXT_SYS_ACCT_SEQ = ACCT_SEQ
		and lsx_ext_sys_code_value = 'SIBS')
	where is_valid = 'Y';
	commit;	 
	
	INSERT INTO CMS_STAGE_LSP_SYS_XREF(CMS_LSP_SYS_XREF_ID, LSX_EXT_SYS_CODE_VALUE, LSX_EXT_SYS_ACCT_NUM, 
		LSX_BKG_LOCTN_CTRY, LSX_BKG_LOCTN_ORG, LSX_EXT_SYS_ACCT_TYPE, LSX_EXT_SYS_ACCT_SEQ, LSX_LSP_ID,
		ACCT_DELQ_IND, UPDATE_STATUS_IND, ACCT_STATUS, LSX_EXT_SYS_CODE_NUM, LSX_EXT_CTY_CODE_VALUE)
	(select CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CUSTOMER_X_REF_SEQ), 2)) as BIGINT),
	'SIBS', t.EXTERNAL_SYSTEM_ACCT_NO, LOC_COUNTRY, LOC_ORG_CODE, ACCT_TYPE, ACCT_SEQ, 1, 'N', 'I', 'A', '37', LOC_COUNTRY
	from (select row_number() over(partition by EXTERNAL_SYSTEM_ACCT_NO, ACCT_SEQ) rownum ,
			EXTERNAL_SYSTEM_ACCT_NO, LOC_COUNTRY, LOC_ORG_CODE, ACCT_TYPE, ACCT_SEQ
		from mig_ca004 
		where is_valid = 'Y'
		and cms_stg_acct_id is null) t
	where rownum = 1);	
	
-- 	INSERT INTO CMS_STAGE_LSP_SYS_XREF(CMS_LSP_SYS_XREF_ID, LSX_EXT_SYS_CODE_VALUE, LSX_EXT_SYS_ACCT_NUM, LSX_LE_ID,
-- 		CMS_LE_SUB_PROFILE_ID, LSX_BCA_REF_NUM, LSX_BKG_LOCTN_CTRY, LSX_BKG_LOCTN_ORG, LSX_EXT_SYS_ACCT_TYPE,
-- 		LSX_EXT_SYS_ACCT_SEQ, LSX_LSP_ID, ACCT_DELQ_IND, UPDATE_STATUS_IND, ACCT_STATUS, LSX_EXT_SYS_CODE_NUM, LSX_EXT_CTY_CODE_VALUE)
-- 	(select CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CUSTOMER_X_REF_SEQ), 2)) as BIGINT),
-- 	'SIBS', t.EXTERNAL_SYSTEM_ACCT_NO, llp.LLP_LE_ID, llp.CMS_CUSTOMER_ID,
-- 	t.AA_NUMBER, LOC_COUNTRY, LOC_ORG_CODE, ACCT_TYPE, ACCT_SEQ, 1, 'N', 'I', 'A', '37', LOC_COUNTRY
-- 	FROM MIG_CA004 t, SCI_LSP_LMT_PROFILE llp, SCI_LSP_APPR_LMTS lmts 
-- 	WHERE t.IS_VALID = 'Y'
-- 	AND llp.CMS_LSP_LMT_PROFILE_ID = lmts.CMS_LIMIT_PROFILE_ID 
-- 	--AND llp.source_id = 'RLOS'
-- 	AND lmts.LMT_ID = t.LIMIT_ID
-- 	AND lmts.source_id = 'RLOS'
-- 	AND NOT EXISTS (SELECT '1' 
-- 			FROM CMS_STAGE_LSP_SYS_XREF 
-- 			WHERE LSX_EXT_SYS_ACCT_NUM = t.EXTERNAL_SYSTEM_ACCT_NO 
-- 			AND LSX_EXT_SYS_ACCT_SEQ = t.ACCT_SEQ
-- 			AND LSX_EXT_SYS_CODE_VALUE='SIBS' fetch first 1 row only));

	CALL "LOG_PROC_TIME"('MIG_RUN_CA004', 'SIBS', 3);
	commit;

	CALL RUNSTATS_HELPER('SCI_LSP_SYS_XREF', 'LSX_EXT_SYS_ACCT_NUM, LSX_EXT_SYS_ACCT_SEQ, LSX_EXT_SYS_CODE_VALUE');

	update mig_ca004
	set cms_act_acct_id = (select cms_lsp_sys_xref_id
		from sci_lsp_sys_xref
		where LSX_EXT_SYS_ACCT_NUM = EXTERNAL_SYSTEM_ACCT_NO 
		and LSX_EXT_SYS_ACCT_SEQ = ACCT_SEQ
		and lsx_ext_sys_code_value = 'SIBS')
	where is_valid = 'Y'
	and cms_act_acct_id is null;
	commit;
		
	INSERT INTO SCI_LSP_LMTS_XREF_MAP(CMS_LSP_LMTS_XREF_MAP_ID, LXM_LMT_ID, CMS_LSP_APPR_LMTS_ID, CMS_LSP_SYS_XREF_ID,
		LXM_EXT_SYS_ACCT_TYPE, LXM_EXT_SYS_ACCT_SEQ, CMS_STATUS, UPDATE_STATUS_IND)
	(select CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR LIMIT_X_REF_SEQ), 2)) as BIGINT),
	t.limit_id, t.cms_act_limit_id,
	cms_act_acct_id,
	ACCT_TYPE, ACCT_SEQ, 'ACTIVE', 'I'
	FROM MIG_CA004 t
	WHERE NOT EXISTS (SELECT '1' from SCI_LSP_LMTS_XREF_MAP m
		where m.cms_lsp_sys_xref_id = cms_act_acct_id
		and m.cms_lsp_appr_lmts_id = cms_act_limit_id) 
	AND t.IS_VALID = 'Y');

	drop index temp_index_1;
	CALL "LOG_PROC_TIME"('MIG_RUN_CA004', 'SIBS', 4);
	commit;

	CALL RUNSTATS_HELPER('CMS_STAGE_LSP_SYS_XREF', 'LSX_EXT_SYS_ACCT_NUM, LSX_EXT_SYS_ACCT_SEQ, LSX_EXT_SYS_CODE_VALUE');
	CALL RUNSTATS_HELPER('STAGE_LIMIT', 'LMT_ID, SOURCE_ID');
	
	create index temp_index_1 on CMS_STAGE_LSP_SYS_XREF
		(lsx_ext_sys_code_value, lsx_ext_sys_acct_num, lsx_ext_sys_acct_seq)
		allow reverse scans
		collect statistics;
		
	commit;	
	
	update mig_ca004
	set cms_stg_acct_id = (select cms_lsp_sys_xref_id
		from CMS_STAGE_LSP_SYS_XREF
		where LSX_EXT_SYS_ACCT_NUM = EXTERNAL_SYSTEM_ACCT_NO 
		and LSX_EXT_SYS_ACCT_SEQ = ACCT_SEQ
		and lsx_ext_sys_code_value = 'SIBS')
	where is_valid = 'Y'
	and cms_stg_acct_id is null;
	commit;	 
	
	drop index temp_index_1;
		
	UPDATE MIG_CA004 a 
	SET CMS_STG_LIMIT_ID = (select cms_lsp_appr_lmts_id
		from STAGE_LIMIT lmts
		where lmts.lmt_id = a.limit_id
		and source_id = 'RLOS')
	WHERE IS_VALID = 'Y';
	commit;	
		
	INSERT INTO STAGE_LIMIT_XREF(CMS_LSP_LMTS_XREF_MAP_ID, LXM_LMT_ID, CMS_LSP_APPR_LMTS_ID, CMS_LSP_SYS_XREF_ID,
		LXM_EXT_SYS_ACCT_TYPE, LXM_EXT_SYS_ACCT_SEQ, CMS_STATUS, UPDATE_STATUS_IND)
	(select CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR LIMIT_X_REF_SEQ), 2)) as BIGINT),
	t.limit_id, t.cms_stg_limit_id,
	CMS_STG_ACCT_ID,
	ACCT_TYPE, ACCT_SEQ, 'ACTIVE', 'I'
	FROM MIG_CA004 t
	where NOT EXISTS (select '1'
		from STAGE_LIMIT_XREF m
		where m.cms_lsp_sys_xref_id = cms_act_acct_id
		and m.cms_lsp_appr_lmts_id = cms_act_limit_id) 
	AND t.IS_VALID = 'Y');

	
	CALL "LOG_PROC_TIME"('MIG_RUN_CA004', 'SIBS', 0);
	commit;
	

END@

/* ----------------------------------------------- Start of Collateral ---------------------------------------- */
CREATE PROCEDURE MIG_RUN_CO001_AB
	LANGUAGE SQL
BEGIN

	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 1);
	commit;
	
	CALL RUNSTATS_HELPER('MIG_CO001_AB', 'CMS_STG_COL_ID, CMS_ACT_COL_ID, IS_VALID, CMS_SECURITY_SUBTYPE_ID, SOURCE_SECURITY_SUB_TYPE, SOURCE_SEC_CAT');
	--------------------------------------------
	-- Update security type and subtype id first
	-- MIG_CO001_AB
	--------------------------------------------
	UPDATE MIG_CO001_AB a 
	   SET (cms_security_type_id, cms_security_subtype_id) =
	(SELECT substr(REF_ENTRY_CODE, 1, 2), REF_ENTRY_CODE
	   FROM COMMON_CODE_CATEGORY_ENTRY 
       WHERE CATEGORY_CODE = a.SOURCE_SEC_CAT
       AND ENTRY_CODE = a.source_security_sub_type
	and REF_ENTRY_CODE = a.CMS_SECURITY_SUBTYPE_ID)
	WHERE IS_VALID = 'Y';
       
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 2);
	commit;
    
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-------------------------------------
	INSERT INTO cms_security (cms_collateral_id, sci_security_dtl_id, sci_reference_note, security_sub_type_id, 
								sci_security_type_value, sci_security_subtype_value, sci_security_currency, sci_orig_security_currency,
								security_location, security_organisation, custodian_type,  
								is_legal_enforce, is_legal_enforce_date, security_perfection_date, source_security_type, source_security_sub_type, 
                                security_maturity_date, security_custodian, borrower_dependency, exchange_control_obtained,
                                --exchange_control_date,
                                is_cgc_pledged, collateral_status, version_time, status, source_id, is_migrated_ind)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
			security_id, security_ref_note, cms_security_subtype_id, cms_security_type_id, cms_security_subtype_id, currency, currency,
			loc_country, loc_org_code, custodian_type, 			
			legal_enforceability, legal_enforceability_date, 
			security_perfection_date, source_security_type, source_security_sub_type,
            security_maturity_date, security_custodian, borrower_dependency, exchange_control_obtained, 
            --exchange_control_date,
            is_cgc_pledged, collateral_status, 0, 'ACTIVE', 'SIBS', 'Y'
	FROM MIG_CO001_AB t
	WHERE cms_act_col_id IS NULL
	and is_valid = 'Y');
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 3);
	commit;

	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	
	UPDATE cms_security a SET (type_name, subtype_name) =
	(SELECT security_type_name, subtype_name 
	   FROM cms_security_sub_type
	   WHERE security_sub_type_id = a.security_sub_type_id)
	WHERE source_id = 'SIBS'
	AND type_name IS NULL;
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 4);
	commit;

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-------------------------------------
	INSERT INTO cms_stage_security (cms_collateral_id, sci_security_dtl_id, sci_reference_note, security_sub_type_id, 
									sci_security_type_value, SCI_SECURITY_SUBTYPE_VALUE, sci_security_currency, sci_orig_security_currency,
									security_location, SECURITY_ORGANISATION, custodian_type, 
									is_legal_enforce, is_legal_enforce_date, security_perfection_date, source_security_type, source_security_sub_type, 
                                    security_maturity_date, security_custodian, borrower_dependency, exchange_control_obtained, 
                                    --exchange_control_date,
                                    is_cgc_pledged, collateral_status, version_time, status, source_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
			security_id, security_ref_note, cms_security_subtype_id, cms_security_type_id, cms_security_subtype_id, currency, currency,
			loc_country, loc_org_code, custodian_type, 
			legal_enforceability, legal_enforceability_date, 
			security_perfection_date, source_security_type, source_security_sub_type, 
            security_maturity_date, security_custodian, borrower_dependency, exchange_control_obtained, 
            --exchange_control_date,
            is_cgc_pledged, collateral_status, 0, 'ACTIVE', 'SIBS'
	   FROM MIG_CO001_AB t
	  WHERE cms_stg_col_id IS NULL
	    AND is_valid = 'Y');
			
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 5);
	commit;
    
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------	
	UPDATE cms_stage_security a SET (type_name, subtype_name) =
	(SELECT security_type_name, subtype_name 
	   FROM cms_security_sub_type
	  WHERE security_sub_type_id = a.security_sub_type_id)
	 WHERE source_id = 'SIBS'
	   AND TYPE_NAME IS NULL;
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 6);
	commit;
    
	-------------------------------------
	-- Actual Table
	-- CMS_ASSET
	-------------------------------------
	INSERT INTO cms_asset  (cms_collateral_id, asset_description, type_of_asset, purchase_price, purchase_date, reg_date, 
                            manufacture_year, model_no, 
                            --derived, refering ABCMS-235 --doc_perfect_age, 
                            sales_proceed, reg_no, reg_fee, brand, good_status, 
                            repossession_date, repossession_age, 
                            public_transport, phy_inspection_done, env_risky_status, env_risky_date, scrap_value,
                            chattel_sold_date, rl_serial_no)
	(SELECT cms_collateral_id, asset_desc, asset_type_code, purchase_price, purchase_date, reg_date,
			manufacture_year, model_no,  
			--document_perfection_age,
			sales_proceed, reg_no, reg_fee, brand, good_stat, 
            DATE(reposession_date), reposession_age, 
            public_transport, phy_inspection_done, env_risky_status, env_risky_date, scrap_value,
            chattel_sold_date, rl_serial_no
	FROM cms_security sec, MIG_CO001_AB t
       	WHERE sec.sci_security_dtl_id = t.security_id
	AND source_id = 'SIBS'
	AND cms_act_col_id IS NULL
       	AND is_valid = 'Y'
       	AND security_sub_type_id IN ('AB101', 'AB102', 'AB103'));
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 7);
	commit;

	-------------------------------------
	-- Actual Table
	-- CMS_ASSET_xxx
	-------------------------------------
	Insert into CMS_ASSET_PLANT_EQUIP (cms_collateral_id, downpayment_tradein, downpayment_cash, serial_no)
     	(SELECT cms_collateral_id, down_payment_trade_in, down_payment_cash, serial_no
      	FROM cms_security sec, MIG_CO001_AB t
      	WHERE sec.sci_security_dtl_id = t.security_id
	AND source_id = 'SIBS'
      	AND is_valid = 'Y'
      	AND security_sub_type_id = 'AB101'
	AND NOT EXISTS (SELECT 1 FROM CMS_ASSET_PLANT_EQUIP
	    		WHERE CMS_COLLATERAL_ID = sec.CMS_COLLATERAL_ID fetch first row only));

      COMMIT;
	  
	Insert into CMS_ASSET_VEHICLE (cms_collateral_id, chassis_number, engine_number, ENGINE_CAPACITY, downpayment_tradein, downpayment_cash,
                                    freight_charges, price_list, vehicle_color, road_tax_amt_type, ROAD_TAX_EXPIRY_DATE, LOG_BOOK_NUMBER, E_HAK_MILIK_NUMBER)
    	(SELECT cms_collateral_id, chassis_number, engine_number, horse_power, down_payment_trade_in, down_payment_cash,
            freight_charges, price_list, vehicle_color, road_tax_amt_type, ROAD_TAX_EXPIRY_DATE, reg_card_number, E_HAK_MILIK_NUMBER
     	FROM cms_security sec, MIG_CO001_AB t
     	WHERE sec.sci_security_dtl_id = t.security_id
	AND source_id = 'SIBS'
     	AND is_valid = 'Y'
     	AND security_sub_type_id = 'AB102'
	AND NOT EXISTS (SELECT 1 FROM CMS_ASSET_VEHICLE
	    		WHERE CMS_COLLATERAL_ID = sec.CMS_COLLATERAL_ID fetch first row only));
     
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 8);
	commit;

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_ASSET
	-------------------------------------
	INSERT INTO cms_stage_asset (cms_collateral_id, asset_description, type_of_asset, purchase_price,  
                                purchase_date, reg_date, manufacture_year, model_no, 
                                --derived, refering ABCMS-235 --doc_perfect_age,  
                                sales_proceed, reg_no, reg_fee, brand, good_status, 
                                repossession_date, repossession_age, 
                                public_transport, phy_inspection_done, env_risky_status, env_risky_date, scrap_value,
                                chattel_sold_date, rl_serial_no)
	(SELECT cms_collateral_id, asset_desc, asset_type_code, purchase_price, 
            		purchase_date, reg_date, manufacture_year, model_no, 
			--document_perfection_age,
			sales_proceed, reg_no, reg_fee, brand, good_stat, 
            		DATE(reposession_date), reposession_age, 
			public_transport, phy_inspection_done, env_risky_status, env_risky_date, scrap_value,
            		chattel_sold_date, rl_serial_no
	FROM cms_stage_security sec, MIG_CO001_AB t
	WHERE sec.sci_security_dtl_id = t.security_id
	AND source_id = 'SIBS'
	AND cms_stg_col_id IS NULL
	AND IS_VALID = 'Y');
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 9);
	commit;

	-------------------------------------
	-- Stage Table
	-- CMS_ASSET_xxx
	-------------------------------------
	Insert into CMS_STAGE_ASSET_PLANT_EQUIP (cms_collateral_id, downpayment_tradein, downpayment_cash, serial_no)
     	(SELECT cms_collateral_id, down_payment_trade_in, down_payment_cash, serial_no
     	FROM cms_stage_security sec, MIG_CO001_AB t
     	WHERE sec.sci_security_dtl_id = t.security_id
	AND source_id = 'SIBS'
      	AND is_valid = 'Y'
      	AND security_sub_type_id = 'AB101'
	AND NOT EXISTS (SELECT 1 FROM CMS_STAGE_ASSET_PLANT_EQUIP
	    		WHERE CMS_COLLATERAL_ID = sec.CMS_COLLATERAL_ID fetch first row only));

	COMMIT;
      
	Insert into CMS_STAGE_ASSET_VEHICLE (cms_collateral_id, chassis_number, engine_number, ENGINE_CAPACITY, downpayment_tradein, downpayment_cash,
                                    freight_charges, price_list, vehicle_color, road_tax_amt_type, ROAD_TAX_EXPIRY_DATE, LOG_BOOK_NUMBER, E_HAK_MILIK_NUMBER)
    	(SELECT cms_collateral_id, chassis_number, engine_number, horse_power, down_payment_trade_in, down_payment_cash,
            freight_charges, price_list, vehicle_color, road_tax_amt_type, ROAD_TAX_EXPIRY_DATE, reg_card_number, E_HAK_MILIK_NUMBER
     	FROM cms_stage_security sec, MIG_CO001_AB t
     	WHERE sec.sci_security_dtl_id = t.security_id
	AND source_id = 'SIBS'
     	AND is_valid = 'Y'
     	AND security_sub_type_id = 'AB102'
	AND NOT EXISTS (SELECT 1 FROM CMS_STAGE_ASSET_VEHICLE
	    		WHERE CMS_COLLATERAL_ID = sec.CMS_COLLATERAL_ID fetch first row only));
     
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 10);
	commit;

 	-------------------------------------
	-- Mig Table
	-- MIG_CO001_AB
	-- Update actual and staging collateral id
	-------------------------------------	
	LOCK TABLE MIG_CO001_AB IN SHARE MODE;
	update mig_co001_ab
	set cms_act_col_id = (select cms_collateral_id
			from cms_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';
		
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 11);
	commit;
	
	LOCK TABLE MIG_CO001_AB IN SHARE MODE;
	update mig_co001_ab
	set cms_stg_col_id = (select cms_collateral_id
			from cms_stage_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';
		
    	--UPDATE MIG_CO001_AB a
    	--    SET (CMS_ACT_COL_ID, CMS_STG_COL_ID) = 
    	--(SELECT act.CMS_COLLATERAL_ID, stg.CMS_COLLATERAL_ID
    	-- FROM CMS_SECURITY act, CMS_STAGE_SECURITY stg
    	-- WHERE act.sci_security_dtl_id = a.security_id
    	-- AND stg.sci_security_dtl_id = a.security_id
    	 --AND act.SCI_SECURITY_SUBTYPE_VALUE IN ('AB101','AB102', 'AB103')
    	 --AND stg.SCI_SECURITY_SUBTYPE_VALUE IN ('AB101','AB102', 'AB103')
    	-- AND a.is_valid = 'Y');
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 12);
	commit;

	----------------------------
	-- Begin Insertion
	-- cms_security_source
	----------------------------
	INSERT INTO cms_security_source (cms_security_source_id, cms_collateral_id, source_security_id, source_id, 
									 status, last_update_date, security_sub_type_id, interface_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR SHARE_SECURITY_SEQ), 2)) AS BIGINT),
			cms_collateral_id, security_id, 'SIBS', 'ACTIVE', CURRENT_TIMESTAMP, cms_security_subtype_id,
			'CO001'
	FROM cms_security sec, MIG_CO001_AB t
	WHERE NOT EXISTS (SELECT 1 FROM cms_security_source 
			 WHERE source_security_id = security_id 
		   	 AND source_id = 'SIBS' fetch first row only) 
	AND is_valid = 'Y'
	AND sec.sci_security_dtl_id = t.security_id
	AND sec.security_sub_type_id IN ('AB101', 'AB102', 'AB103')
	AND source_id = 'SIBS');
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 13);
	commit;	
	
	----------------------------
	-- Asset Trade In  for down payment > 0
	-- CMS_ASSET_TRADE_IN
	----------------------------	
	insert into CMS_ASSET_TRADE_IN (ID, COLLATERAL_ID, REF_ID, MAKE, MODEL, YEAR_OF_MANUFACTURE, REGISTRATION_NO, CURRENCY_CODE, VERSION_TIME) 
	    (select CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_ASSET_TRADE_IN_A_SEQ), 2)) as BIGINT),
				sec.CMS_COLLATERAL_ID, (select CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_ASSET_TRADE_IN_A_SEQ), 2)) as BIGINT),
				t.BRAND, t.MODEL_NO, t.MANUFACTURE_YEAR, t.REG_NO, t.CURRENCY, 0
		from CMS_SECURITY sec, MIG_CO001_AB t
		where sec.SCI_SECURITY_DTL_ID = t.SECURITY_ID
		and sec.SOURCE_ID = 'SIBS'
		and t.IS_VALID = 'Y'
		and t.DOWNPAYMENT_TRADEIN > 0
		and sec.SECURITY_SUB_TYPE_ID in ('F70', 'F71', 'F72', 'F74', 'F75', 'F76')
		and not exists (select 1 from CMS_ASSET_TRADE_IN trdin
						where trdin.CMS_COLLATERAL_ID = sec.CMS_COLLATERAL_ID fetch first row only));
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 14);
	commit;	
	
	----------------------------
	-- Asset Trade In  for down payment > 0
	-- STAGE_ASSET_TRADE_IN
	----------------------------	
	insert into STAGE_ASSET_TRADE_IN (ID, COLLATERAL_ID, REF_ID, MAKE, MODEL, YEAR_OF_MANUFACTURE, REGISTRATION_NO, CURRENCY_CODE, VERSION_TIME) 
	    (select CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_ASSET_TRADE_IN_A_SEQ), 2)) as BIGINT),
				sec.CMS_COLLATERAL_ID, act.ID, t.BRAND, t.MODEL_NO, t.MANUFACTURE_YEAR, t.REG_NO, t.CURRENCY, 0
		from CMS_STAGE_SECURITY sec, MIG_CO001_AB t, CMS_ASSET_TRADE_IN act
		where sec.SCI_SECURITY_DTL_ID = t.SECURITY_ID
		and t.CMS_ACT_COL_ID = act.CMS_COLLATERAL_ID
		and sec.SOURCE_ID = 'SIBS'
		and t.IS_VALID = 'Y'
		and t.DOWNPAYMENT_TRADEIN > 0
		and sec.SECURITY_SUB_TYPE_ID in ('F70', 'F71', 'F72', 'F74', 'F75', 'F76')
		and not exists (select 1 from STAGE_ASSET_TRADE_IN trdin
						where trdin.CMS_COLLATERAL_ID = sec.CMS_COLLATERAL_ID fetch first row only));

	CALL "LOG_PROC_TIME"('MIG_RUN_CO001_AB', 'SIBS', 0);			
END
@

CREATE PROCEDURE MIG_RUN_CO002_AB_GOLD
	LANGUAGE SQL
BEGIN

	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 1);
	commit;
	--------------------------------------------
	-- Update security type and subtype id first
	-- MIG_CO001_AB
	--------------------------------------------
	UPDATE MIG_CO002_AB_GOLD a 
	   SET (CMS_SECURITY_TYPE_ID, CMS_SECURITY_SUBTYPE_ID) =
	(SELECT substr(REF_ENTRY_CODE, 1, 2), REF_ENTRY_CODE
	FROM COMMON_CODE_CATEGORY_ENTRY 
        WHERE CATEGORY_CODE = a.SOURCE_SEC_CAT
        AND ENTRY_CODE = a.SOURCE_SECURITY_SUB_TYPE);
       
	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 2);
	commit;
    
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-------------------------------------
	INSERT INTO CMS_SECURITY (CMS_COLLATERAL_ID, SCI_SECURITY_DTL_ID, SCI_REFERENCE_NOTE, SECURITY_SUB_TYPE_ID, 
				  SCI_SECURITY_TYPE_VALUE, SCI_SECURITY_SUBTYPE_VALUE, SCI_SECURITY_CURRENCY, SCI_ORIG_SECURITY_CURRENCY,
				  SECURITY_LOCATION, SECURITY_ORGANISATION, CUSTODIAN_TYPE,  
				  IS_LEGAL_ENFORCE, IS_LEGAL_ENFORCE_DATE, SECURITY_PERFECTION_DATE, SOURCE_SECURITY_TYPE, SOURCE_SECURITY_SUB_TYPE, 
                                  SECURITY_MATURITY_DATE, SECURITY_CUSTODIAN, BORROWER_DEPENDENCY, EXCHANGE_CONTROL_OBTAINED, 
                                  IS_CGC_PLEDGED, COLLATERAL_STATUS, VERSION_TIME, STATUS, SOURCE_ID, IS_MIGRATED_IND)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COLLATERAL_SEQ), 2)) as BIGINT), 
			SECURITY_ID, SECURITY_REF_NOTE, CMS_SECURITY_SUBTYPE_ID, 
			CMS_SECURITY_TYPE_ID, CMS_SECURITY_SUBTYPE_ID, CURRENCY, CURRENCY,
			LOC_COUNTRY, LOC_ORG_CODE, CUSTODIAN_TYPE, 			
			LEGAL_ENFORCEABILITY, LEGAL_ENFORCEABILITY_DATE, SECURITY_PERFECTION_DATE, SOURCE_SECURITY_TYPE, SOURCE_SECURITY_SUB_TYPE,
            		SECURITY_MATURITY_DATE, SECURITY_CUSTODIAN, BORROWER_DEPENDENCY, EXCHANGE_CONTROL_OBTAINED,
            		IS_CGC_PLEDGED, COLLATERAL_STATUS, 0, 'ACTIVE', 'SIBS', 'Y'
	FROM MIG_CO002_AB_GOLD t
	WHERE CMS_ACT_COL_ID IS NULL
	and is_valid = 'Y');
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 3);
	commit;

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------	
	UPDATE CMS_SECURITY A SET (TYPE_NAME, SUBTYPE_NAME) =
	(SELECT SECURITY_TYPE_NAME, SUBTYPE_NAME 
	 FROM CMS_SECURITY_SUB_TYPE
	 WHERE SECURITY_SUB_TYPE_ID = A.SECURITY_SUB_TYPE_ID)
	 WHERE SOURCE_ID = 'SIBS'
	 AND TYPE_NAME IS NULL;

	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 4);
	commit;
      	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-------------------------------------
	INSERT INTO CMS_STAGE_SECURITY (CMS_COLLATERAL_ID, SCI_SECURITY_DTL_ID, SCI_REFERENCE_NOTE, SECURITY_SUB_TYPE_ID, 
				  SCI_SECURITY_TYPE_VALUE, SCI_SECURITY_SUBTYPE_VALUE, SCI_SECURITY_CURRENCY, SCI_ORIG_SECURITY_CURRENCY,
				  SECURITY_LOCATION, SECURITY_ORGANISATION, CUSTODIAN_TYPE,  
				  IS_LEGAL_ENFORCE, IS_LEGAL_ENFORCE_DATE, SECURITY_PERFECTION_DATE, SOURCE_SECURITY_TYPE, SOURCE_SECURITY_SUB_TYPE, 
                                  SECURITY_MATURITY_DATE, SECURITY_CUSTODIAN, BORROWER_DEPENDENCY, EXCHANGE_CONTROL_OBTAINED, 
                                  IS_CGC_PLEDGED, COLLATERAL_STATUS, VERSION_TIME, STATUS, SOURCE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COLLATERAL_SEQ), 2)) AS BIGINT),
			SECURITY_ID, SECURITY_REF_NOTE, CMS_SECURITY_SUBTYPE_ID, 
			CMS_SECURITY_TYPE_ID, CMS_SECURITY_SUBTYPE_ID, CURRENCY, CURRENCY,
			LOC_COUNTRY, LOC_ORG_CODE, CUSTODIAN_TYPE, 			
			LEGAL_ENFORCEABILITY, LEGAL_ENFORCEABILITY_DATE, SECURITY_PERFECTION_DATE, SOURCE_SECURITY_TYPE, SOURCE_SECURITY_SUB_TYPE,
            		SECURITY_MATURITY_DATE, SECURITY_CUSTODIAN, BORROWER_DEPENDENCY, EXCHANGE_CONTROL_OBTAINED,
            		IS_CGC_PLEDGED, COLLATERAL_STATUS, 0, 'ACTIVE', 'SIBS'
	 FROM MIG_CO002_AB_GOLD T
	 WHERE CMS_STG_COL_ID IS NULL
	 AND IS_VALID = 'Y');
			
	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 5);
	commit;
    
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------	
	UPDATE CMS_STAGE_SECURITY A SET (TYPE_NAME, SUBTYPE_NAME) =
	(SELECT SECURITY_TYPE_NAME, SUBTYPE_NAME 
	 FROM CMS_SECURITY_SUB_TYPE
	 WHERE SECURITY_SUB_TYPE_ID = A.SECURITY_SUB_TYPE_ID)
	 WHERE SOURCE_ID = 'SIBS'
	 AND TYPE_NAME IS NULL;
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 6);
	commit;

	-------------------------------------
	-- Actual Table
	-- CMS_ASSET
	-------------------------------------
	INSERT INTO CMS_ASSET  (CMS_COLLATERAL_ID, ASSET_DESCRIPTION, TYPE_OF_ASSET, PURCHASE_PRICE, 
				SALES_PROCEED, PHY_INSPECTION_DONE, ENV_RISKY_STATUS)
	(SELECT CMS_COLLATERAL_ID, ASSET_DESC, ASSET_TYPE_CODE, PURCHASE_PRICE, SALES_PROCEED,
            		PHY_INSPECTION_DONE, ENV_RISKY_STATUS
	FROM CMS_SECURITY SEC, MIG_CO002_AB_GOLD T
        WHERE SEC.SCI_SECURITY_DTL_ID = T.SECURITY_ID
	AND SOURCE_ID = 'SIBS'
	AND CMS_ACT_COL_ID IS NULL
        AND IS_VALID = 'Y');
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 7);
	commit;

	-------------------------------------
	-- Actual Table
	-- CMS_ASSET_GOLD
	-------------------------------------
	INSERT INTO CMS_ASSET_GOLD (CMS_COLLATERAL_ID, GOLD_GRADE, PURCHASE_RECEIPT_NO, GOLD_UNIT_PRICE_CURRENCY, GOLD_UNIT_PRICE, CERT_EXPIRY_DATE,
     				    GOLD_WEIGHT, GOLD_UOM, AUCTION_DATE, AUCTION_PRICE, AUCTIONEER, GOLD_UNIT_PRICE_UOM)
     	(SELECT CMS_COLLATERAL_ID, GOLD_GRADE, PURCHASE_RECEIPT_NO, CURRENCY, GOLD_UNIT_PRICE, CERT_EXPIRY_DATE,
     		GOLD_WEIGHT, GOLD_WEIGHT_UOM, AUCTION_DATE, AUCTION_PRICE, AUCTIONEER, GOLD_UNIT_PRICE_UOM
     	 FROM CMS_SECURITY SEC, MIG_CO002_AB_GOLD T
     	 WHERE SEC.SCI_SECURITY_DTL_ID = T.SECURITY_ID
	 AND SOURCE_ID = 'SIBS'
     	 AND IS_VALID = 'Y'
	AND NOT EXISTS (SELECT '1' FROM CMS_ASSET_GOLD
	    		WHERE CMS_COLLATERAL_ID = sec.CMS_COLLATERAL_ID));

	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 8);
	commit;

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_ASSET
	-------------------------------------
	INSERT INTO CMS_STAGE_ASSET (CMS_COLLATERAL_ID, ASSET_DESCRIPTION, TYPE_OF_ASSET, PURCHASE_PRICE, 
				     SALES_PROCEED, PHY_INSPECTION_DONE, ENV_RISKY_STATUS)
	(SELECT CMS_COLLATERAL_ID, ASSET_DESC, ASSET_TYPE_CODE, PURCHASE_PRICE, SALES_PROCEED,
            	PHY_INSPECTION_DONE, ENV_RISKY_STATUS
	FROM CMS_STAGE_SECURITY SEC, MIG_CO002_AB_GOLD T
	WHERE SEC.SCI_SECURITY_DTL_ID = T.SECURITY_ID
	AND SOURCE_ID = 'SIBS'
	AND CMS_STG_COL_ID IS NULL
	AND IS_VALID = 'Y');
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 9);
	commit;

	-------------------------------------
	-- Stage Table
	-- CMS_STAGE_ASSET_GOLD
	-------------------------------------
	Insert into CMS_STAGE_ASSET_GOLD (CMS_COLLATERAL_ID, GOLD_GRADE, PURCHASE_RECEIPT_NO, GOLD_UNIT_PRICE_CURRENCY, GOLD_UNIT_PRICE, CERT_EXPIRY_DATE,
     				    GOLD_WEIGHT, GOLD_UOM, AUCTION_DATE, AUCTION_PRICE, AUCTIONEER, GOLD_UNIT_PRICE_UOM)
     	(SELECT CMS_COLLATERAL_ID, GOLD_GRADE, PURCHASE_RECEIPT_NO, CURRENCY, GOLD_UNIT_PRICE, CERT_EXPIRY_DATE,
     		GOLD_WEIGHT, GOLD_WEIGHT_UOM, AUCTION_DATE, AUCTION_PRICE, AUCTIONEER, GOLD_UNIT_PRICE_UOM
     	 FROM CMS_STAGE_SECURITY SEC, MIG_CO002_AB_GOLD T
     	 WHERE SEC.SCI_SECURITY_DTL_ID = T.SECURITY_ID
	 AND SOURCE_ID = 'SIBS'
     	 AND IS_VALID = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 10);
	commit;

  	-------------------------------------
	-- Mig Table
	-- MIG_CO001_AB
	-- Update actual and staging collateral id
	-------------------------------------	
	--LOCK TABLE MIG_CO002_AB_GOLD IN SHARE MODE;
	--UPDATE MIG_CO002_AB_GOLD a
	--	SET (CMS_ACT_COL_ID, CMS_STG_COL_ID) = 
	--(SELECT act.CMS_COLLATERAL_ID, stg.CMS_COLLATERAL_ID
	 --FROM CMS_SECURITY act, CMS_STAGE_SECURITY stg
	 --WHERE act.sci_security_dtl_id = a.security_id
	 --AND stg.sci_security_dtl_id = a.security_id
	 --AND act.SCI_SECURITY_SUBTYPE_VALUE = 'AB110'
	 --AND stg.SCI_SECURITY_SUBTYPE_VALUE = 'AB110'
	 --AND a.is_valid = 'Y');
    
	update MIG_CO002_AB_GOLD
	set cms_act_col_id = (select cms_collateral_id
			from cms_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';
		
	COMMIT;
	
	LOCK TABLE MIG_CO002_AB_GOLD IN SHARE MODE;
	update MIG_CO002_AB_GOLD
	set cms_stg_col_id = (select cms_collateral_id
			from cms_stage_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';	 
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 11);
	commit;

	----------------------------
	-- Begin Insertion
	-- CMS_SECURITY_SOURCE
	----------------------------
	INSERT INTO CMS_SECURITY_SOURCE (CMS_SECURITY_SOURCE_ID, CMS_COLLATERAL_ID, SOURCE_SECURITY_ID, SOURCE_ID, 
					 STATUS, LAST_UPDATE_DATE, SECURITY_SUB_TYPE_ID, INTERFACE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR SHARE_SECURITY_SEQ), 2)) AS BIGINT),
			CMS_COLLATERAL_ID, SECURITY_ID, 'SIBS', 'ACTIVE', CURRENT_TIMESTAMP, CMS_SECURITY_SUBTYPE_ID,
			'CO002'
	FROM CMS_SECURITY SEC, MIG_CO002_AB_GOLD T
	WHERE NOT EXISTS (SELECT 1 FROM CMS_SECURITY_SOURCE 
			  WHERE SOURCE_SECURITY_ID = SECURITY_ID 
			  AND SOURCE_ID = 'SIBS') 
	AND IS_VALID = 'Y'
	AND SEC.SCI_SECURITY_DTL_ID = T.SECURITY_ID
	AND SEC.SECURITY_SUB_TYPE_ID = 'AB110'
	AND SOURCE_ID = 'SIBS');
	

	CALL "LOG_PROC_TIME"('MIG_RUN_CO002_AB_GOLD', 'SIBS', 0);			
END
@

CREATE PROCEDURE MIG_RUN_CO005_CS
	LANGUAGE SQL
BEGIN

	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 1);
	commit;
	--------------------------------------------
	-- Update security type and subtype id first
	--------------------------------------------

	UPDATE MIG_CO005_CS a 
	   SET (cms_security_type_id) =
	(SELECT substr(cms_security_subtype_id, 1, 2)
	   FROM MIG_CO005_CS fetch first rows only);
       
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 2);
	commit;
	  
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-------------------------------------
	INSERT INTO cms_security (cms_collateral_id, sci_security_dtl_id, security_sub_type_id, 
								sci_security_type_value, sci_security_subtype_value, sci_reference_note, sci_security_currency, sci_orig_security_currency,
								security_location, security_organisation, custodian_type, security_custodian,
								is_legal_enforce, is_legal_enforce_date, security_perfection_date, 
								source_security_type, source_security_sub_type, exchange_control_obtained,  
                                borrower_dependency, is_cgc_pledged, collateral_status, version_time, status, source_id, is_migrated_ind)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
			security_id, cms_security_subtype_id, cms_security_type_id, cms_security_subtype_id, security_ref_note, currency, currency, 
			loc_country, loc_org_code, custodian_type, custodian, legal_enforcebility, 
			legal_enforcebility_date, security_perfection_date, source_security_type, source_security_sub_type, 
            exchange_control_obtained, borrower_dependency, is_cgc_pledged, collateral_status, 
			0, 'ACTIVE', 'SIBS', 'Y'
	   FROM MIG_CO005_CS t
	  WHERE NOT EXISTS (SELECT 1 FROM cms_security
	  					 WHERE sci_security_dtl_id = t.security_id
	  					   AND source_id = 'SIBS' fetch first row only)
		AND IS_VALID = 'Y');
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 3);
	commit;
	
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	
	UPDATE cms_security a SET (type_name, subtype_name) =
	(SELECT security_type_name, subtype_name 
	   FROM cms_security_sub_type
	  WHERE security_sub_type_id = a.security_sub_type_id)
	 WHERE source_id = 'SIBS'
	   AND type_name IS NULL;
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 4);
	commit;
	-------------------------------------
	-- Actual Table
	-- CMS_CASH
	-------------------------------------
	
	INSERT INTO cms_cash (cms_collateral_id, interest_capitialisation, description, issuer)
	(SELECT cms_collateral_id, interest_capital, description, issuer
	   FROM cms_security sec, MIG_CO005_CS t
	  WHERE sec.sci_security_dtl_id = t.security_id
	    AND source_id = 'SIBS'
	    AND NOT EXISTS (SELECT 1 FROM cms_cash
	    				 WHERE cms_collateral_id = sec.cms_collateral_id fetch first row only)
		AND is_valid = 'Y');
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 5);
	commit;
	
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-------------------------------------
	INSERT INTO cms_stage_security (cms_collateral_id, sci_security_dtl_id, security_sub_type_id, 
									  sci_security_type_value, sci_security_subtype_value, sci_reference_note, sci_security_currency, sci_orig_security_currency,
									  security_location, security_organisation, custodian_type, security_custodian,
									  is_legal_enforce, is_legal_enforce_date, security_perfection_date, 
									  source_security_type, source_security_sub_type, exchange_control_obtained,  
                                borrower_dependency, is_cgc_pledged, collateral_status, version_time, status, source_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
			security_id, cms_security_subtype_id, cms_security_type_id, cms_security_subtype_id, security_ref_note, currency, currency,
			loc_country, loc_org_code, custodian_type, custodian, legal_enforcebility, 
			legal_enforcebility_date, security_perfection_date, source_security_type, source_security_sub_type, 
            exchange_control_obtained, borrower_dependency, is_cgc_pledged, collateral_status,
			0, 'ACTIVE', 'SIBS'
     FROM MIG_CO005_CS t
     WHERE NOT EXISTS (SELECT 1 FROM cms_stage_security
	  					WHERE sci_security_dtl_id = t.security_id
	  					AND source_id = 'SIBS' fetch first row only)
     AND IS_VALID = 'Y');
	  	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 6);
	commit;
	
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	
	UPDATE cms_stage_security a 
    SET (type_name, subtype_name) =
    	(SELECT security_type_name, subtype_name 
    	 FROM cms_security_sub_type
    	 WHERE security_sub_type_id = a.security_sub_type_id)
	WHERE source_id = 'SIBS'
	AND TYPE_NAME IS NULL;
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 7);
	commit;
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_CASH
	-------------------------------------
	INSERT INTO cms_stage_cash (cms_collateral_id, interest_capitialisation, description, issuer)
	(SELECT cms_collateral_id, interest_capital, description, issuer
	 FROM cms_stage_security sec, MIG_CO005_CS t
	 WHERE sec.sci_security_dtl_id = t.security_id
	 AND source_id = 'SIBS'
	 AND NOT EXISTS (SELECT '1' FROM cms_stage_cash
	    			 WHERE cms_collateral_id = sec.cms_collateral_id)
	 AND IS_VALID = 'Y');
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 8);
	commit;
	
		
	----------------------------
	-- Begin Insertion
	-- cms_security_source
	----------------------------
	INSERT INTO cms_security_source (cms_security_source_id, cms_collateral_id, source_security_id, source_id, 
									 status, last_update_date, security_sub_type_id, interface_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR SHARE_SECURITY_SEQ), 2)) AS BIGINT),
			cms_collateral_id, security_id, 'SIBS', 'ACTIVE', CURRENT_TIMESTAMP, cms_security_subtype_id, 'CO005'
	 FROM cms_security sec, MIG_CO005_CS t
	 WHERE NOT EXISTS (SELECT 1 FROM cms_security_source 
                       WHERE source_security_id = security_id 
                       AND source_id = 'SIBS' fetch first row only) 
     AND is_valid = 'Y'
	 AND sec.sci_security_dtl_id = t.security_id
	 AND source_id = 'SIBS');
		
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 9);
	commit;
	
	----------------------------
	-- Begin Update
	-- set collateral id back to temp table
	----------------------------
--     UPDATE MIG_CO005_CS a
--         SET (CMS_ACT_COL_ID, CMS_STG_COL_ID) = 
--     (SELECT act.CMS_COLLATERAL_ID, stg.CMS_COLLATERAL_ID
--      FROM CMS_SECURITY act, CMS_STAGE_SECURITY stg
--      WHERE act.sci_security_dtl_id = a.security_id
--      AND stg.sci_security_dtl_id = a.security_id
--      AND act.sci_security_type_value = 'CS'
--      AND stg.sci_security_type_value = 'CS'
--      AND a.is_valid = 'Y');
--      
	update MIG_CO005_CS
	set cms_act_col_id = (select cms_collateral_id
			from cms_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';
		
	COMMIT;
	
	LOCK TABLE MIG_CO005_CS IN SHARE MODE;
	update MIG_CO005_CS
	set cms_stg_col_id = (select cms_collateral_id
			from cms_stage_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';	     
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 10);
	commit;

    
	----------------------------
	-- Begin Insert
	-- cms_cash_deposit
	----------------------------
	INSERT INTO cms_cash_deposit (cash_deposit_id, DEPOSIT_RECEIPT_NUMBER, deposit_amount_currency, deposit_amount, 
                                  is_own_bank, DEPOSIT_REFERENCE_NUMBER, deposit_maturity_date, tenure, tenure_unit, hold_status, 
                                  cms_collateral_id, status, source_security_id, source_id, cms_ref_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR cash_deposit_seq), 2)) as BIGINT),
			ref_no, amt_currency, deposit_amt, 
            is_own_bank, group_account_no, deposit_maturity_date, tenure, tenure_unit, hold_status, 
            sec.cms_collateral_id, 'ACTIVE', security_id, 'SIBS',
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR cash_deposit_seq), 2)) as BIGINT)
	 FROM cms_security sec, mig_co005_cs mig
	 WHERE sec.cms_collateral_id = mig.cms_act_col_id
	 AND sec.source_id = 'SIBS'
	 AND mig.is_valid = 'Y');
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 11);
	commit;

	----------------------------
	-- Begin Insert
	-- cms_stage_cash_deposit
	----------------------------
	INSERT INTO cms_stage_cash_deposit (cash_deposit_id, DEPOSIT_RECEIPT_NUMBER, deposit_amount_currency, deposit_amount, 
                                        is_own_bank, DEPOSIT_REFERENCE_NUMBER, deposit_maturity_date, tenure, tenure_unit, hold_status, 
                                        cms_collateral_id, status, source_security_id, source_id, cms_ref_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR cash_deposit_seq), 2)) as BIGINT),
	 ref_no, amt_currency, deposit_amt, 
     mig.is_own_bank, mig.group_account_no, mig.deposit_maturity_date, mig.tenure, mig.tenure_unit, mig.hold_status, 
     sec.cms_collateral_id, 'ACTIVE', security_id, 'SIBS', act.cms_ref_id	 
	 FROM cms_stage_security sec, mig_co005_cs mig, cms_cash_deposit act
	 WHERE sec.cms_collateral_id = mig.cms_stg_col_id
     AND mig.cms_act_col_id = act.cms_collateral_id
	 AND sec.source_id = 'SIBS'
	 AND is_valid = 'Y');
     
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 12);
	commit;

	----------------------------
	-- Begin Insertion
	-- cms_charge_detail
	----------------------------
	INSERT INTO cms_charge_detail (charge_detail_id, 
            cms_collateral_id, security_rank, charge_type, status, source_id, cms_ref_id, CHARGE_NATURE, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT, LEGAL_CHARGE_DATE)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT), 
			t.cms_act_col_id, 1, charge_type, 'ACTIVE', 'SIBS',
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT), CHARGE_NATURE, CURRENCY, CHARGE_AMOUNT, LEGAL_CHARGE_DATE
	   FROM mig_co005_cs t
	  WHERE t.is_valid = 'Y');
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 13);
	commit;
	    
	----------------------------
	-- Begin Insertion
	-- cms_stage_charge_detail
	----------------------------
	INSERT INTO cms_stage_charge_detail (charge_detail_id, 
            cms_collateral_id, security_rank, charge_type, status, source_id, cms_ref_id, CHARGE_NATURE, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT, LEGAL_CHARGE_DATE)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT),
			t.cms_stg_col_id, 1, t.charge_type, 'ACTIVE', 'SIBS', act.cms_ref_id, t.CHARGE_NATURE, t.CURRENCY, t.CHARGE_AMOUNT, t.LEGAL_CHARGE_DATE
	   from mig_co005_cs t, cms_charge_detail act
        WHERE t.CMS_ACT_COL_ID = act.cms_collateral_id
	    AND act.source_id = 'SIBS' 
	    AND t.is_valid = 'Y');
        
	CALL "LOG_PROC_TIME"('MIG_RUN_CO005_CS', 'SIBS', 0);

END
@

CREATE PROCEDURE MIG_RUN_CO008_MS
	LANGUAGE SQL
BEGIN

	CALL "LOG_PROC_TIME"('MIG_RUN_CO008_MS', 'SIBS', 1);
	commit;

	----------------------------------------------
	-- Update security type and subtype id first
	-- MIG_CO008_MS
	----------------------------------------------	 
	UPDATE MIG_CO008_MS a
	SET (cms_security_type_id, cms_security_subtype_id) =
		(SELECT 'MS', MS_GET_SUBTYPE(source_security_sub_type, type, stock_code_bond_code, STOCK_EXCHANGE_BOND_MARKET)
		 FROM MIG_CO008_MS
		 WHERE security_id = a.security_id)
     	WHERE IS_VALID = 'Y';

	COMMIT;
	
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-------------------------------------	
	INSERT INTO cms_security (cms_collateral_id, sci_security_dtl_id, sci_reference_note, security_sub_type_id, 
				sci_security_type_value, sci_security_subtype_value, sci_security_currency, sci_orig_security_currency,
				security_location, security_organisation, source_security_type, source_security_sub_type, 
                                is_legal_enforce, is_legal_enforce_date, security_perfection_date, borrower_dependency, is_cgc_pledged,
				custodian_type, security_custodian, security_maturity_date, collateral_status,
                                version_time, status, source_id, is_migrated_ind)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
			security_id, security_ref_note, cms_security_subtype_id, cms_security_type_id, cms_security_subtype_id, currency, currency,
			loc_country, loc_org_code, source_security_type, source_security_sub_type, 
            		is_legal_enforce, is_legal_enforce_date, security_perfection_date, borrower_dependency, is_cgc_pledged,
            		custodian_type, security_custodian, security_maturity_date, collateral_status,
            			0, 'ACTIVE', COALESCE(t.SOURCE_ID, 'SIBS'), 'Y'
	FROM MIG_CO008_MS t
	WHERE NOT EXISTS (SELECT 1 FROM cms_security sec
	  		WHERE sec.sci_security_dtl_id = t.security_id
	  		AND (sec.source_id = 'SIBS' 
	  			OR sec.SOURCE_ID = 'SMF') fetch first row only)
	and is_valid = 'Y');
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO008_MS', 'SIBS', 2);
	commit;
	
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------	
	UPDATE cms_security a SET (type_name, subtype_name) =
	(SELECT sec.security_type_name, sec.subtype_name 
	   FROM cms_security_sub_type sec
	  WHERE sec.security_sub_type_id = a.security_sub_type_id)
	 WHERE a.source_id = 'SIBS'
	   AND a.type_name IS NULL;
	 
	COMMIT;
	-------------------------------------
	-- Actual Table
	-- CMS_MARKETABLE_SEC
	-------------------------------------

	INSERT INTO cms_marketable_sec (cms_collateral_id, capped_price)
	(SELECT cms_collateral_id, capped_price
	   FROM cms_security sec, MIG_CO008_MS t
	   WHERE sec.sci_security_dtl_id = t.security_id
	   AND (sec.source_id = 'SIBS' 
	  	OR sec.SOURCE_ID = 'SMF')
	   AND NOT EXISTS (SELECT 1 FROM cms_marketable_sec
	    				WHERE cms_collateral_id = sec.cms_collateral_id fetch first row only)
       AND t.is_valid = 'Y');
	    				 
	commit;
	
	-------------------------------------
	-- Actual Table
	-- CMS_PORTFOLIO_ITEM
	-------------------------------------

	INSERT INTO cms_portfolio_item (item_id, cms_collateral_id, currency_code, type, certificate_no, no_of_units, stock_exchange, 
									stock_code, recognized_exchange_flag, cds_number, unit_price, unit_price_currency,  
                                    is_blacklisted, issuer_name, stock_exchange_country, local_exchange,  
                                    basel_compliant_text, exchange_control_obtained, status, source_id, CMS_REF_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR marketable_equity_seq), 2)) as BIGINT),
			m.cms_collateral_id, t.currency, type, certificate_number, number_of_units, stock_exchange_bond_market, stock_code_bond_code, 
			recognized_exchange, cds_number, unit_price, unit_price_currency,  
            security_referred, issuer_name, stock_exchange_country, local_exchange,  
            basel_compliant_text, t.exchange_control_obtained, 'ACTIVE', COALESCE(t.SOURCE_ID, 'SIBS'),
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR marketable_equity_seq), 2)) as BIGINT)
	 FROM cms_marketable_sec m, cms_security sec, MIG_CO008_MS t
	 WHERE m.cms_collateral_id = sec.cms_collateral_id
	 AND sec.sci_security_dtl_id = t.security_id
	 AND (sec.source_id = 'SIBS' 
	  	OR sec.SOURCE_ID = 'SMF')
	 AND t.is_valid = 'Y'
	 AND NOT EXISTS (SELECT 1 FROM cms_portfolio_item p
                    WHERE p.cms_collateral_id = m.cms_collateral_id
	  				AND (p.source_id = 'SIBS' 
	  					OR p.SOURCE_ID = 'SMF') fetch first row only));
									  
	CALL "LOG_PROC_TIME"('MIG_RUN_CO008_MS', 'SIBS', 3);
	commit;
	
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-------------------------------------
	INSERT INTO cms_stage_security (cms_collateral_id, sci_security_dtl_id, sci_reference_note, security_sub_type_id, 
									sci_security_type_value, SCI_SECURITY_SUBTYPE_VALUE, sci_security_currency, sci_orig_security_currency, 
                                    security_location, SECURITY_ORGANISATION, source_security_type, source_security_sub_type, 
                                    is_legal_enforce, is_legal_enforce_date, security_perfection_date, borrower_dependency, is_cgc_pledged,
        							custodian_type, security_custodian, security_maturity_date, collateral_status,  
									version_time, status, source_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
			security_id, security_ref_note, cms_security_subtype_id, cms_security_type_id, cms_security_subtype_id, currency, currency,
			loc_country, loc_org_code, source_security_type, source_security_sub_type, 
            is_legal_enforce, is_legal_enforce_date, security_perfection_date, borrower_dependency, is_cgc_pledged,
			custodian_type, security_custodian, security_maturity_date, collateral_status, 
            0, 'ACTIVE', COALESCE(t.SOURCE_ID, 'SIBS')
	 FROM MIG_CO008_MS t
	 WHERE NOT EXISTS (SELECT 1 FROM cms_stage_security sec
                        WHERE sec.sci_security_dtl_id = t.security_id
	  					AND (sec.source_id = 'SIBS' 
	  						OR sec.SOURCE_ID = 'SMF') fetch first row only)
	 AND is_valid = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CO008_MS', 'SIBS', 4);
	commit;
	
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------	
	UPDATE cms_stage_security a SET (type_name, subtype_name) =
	(SELECT security_type_name, subtype_name 
	   FROM cms_security_sub_type
	  WHERE security_sub_type_id = a.security_sub_type_id)
	 WHERE (a.source_id = 'SIBS' 
	  	OR a.SOURCE_ID = 'SMF')
	   AND a.TYPE_NAME IS NULL;
	 
	COMMIT;
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_MARKETABLE_SEC
	-------------------------------------
	INSERT INTO cms_stage_marketable_sec (cms_collateral_id, capped_price)
	(SELECT cms_collateral_id, capped_price
	 FROM cms_stage_security sec, MIG_CO008_MS t
	 WHERE sec.sci_security_dtl_id = t.security_id
	 AND (sec.source_id = 'SIBS' 
	  	OR sec.SOURCE_ID = 'SMF')
     AND is_valid = 'Y'
	 AND NOT EXISTS (SELECT 1 FROM cms_stage_marketable_sec
	    			 WHERE cms_collateral_id = sec.cms_collateral_id fetch first row only));

	CALL "LOG_PROC_TIME"('MIG_RUN_CO008_MS', 'SIBS', 5);
	commit;
	    
	----------------------------
	-- Begin Update
	-- set collateral id back to temp table
	----------------------------
--     UPDATE MIG_CO008_MS a
--         SET (CMS_ACT_COL_ID, CMS_STG_COL_ID) = 
--     (SELECT act.CMS_COLLATERAL_ID, stg.CMS_COLLATERAL_ID
--      FROM CMS_SECURITY act, CMS_STAGE_SECURITY stg
--      WHERE act.sci_security_dtl_id = a.security_id
--      AND stg.sci_security_dtl_id = a.security_id
--      AND act.sci_security_type_value = 'MS'
--      AND stg.sci_security_type_value = 'MS'
--      AND a.is_valid = 'Y');
    
	update MIG_CO008_MS
	set cms_act_col_id = (select cms_collateral_id
			from cms_security 
			where sci_security_dtl_id = security_id
			and (source_id = 'SIBS' 
	  			OR SOURCE_ID = 'SMF'))
	where is_valid = 'Y';
		
	commit;
	
	update MIG_CO008_MS
	set cms_stg_col_id = (select cms_collateral_id
			from cms_stage_security 
			where sci_security_dtl_id = security_id
			and (source_id = 'SIBS' 
	  			OR SOURCE_ID = 'SMF'))
	where is_valid = 'Y';	      
     
	CALL "LOG_PROC_TIME"('MIG_RUN_CO008_MS', 'SIBS', 6);
	commit;

	------------------------------------- 
	-- Staging Table
	-- CMS_STAGE_PORTFOLIO_ITEM
	-------------------------------------
	INSERT INTO cms_stage_portfolio_item (item_id, cms_collateral_id, currency_code, type, certificate_no, no_of_units, stock_exchange, 
									stock_code, recognized_exchange_flag, cds_number, unit_price, unit_price_currency,  
                                    is_blacklisted, issuer_name, stock_exchange_country, local_exchange,  
                                    basel_compliant_text, exchange_control_obtained, status, source_id, CMS_REF_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR marketable_equity_seq), 2)) as BIGINT),
			m.cms_collateral_id, t.currency, type, certificate_number, number_of_units, stock_exchange_bond_market, stock_code_bond_code, 
			recognized_exchange, cds_number, unit_price, unit_price_currency,  
            security_referred, issuer_name, stock_exchange_country, local_exchange,  
            basel_compliant_text, t.exchange_control_obtained, 'ACTIVE', COALESCE(t.SOURCE_ID, 'SIBS'),
			(select cms_ref_id from cms_portfolio_item a WHERE a.cms_collateral_id = t.cms_act_col_id AND a.source_id = 'SIBS')
	 FROM cms_marketable_sec m, cms_security sec, MIG_CO008_MS t
	 WHERE m.cms_collateral_id = sec.cms_collateral_id
	 AND sec.sci_security_dtl_id = t.security_id
	 AND (sec.source_id = 'SIBS' 
	  	OR sec.SOURCE_ID = 'SMF')
	 AND t.is_valid = 'Y'
	 AND NOT EXISTS (SELECT 1 FROM cms_stage_portfolio_item p
                    WHERE p.cms_collateral_id = m.cms_collateral_id
	  				AND p.source_id = 'SIBS' fetch first row only));					

	CALL "LOG_PROC_TIME"('MIG_RUN_CO008_MS', 'SIBS', 7);
	commit;
	
	----------------------------
	-- Begin Insertion
	-- cms_security_source
	----------------------------
	INSERT INTO cms_security_source (cms_security_source_id, cms_collateral_id, source_security_id, source_id, 
									 status, last_update_date, security_sub_type_id, interface_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR SHARE_SECURITY_SEQ), 2)) AS BIGINT),
			cms_collateral_id, security_id, 'SIBS', 'ACTIVE', CURRENT_TIMESTAMP, cms_security_subtype_id, 'CO008'
     FROM cms_security sec, MIG_CO008_MS t
     WHERE NOT EXISTS (SELECT 1 FROM cms_security_source ss
						WHERE ss.source_security_id = security_id 
						AND (ss.source_id = 'SIBS' 
	  					OR ss.SOURCE_ID = 'SMF') fetch first row only) 
    AND is_valid = 'Y'
    AND sec.sci_security_dtl_id = t.security_id
    AND sec.source_id = 'SIBS');

	CALL "LOG_PROC_TIME"('MIG_RUN_CO008_MS', 'SIBS', 8);
	commit;
	

	----------------------------
	-- Begin Insertion
	-- cms_charge_detail
	----------------------------
	INSERT INTO cms_charge_detail (charge_detail_id, 
            cms_collateral_id, security_rank, charge_type, status, source_id, cms_ref_id, CHARGE_NATURE, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT),
			t.cms_act_col_id, 1, charge_type, 'ACTIVE', COALESCE(t.SOURCE_ID, 'SIBS'),
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT), CHARGE_NATURE, CURRENCY, CHARGE_AMOUNT
	   FROM MIG_CO008_MS t
	  WHERE t.is_valid = 'Y');
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO008_MS', 'SIBS', 9);
	commit;
	    
	----------------------------
	-- Begin Insertion
	-- cms_stage_charge_detail
	----------------------------
	INSERT INTO cms_stage_charge_detail (charge_detail_id, 
            cms_collateral_id, security_rank, charge_type, status, source_id, cms_ref_id, CHARGE_NATURE, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT),
			t.cms_stg_col_id, 1, t.charge_type, 'ACTIVE', COALESCE(t.SOURCE_ID, 'SIBS'), act.cms_ref_id, t.CHARGE_NATURE, t.CURRENCY, t.CHARGE_AMOUNT
	   from MIG_CO008_MS t, cms_charge_detail act
        WHERE t.CMS_ACT_COL_ID = act.cms_collateral_id
	    AND (act.source_id = 'SIBS' 
	  	OR act.SOURCE_ID = 'SMF') 
	    AND t.is_valid = 'Y');
            

	CALL "LOG_PROC_TIME"('MIG_RUN_CO008_MS', 'SIBS', 10);
	commit;
    
	-------------------------------------------
	-- Populate ear mark group for predeal module
	-------------------------------------------
	update cms_earmark_group eg
	set eg.TOTAL_NO_OF_UNITS = (select total_units from
		(select feed.feed_id, coalesce(sum(item.NO_OF_UNITS), 0) as total_units
					from cms_feed_group grp, cms_price_feed feed
							left outer join cms_portfolio_item item on item.STOCK_CODE = feed.stock_code
									and item.type = 'S'
									and (item.source_id = 'SIBS' 
	  									OR item.SOURCE_ID = 'SMF')
									and status = 'ACTIVE'
							left outer join cms_security s on s.cms_collateral_id = item.cms_collateral_id
									and s.security_sub_type_id in ('MS600', 'MS601', 'MS605', 'MS606')
					where feed.FEED_GROUP_ID = grp.FEED_GROUP_ID
					and grp.GROUP_TYPE = 'STOCK'
					group by feed.FEED_ID) stock_feed
					where stock_feed.feed_id = eg.FEED_ID)
	where eg.SOURCE_SYSTEM_ID = 'SIBS';
	
	COMMIT;
    
  INSERT INTO CMS_EARMARK_GROUP (
          EARMARK_GROUP_ID,
          FEED_ID,
          SOURCE_SYSTEM_ID,
          TOTAL_NO_OF_UNITS)
          (SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_EARMARK_GROUP_SEQ), 2)) as BIGINT),
          feed_id, 'SIBS', total_units
          from (select feed.feed_id, coalesce(sum(item.NO_OF_UNITS), 0) as total_units
              from cms_feed_group grp, cms_price_feed feed
                  left outer join cms_portfolio_item item on item.STOCK_CODE = feed.stock_code
                      and item.type = 'S'
                      and (item.source_id = 'SIBS' 
	  			OR item.SOURCE_ID = 'SMF')
                      and status = 'ACTIVE'
                  left outer join cms_security s on s.cms_collateral_id = item.cms_collateral_id
                      and s.security_sub_type_id in ('MS600', 'MS601', 'MS605', 'MS606')
              where feed.FEED_GROUP_ID = grp.FEED_GROUP_ID
              and grp.GROUP_TYPE = 'STOCK'
              group by feed.FEED_ID) stock_feed
          where not exists (select 1 from cms_earmark_group gp
                          where gp.feed_id = stock_feed.feed_id
                          and (gp.SOURCE_SYSTEM_ID = 'SIBS' 
	  			OR gp.SOURCE_SYSTEM_ID = 'SMF') fetch first row only));

	CALL "LOG_PROC_TIME"('MIG_RUN_CO008_MS', 'SIBS', 0);
END
@


CREATE PROCEDURE MIG_RUN_CO009_PT
	LANGUAGE SQL
BEGIN

	CALL "LOG_PROC_TIME"('MIG_RUN_CO009_PT', 'SIBS', 1);
	commit;

	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-------------------------------------
	INSERT INTO cms_security (
		cms_collateral_id, sci_security_dtl_id, sci_security_currency, sci_orig_security_currency,
		security_location, security_organisation, custodian_type, security_custodian, security_maturity_date,
		is_legal_enforce, is_legal_enforce_date, security_perfection_date, security_sub_type_id, 
		sci_security_type_value, sci_security_subtype_value, source_security_type, source_security_sub_type, collateral_status,
		version_time, status, source_id, is_migrated_ind, sci_reference_note, EXCHANGE_CONTROL_OBTAINED)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
		security_id, currency, currency, loc_country, loc_org_code, custodian_type, custodian,
		security_expiry_date, legal_enforceability, legal_enforceability_date, security_perfection_date,
		cms_security_subtype_id, substr(cms_security_subtype_id, 1, 2), cms_security_subtype_id, source_security_type, 
		source_security_sub_type, collateral_status, 0, 'ACTIVE', 'SIBS', 'Y', SECURITY_REF_NOTE, EXCHANGE_CONTROL_OBTAINED
	   FROM MIG_CO009_PT t
	  WHERE t.cms_act_col_id IS NULL
		AND t.is_valid = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CO009_PT', 'SIBS', 2);
	commit;
	
	--CALL RUNSTATS_HELPER('CMS_SECURITY', 'SECURITY_SUB_TYPE_ID LIKE STATISTICS');
	
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	--LOCK TABLE CMS_SECURITY IN SHARE MODE;
	UPDATE cms_security a SET (type_name, subtype_name) =
		(SELECT security_type_name, subtype_name 
		 FROM cms_security_sub_type
		 WHERE security_sub_type_id = a.security_sub_type_id)
  	WHERE EXISTS (SELECT '1' FROM MIG_CO009_PT
  			 WHERE a.sci_security_dtl_id = security_id
  			 AND is_valid = 'Y')
  	AND security_sub_type_id like 'PT%'
  	AND source_id = 'SIBS';
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO009_PT', 'SIBS', 3);
	commit;
	 
	-------------------------------------
	-- Actual Table
	-- CMS_PROPERTY
	-------------------------------------
	INSERT INTO cms_property (
		cms_collateral_id, sale_purchase_date, sale_purchase_value, title_type, 
        	master_title, master_title_number, title_number_prefix, title_number,
		lot_no, postcode, state, land_area, land_area_uom, builtup_area, builtup_area_uom, 
        	tenure, tenure_unit, quit_rent_paid, STD_QUIT_RENT, QUIT_RENT_PAYMENT_DATE,        
        	property_usage, abandoned_project, property_completion_status,
		property_type, 
        	auctioneer, auction_price, auction_date, chattel_sold_date, 
        	pri_caveat_guarantee_date, amount_redeem, unit_price, 
        	property_address, property_address_2, property_address_3,         
        	env_risky_status, ASSESSMENT_RATE, ASSESSMENT_PAYMENT_DATE, ASSESSMENT, INDEPENDENT_VALUER_FLAG)
	(SELECT 
		sec.cms_collateral_id, sale_purchase_date, sale_purchase_agreement_value, title_type, 
        	MASTER_TITLE, MASTER_TITLE_NUMBER, title_number_prefix, title_number,
		lot_no, post_code, state_code, land_area, land_area_uom, built_up_area, build_area_uom,
        	tenure, tenure_unit, quit_rent_amt_paid, quit_rent_receipt, QUIT_RENT_PAYMENT_DATE,
        	property_usage, abandoned_project, property_completion_status, 
		property_type_code, 
        	auctioneer, auction_price, auction_date, chattel_sold_date, 
        	pri_caveat_guarantee_date, amount_redeem, unit_price, 
        	property_address, property_address_2, property_address_3,         
        	'N', ASSESSMENT_RATE, ASSESSMENT_PAYMENT_DATE, ASSESSMENT, INDEPENDENT_VALUER_FLAG
    	from cms_security sec, MIG_CO009_PT t
    	WHERE sec.sci_security_dtl_id = t.security_id
    	AND source_id = 'SIBS' 
    	AND t.is_valid = 'Y'
    	AND t.cms_act_col_id IS NULL);

	CALL "LOG_PROC_TIME"('MIG_RUN_CO009_PT', 'SIBS', 4);
	commit;

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-------------------------------------
	INSERT INTO cms_stage_security (
		cms_collateral_id, sci_security_dtl_id,	sci_security_currency, sci_orig_security_currency, security_location,
		security_organisation, custodian_type, security_custodian, security_maturity_date, is_legal_enforce,
		is_legal_enforce_date, security_perfection_date, security_sub_type_id, sci_security_type_value, 
		sci_security_subtype_value, source_security_type, source_security_sub_type, collateral_status, version_time, 
		status, source_id, sci_reference_note, EXCHANGE_CONTROL_OBTAINED)        
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
		security_id, currency,currency,loc_country, loc_org_code, custodian_type, custodian,
		security_expiry_date, legal_enforceability, legal_enforceability_date, security_perfection_date,
		cms_security_subtype_id, substr(cms_security_subtype_id, 1, 2), cms_security_subtype_id, source_security_type,
		source_security_sub_type, collateral_status, 0, 'ACTIVE', 'SIBS', SECURITY_REF_NOTE, EXCHANGE_CONTROL_OBTAINED
	FROM MIG_CO009_PT t
	WHERE t.cms_stg_col_id IS NULL
	AND t.is_valid = 'Y');
	  					   
	CALL "LOG_PROC_TIME"('MIG_RUN_CO009_PT', 'SIBS', 5);
	commit;
								 
	--CALL RUNSTATS_HELPER('CMS_STAGE_SECURITY', 'SECURITY_SUB_TYPE_ID LIKE STATISTICS ');
	
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	--LOCK TABLE CMS_STAGE_SECURITY IN SHARE MODE;
	UPDATE cms_stage_security a SET (type_name, subtype_name) =
		(SELECT security_type_name, subtype_name 
		 FROM cms_security_sub_type
		 WHERE security_sub_type_id = a.security_sub_type_id)
	WHERE EXISTS (SELECT '1' FROM MIG_CO009_PT
  			 WHERE a.sci_security_dtl_id = security_id
        	         AND is_valid = 'Y')
	AND security_sub_type_id like 'PT%'
  	AND source_id = 'SIBS';

	CALL "LOG_PROC_TIME"('MIG_RUN_CO009_PT', 'SIBS', 6);
	commit;
	
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_PROPERTY
	-------------------------------------
	INSERT INTO cms_stage_property(
		cms_collateral_id, sale_purchase_date, sale_purchase_value, 
        	title_type, master_title, master_title_number, title_number_prefix, title_number,
		lot_no, postcode, state, land_area, land_area_uom, builtup_area, builtup_area_uom,
        	tenure, tenure_unit, quit_rent_paid, STD_QUIT_RENT, QUIT_RENT_PAYMENT_DATE,
        	property_usage, abandoned_project, property_completion_status, 
        	property_type, 
        	auctioneer, auction_price, auction_date, chattel_sold_date, 
        	pri_caveat_guarantee_date, amount_redeem, unit_price, 
        	property_address, property_address_2, property_address_3,         		
		env_risky_status, ASSESSMENT_RATE, ASSESSMENT_PAYMENT_DATE, ASSESSMENT, INDEPENDENT_VALUER_FLAG)        
	(SELECT 
		sec.cms_collateral_id, sale_purchase_date, sale_purchase_agreement_value, 
        	title_type, master_title, master_title_number, title_number_prefix, title_number, 
		lot_no, post_code, state_code, land_area, land_area_uom, built_up_area, build_area_uom,
        	tenure, tenure_unit, quit_rent_amt_paid, quit_rent_receipt, QUIT_RENT_PAYMENT_DATE,
		property_usage, abandoned_project, property_completion_status, 
        	property_type_code, 
		auctioneer, auction_price, auction_date, chattel_sold_date, 
        	pri_caveat_guarantee_date, amount_redeem, unit_price, 
        	property_address, property_address_2, property_address_3, 
		'N', ASSESSMENT_RATE, ASSESSMENT_PAYMENT_DATE, ASSESSMENT, INDEPENDENT_VALUER_FLAG
	from cms_stage_security sec, MIG_CO009_PT t
	WHERE sec.sci_security_dtl_id = t.security_id 
	AND t.is_valid = 'Y'
	AND source_id = 'SIBS'
	AND t.cms_stg_col_id IS NULL);
	    				 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO009_PT', 'SIBS', 7);
	commit;
							 
 	-------------------------------------
	-- Mig Table
	-- MIG_CO001_AB
	-- Update actual and staging collateral id
	-------------------------------------	

	update MIG_CO009_PT 
	set cms_act_col_id = (select cms_collateral_id
		from cms_security
		where sci_security_dtl_id = security_id
		--and security_sub_type_id like 'PT%'
		and source_id = 'SIBS')
	where is_valid = 'Y';
	
	COMMIT;
	
	update MIG_CO009_PT 
	set cms_stg_col_id = (select cms_collateral_id
		from cms_stage_security
		where sci_security_dtl_id = security_id
		--and security_sub_type_id like 'PT%'
		and source_id = 'SIBS')
	where is_valid = 'Y';	
	
    	--UPDATE MIG_CO009_PT a
    	--    SET (CMS_ACT_COL_ID, CMS_STG_COL_ID) = 
    	--(SELECT act.CMS_COLLATERAL_ID, stg.CMS_COLLATERAL_ID
    	-- FROM CMS_SECURITY act, CMS_STAGE_SECURITY stg
    	-- WHERE act.sci_security_dtl_id = a.security_id
    	-- AND stg.sci_security_dtl_id = a.security_id
    	-- AND act.SCI_SECURITY_SUBTYPE_VALUE like 'PT%'
    	-- AND stg.SCI_SECURITY_SUBTYPE_VALUE like 'PT%'
    	-- AND a.is_valid = 'Y');
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO009_PT', 'SIBS', 8);
	commit;

	----------------------------
	-- Begin Insertion
	-- cms_security_source
	----------------------------
	INSERT INTO cms_security_source (cms_security_source_id, cms_collateral_id, source_security_id, source_id, 
					 status, last_update_date, security_sub_type_id, interface_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR SHARE_SECURITY_SEQ), 2)) AS BIGINT),
			cms_collateral_id, security_id, 'SIBS', 'ACTIVE', CURRENT_TIMESTAMP, cms_security_subtype_id,
			'CO009'
	FROM cms_security sec, MIG_CO009_PT t
	WHERE NOT EXISTS (SELECT 1 FROM cms_security_source 
			 WHERE source_security_id = security_id 
		   	 AND source_id = 'SIBS') 
	AND is_valid = 'Y'
	AND sec.sci_security_dtl_id = t.security_id
	AND source_id = 'SIBS');
	
			 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO009_PT', 'SIBS', 0);
	
END@


CREATE PROCEDURE MIG_RUN_CO010_GT
	LANGUAGE SQL
BEGIN

	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 1);
	commit;
	
	--------------------------------------------
	-- Update security type and subtype id first
	-- get from common code
	--------------------------------------------

-- 	UPDATE MIG_CO010_GT a 
-- 	   SET (cms_security_type_id) =
-- 	(SELECT substr(cms_security_subtype_id, 1, 2)
-- 	   FROM MIG_CO010_GT);
	   
	UPDATE MIG_CO010_GT  
	   SET (cms_security_type_id) =
	substr(cms_security_subtype_id, 1, 2)
	  where is_valid = 'Y';	   
		
	  
	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 2);
	commit;
	  
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-------------------------------------
	INSERT INTO cms_security (cms_collateral_id, 
        sci_security_dtl_id, sci_reference_note, sci_security_currency, sci_orig_security_currency,
		security_location, security_organisation, custodian_type, security_maturity_date, 
        is_legal_enforce, is_legal_enforce_date,security_perfection_date, security_sub_type_id, 
        sci_security_type_value, sci_security_subtype_value, source_security_type, source_security_sub_type,
        borrower_dependency, security_custodian, exchange_control_obtained,  
        collateral_status, version_time, status, source_id, is_migrated_ind)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
		security_id, security_ref_note, currency, currency, 
        loc_country, loc_org_code, custodian_type, security_expiry_date,
		legal_enforceability, legal_enforceability_date, security_perfection_date, cms_security_subtype_id, 
		cms_security_type_id, cms_security_subtype_id, source_security_type, source_security_sub_type, 
        borrower_dependency, security_custodian, exchange_control_obtained, 
        collateral_status, 0, 'ACTIVE', 'SIBS', 'Y'
	   FROM MIG_CO010_GT t
	  WHERE cms_act_col_id IS NULL
	  	AND t.is_valid = 'Y');
	  	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 3);
	commit;
    
    
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	LOCK TABLE CMS_SECURITY IN SHARE MODE;
	UPDATE cms_security a SET (type_name, subtype_name) =
		(SELECT security_type_name, subtype_name 
		 FROM cms_security_sub_type
		 WHERE security_sub_type_id = a.security_sub_type_id)
    	WHERE EXISTS (SELECT '1' FROM MIG_CO010_GT
  		  WHERE a.sci_security_dtl_id = security_id
  		  AND a.cms_collateral_id = cms_act_col_id
  		  AND is_valid = 'Y')
	AND security_sub_type_id IN ('GT400','GT402','GT405','GT406','GT407','GT408','GT409','GT410')
    	AND source_id = 'SIBS';
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 4);
	commit;
	 
	-------------------------------------
	-- Actual Table
	-- CMS_GUARANTEE
	-------------------------------------
	INSERT INTO cms_guarantee(
		cms_collateral_id, description, reference_no, guarantee_amt, currency_code, guarantee_date,
        	beneficiary_name, issuing_bank, issuing_bank_country)
	(SELECT 
		sec.cms_collateral_id, guarantees_desc,	ref_no,	guarantee_amt, sec.sci_security_currency, guarantee_date,
		beneficiary_name, issuing_bank, issuing_bank_country
	FROM cms_security sec, MIG_CO010_GT t
	WHERE sec.sci_security_dtl_id = t.security_id
	AND sec.source_id = 'SIBS' 
	AND t.is_valid = 'Y'
	AND t.cms_act_col_id IS NULL);
	    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 5);
	commit;
	 
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-------------------------------------
	INSERT INTO cms_stage_security (cms_collateral_id, 
        	sci_security_dtl_id, sci_reference_note, sci_security_currency, sci_orig_security_currency, 
        	security_location,security_organisation, custodian_type, security_maturity_date, 
        	is_legal_enforce, is_legal_enforce_date,security_perfection_date, security_sub_type_id, 
        	sci_security_type_value, sci_security_subtype_value, source_security_type, source_security_sub_type,	
        	borrower_dependency, security_custodian, exchange_control_obtained, 
        	collateral_status, version_time, status, source_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
		security_id, security_ref_note,	currency, currency, 
        	loc_country, loc_org_code, custodian_type, security_expiry_date,
		legal_enforceability, legal_enforceability_date, security_perfection_date, cms_security_subtype_id, 
		cms_security_type_id, cms_security_subtype_id, source_security_type, source_security_sub_type,
		borrower_dependency, security_custodian, exchange_control_obtained, 
        	collateral_status, 0, 'ACTIVE', 'SIBS'
	FROM MIG_CO010_GT t
	WHERE cms_stg_col_id IS NULL 
	AND t.is_valid = 'Y');
								 

    	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 6);
	commit;

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	LOCK TABLE CMS_STAGE_SECURITY IN SHARE MODE;
	UPDATE cms_stage_security a SET (type_name, subtype_name) =
		(SELECT security_type_name, subtype_name 
		 FROM cms_security_sub_type
		 WHERE security_sub_type_id = a.security_sub_type_id)
	WHERE EXISTS (SELECT '1' FROM MIG_CO010_GT
  			WHERE a.sci_security_dtl_id = security_id
  			AND a.cms_collateral_id = cms_stg_col_id
  			AND is_valid = 'Y')
	AND security_sub_type_id IN ('GT400','GT402','GT405','GT406','GT407','GT408','GT409','GT410')
 	AND source_id = 'SIBS';

	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 7);
	commit;

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_GUARANTEE
	-------------------------------------
	INSERT INTO cms_stage_guarantee(
		cms_collateral_id, description, reference_no, guarantee_amt, currency_code, guarantee_date,
        	beneficiary_name, issuing_bank, issuing_bank_country)
	(SELECT 
		sec.cms_collateral_id, guarantees_desc, ref_no, guarantee_amt, sec.sci_security_currency, guarantee_date,
        	beneficiary_name, issuing_bank, issuing_bank_country
	from cms_stage_security sec, MIG_CO010_GT t
	WHERE sec.sci_security_dtl_id = t.security_id
	AND sec.source_id = 'SIBS' 
	AND t.is_valid = 'Y'
	AND t.cms_stg_col_id IS NULL);
	    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 8);
	commit;
    
	----------------------------
	-- Begin Insertion
	-- cms_security_source
	----------------------------
	INSERT INTO cms_security_source (cms_security_source_id, cms_collateral_id, source_security_id, source_id, 
					 status, last_update_date, security_sub_type_id, interface_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR SHARE_SECURITY_SEQ), 2)) AS BIGINT),
			cms_collateral_id, security_id, 'SIBS', 'ACTIVE', CURRENT_TIMESTAMP, cms_security_subtype_id,
			'CO010'
	FROM cms_security sec, MIG_CO010_GT t
	WHERE NOT EXISTS (SELECT 1 FROM cms_security_source 
			 WHERE source_security_id = security_id 
		         AND source_id = 'SIBS') 
	AND t.is_valid = 'Y'
	AND sec.sci_security_dtl_id = t.security_id
	AND sec.source_id = 'SIBS');

	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 9);
	commit;
    
	----------------------------
	-- Begin Update
	-- set collateral id back to temp table
	----------------------------
	
	update MIG_CO010_GT 
	set cms_act_col_id = (select cms_collateral_id
		from cms_security
		where sci_security_dtl_id = security_id
		and source_id = 'SIBS')
	where is_valid = 'Y';
	
	COMMIT;
	
	update MIG_CO010_GT 
	set cms_stg_col_id = (select cms_collateral_id
		from cms_stage_security
		where sci_security_dtl_id = security_id
		and source_id = 'SIBS')
	where is_valid = 'Y';	
	
--    	UPDATE MIG_CO010_GT a
--        SET (CMS_ACT_COL_ID, CMS_STG_COL_ID) = 
--    		(SELECT act.CMS_COLLATERAL_ID, stg.CMS_COLLATERAL_ID
--     		FROM CMS_SECURITY act, CMS_STAGE_SECURITY stg
--     		WHERE act.sci_security_dtl_id = a.security_id
--     		AND stg.sci_security_dtl_id = a.security_id
--     		AND a.is_valid = 'Y');
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 10);
	commit;
    
	----------------------------
	-- Begin Insertion
	-- cms_charge_detail
	----------------------------
	INSERT INTO cms_charge_detail (charge_detail_id, 
            cms_collateral_id, security_rank, CHARGE_TYPE, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT, status, source_id, cms_ref_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT),
			t.cms_act_col_id, 1, CHARGE_TYPE, t.CURRENCY, t.GUARANTEE_AMT, 'ACTIVE', 'SIBS',
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT)
	   FROM MIG_CO010_GT t
	  WHERE t.is_valid = 'Y');
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 11);
	commit;
	
    
	INSERT INTO cms_stage_charge_detail (charge_detail_id, 
            cms_collateral_id, security_rank, CHARGE_TYPE, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT, status, source_id, cms_ref_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT),
			t.cms_stg_col_id, 1, t.CHARGE_TYPE, t.CURRENCY, t.GUARANTEE_AMT, 'ACTIVE', 'SIBS', act.cms_ref_id
	   from MIG_CO010_GT t, cms_charge_detail act
        WHERE t.CMS_ACT_COL_ID = act.cms_collateral_id
	    AND act.source_id = 'SIBS' 
	    AND t.is_valid = 'Y');
        
	CALL "LOG_PROC_TIME"('MIG_RUN_CO010_GT', 'SIBS', 0);
	
END@

CREATE PROCEDURE MIG_RUN_CO011_OT
	LANGUAGE SQL
BEGIN

	CALL "LOG_PROC_TIME"('MIG_RUN_CO011_OT', 'SIBS', 1);
	commit;

	--------------------------------------------
	-- Update security type and subtype id first
	-- get from common code
	--------------------------------------------

	UPDATE MIG_CO011_OT a 
	SET (CMS_SECURITY_TYPE_ID, CMS_SECURITY_SUBTYPE_ID) =
	(SELECT substr(REF_ENTRY_CODE, 1, 2), REF_ENTRY_CODE
	 FROM COMMON_CODE_CATEGORY_ENTRY 
       	 WHERE CATEGORY_CODE = a.SOURCE_SEC_CAT
         AND ENTRY_CODE = a.SOURCE_SECURITY_SUB_TYPE);
		
	  
	CALL "LOG_PROC_TIME"('MIG_RUN_CO011_OT', 'SIBS', 2);
	commit;
	  
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-------------------------------------
	INSERT INTO CMS_SECURITY (CMS_COLLATERAL_ID, 
        	SCI_SECURITY_DTL_ID, SCI_REFERENCE_NOTE, SCI_SECURITY_CURRENCY, SCI_ORIG_SECURITY_CURRENCY,
		SECURITY_LOCATION, SECURITY_ORGANISATION, CUSTODIAN_TYPE, SECURITY_CUSTODIAN, BORROWER_DEPENDENCY, 
		IS_LEGAL_ENFORCE, IS_LEGAL_ENFORCE_DATE, SECURITY_MATURITY_DATE, IS_CGC_PLEDGED, 
        	SECURITY_SUB_TYPE_ID, SCI_SECURITY_TYPE_VALUE, SCI_SECURITY_SUBTYPE_VALUE, SOURCE_SECURITY_TYPE, SOURCE_SECURITY_SUB_TYPE,
        	COLLATERAL_STATUS, VERSION_TIME, STATUS, SOURCE_ID, IS_MIGRATED_IND)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COLLATERAL_SEQ), 2)) as BIGINT),
		SECURITY_ID, SECURITY_REF_NOTE, CURRENCY, CURRENCY, 
        	LOC_COUNTRY, LOC_ORG_CODE, CUSTODIAN_TYPE, SECURITY_CUSTODIAN, BORROWER_DEPENDENCY, 
		LEGAL_ENFORCEABILITY, LEGAL_ENFORCEABILITY_DATE, SECURITY_MATURITY_DATE, IS_CGC_PLEDGED, 
		CMS_SECURITY_SUBTYPE_ID, CMS_SECURITY_TYPE_ID, CMS_SECURITY_SUBTYPE_ID, SOURCE_SECURITY_TYPE, SOURCE_SECURITY_SUB_TYPE, 
        	COLLATERAL_STATUS, 0, 'ACTIVE', 'SIBS', 'Y'
	FROM MIG_CO011_OT t
	WHERE CMS_ACT_COL_ID IS NULL
	AND t.IS_VALID = 'Y');
	  	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO011_OT', 'SIBS', 3);
	commit;
    
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	LOCK TABLE CMS_SECURITY IN SHARE MODE;
	UPDATE CMS_SECURITY a SET (TYPE_NAME, SUBTYPE_NAME) =
		(SELECT SECURITY_TYPE_NAME, SUBTYPE_NAME 
		 FROM CMS_SECURITY_SUB_TYPE
		 WHERE SECURITY_SUB_TYPE_ID = a.SECURITY_SUB_TYPE_ID)
    	WHERE EXISTS (SELECT '1' FROM MIG_CO011_OT
  			  WHERE a.SCI_SECURITY_DTL_ID = SECURITY_ID
  			  AND IS_VALID = 'Y')
	AND SECURITY_SUB_TYPE_ID = 'OT900'
    	AND SOURCE_ID = 'SIBS';
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO011_OT', 'SIBS', 4);
	commit;
	 
	-------------------------------------
	-- Actual Table
	-- CMS_GUARANTEE
	-------------------------------------
	INSERT INTO CMS_OTHERS(CMS_COLLATERAL_ID, ENV_RISKY_STATUS, DESCRIPTION_OTHERS, IS_PHY_INSPECT, NUMBER_OF_UNITS)
	(SELECT SEC.CMS_COLLATERAL_ID, ENV_RISKY_STATUS, DESCRIPTION_OTHERS, IS_PHY_INSPECT, NUMBER_OF_UNITS
	 FROM CMS_SECURITY sec, MIG_CO011_OT t
	 WHERE sec.SCI_SECURITY_DTL_ID = t.SECURITY_ID
	 AND sec.SOURCE_ID = 'SIBS' 
	 AND t.IS_VALID = 'Y'
	 AND t.CMS_ACT_COL_ID IS NULL);
	    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO011_OT', 'SIBS', 5);
	commit;
	 
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-------------------------------------
	INSERT INTO CMS_STAGE_SECURITY (CMS_COLLATERAL_ID, 
        	SCI_SECURITY_DTL_ID, SCI_REFERENCE_NOTE, SCI_SECURITY_CURRENCY, SCI_ORIG_SECURITY_CURRENCY,
		SECURITY_LOCATION, SECURITY_ORGANISATION, CUSTODIAN_TYPE, SECURITY_CUSTODIAN, BORROWER_DEPENDENCY, 
		IS_LEGAL_ENFORCE, IS_LEGAL_ENFORCE_DATE, SECURITY_MATURITY_DATE, IS_CGC_PLEDGED, 
        	SECURITY_SUB_TYPE_ID, SCI_SECURITY_TYPE_VALUE, SCI_SECURITY_SUBTYPE_VALUE, SOURCE_SECURITY_TYPE, SOURCE_SECURITY_SUB_TYPE,
        	COLLATERAL_STATUS, VERSION_TIME, STATUS, SOURCE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
		SECURITY_ID, SECURITY_REF_NOTE, CURRENCY, CURRENCY, 
		LOC_COUNTRY, LOC_ORG_CODE, CUSTODIAN_TYPE, SECURITY_CUSTODIAN, BORROWER_DEPENDENCY, 
		LEGAL_ENFORCEABILITY, LEGAL_ENFORCEABILITY_DATE, SECURITY_MATURITY_DATE, IS_CGC_PLEDGED, 
		CMS_SECURITY_SUBTYPE_ID, CMS_SECURITY_TYPE_ID, CMS_SECURITY_SUBTYPE_ID, SOURCE_SECURITY_TYPE, SOURCE_SECURITY_SUB_TYPE, 
		COLLATERAL_STATUS, 0, 'ACTIVE', 'SIBS'
	FROM MIG_CO011_OT t
	WHERE CMS_STG_COL_ID IS NULL 
	AND t.IS_VALID = 'Y');
								 

    	CALL "LOG_PROC_TIME"('MIG_RUN_CO011_OT', 'SIBS', 6);
	commit;

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	LOCK TABLE CMS_STAGE_SECURITY IN SHARE MODE;
	UPDATE CMS_STAGE_SECURITY a SET (TYPE_NAME, SUBTYPE_NAME) =
		(SELECT SECURITY_TYPE_NAME, SUBTYPE_NAME 
	  	 FROM CMS_SECURITY_SUB_TYPE
	  	 WHERE SECURITY_SUB_TYPE_ID = a.SECURITY_SUB_TYPE_ID)
  	WHERE EXISTS (SELECT 1 FROM MIG_CO011_OT
  			WHERE a.SCI_SECURITY_DTL_ID = SECURITY_ID
  			AND IS_VALID = 'Y' fetch first row only)
	AND SECURITY_SUB_TYPE_ID = 'OT900'
 	AND SOURCE_ID = 'SIBS';

	CALL "LOG_PROC_TIME"('MIG_RUN_CO011_OT', 'SIBS', 7);
	commit;

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_OTHERS
	-------------------------------------
	INSERT INTO CMS_STAGE_OTHERS(CMS_COLLATERAL_ID, ENV_RISKY_STATUS, DESCRIPTION_OTHERS, IS_PHY_INSPECT, NUMBER_OF_UNITS)
	(SELECT sec.CMS_COLLATERAL_ID, ENV_RISKY_STATUS, DESCRIPTION_OTHERS, IS_PHY_INSPECT, NUMBER_OF_UNITS
	 FROM CMS_STAGE_SECURITY sec, MIG_CO011_OT t
	 WHERE sec.SCI_SECURITY_DTL_ID = t.SECURITY_ID
	 AND sec.SOURCE_ID = 'SIBS' 
	 AND t.IS_VALID = 'Y'
	 AND t.CMS_STG_COL_ID IS NULL);
	    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO011_OT', 'SIBS', 8);
	commit;
    
	----------------------------
	-- Begin Update
	-- set collateral id back to temp table
	----------------------------
-- 	LOCK TABLE MIG_CO011_OT IN SHARE MODE;
-- 	UPDATE MIG_CO011_OT a
-- 	SET (CMS_ACT_COL_ID, CMS_STG_COL_ID) = 
-- 		(SELECT act.CMS_COLLATERAL_ID, stg.CMS_COLLATERAL_ID
-- 		FROM CMS_SECURITY act, CMS_STAGE_SECURITY stg
-- 		WHERE act.sci_security_dtl_id = a.security_id
-- 		AND stg.sci_security_dtl_id = a.security_id
-- 		AND a.is_valid = 'Y');
		
	update MIG_CO011_OT
	set cms_act_col_id = (select cms_collateral_id
			from cms_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';
		
	commit;
	
	LOCK TABLE MIG_CO011_OT IN SHARE MODE;
	update MIG_CO011_OT
	set cms_stg_col_id = (select cms_collateral_id
			from cms_stage_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';	      
     
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO011_OT', 'SIBS', 9);
	commit;
    
	----------------------------
	-- Begin Insertion
	-- cms_security_source
	----------------------------
	INSERT INTO CMS_SECURITY_SOURCE (CMS_SECURITY_SOURCE_ID, CMS_COLLATERAL_ID, SOURCE_SECURITY_ID, SOURCE_ID, 
					STATUS, LAST_UPDATE_DATE, SECURITY_SUB_TYPE_ID, INTERFACE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR SHARE_SECURITY_SEQ), 2)) AS BIGINT),
			CMS_COLLATERAL_ID, SECURITY_ID, 'SIBS', 'ACTIVE', CURRENT_TIMESTAMP, CMS_SECURITY_SUBTYPE_ID,
			'CO011'
	 FROM CMS_SECURITY sec, MIG_CO011_OT t
	 WHERE NOT EXISTS (SELECT 1 FROM CMS_SECURITY_SOURCE 
			   WHERE SOURCE_SECURITY_ID = SECURITY_ID 
			   AND SOURCE_ID = 'SIBS') 
	 AND t.IS_VALID = 'Y'
	 AND sec.SCI_SECURITY_DTL_ID = t.SECURITY_ID
	 AND sec.SOURCE_ID = 'SIBS');

	CALL "LOG_PROC_TIME"('MIG_RUN_CO011_OT', 'SIBS', 0);
	
END@

CREATE PROCEDURE MIG_RUN_CO012_IN
	LANGUAGE SQL
BEGIN

	CALL "LOG_PROC_TIME"('MIG_RUN_CO012_IN', 'SIBS', 1);
	commit;
    
	CALL RUNSTATS_HELPER('MIG_CO012_IN', 'IS_VALID, SECURITY_ID');
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-------------------------------------
	INSERT INTO cms_security (
		cms_collateral_id, 
		SCI_SECURITY_DTL_ID,
		SCI_REFERENCE_NOTE,
		SCI_SECURITY_CURRENCY,
		SCI_ORIG_SECURITY_CURRENCY,
		SECURITY_LOCATION,
		SECURITY_ORGANISATION,
		CUSTODIAN_TYPE,
        	SECURITY_CUSTODIAN, 
        	IS_LEGAL_ENFORCE,
        	IS_LEGAL_ENFORCE_DATE,
		security_sub_type_id, 
		sci_security_type_value, 
		SCI_SECURITY_SUBTYPE_VALUE, 
		source_security_type,
		source_security_sub_type,
        	COLLATERAL_STATUS,
		version_time,
		status,
		source_id,
		is_migrated_ind)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
		SECURITY_ID,
		SECURITY_REF_NOTE,
		CURRENCY,
		CURRENCY,
		LOC_COUNTRY,
		LOC_ORG_CODE,
		CUSTODIAN_TYPE,
        	SECURITY_CUSTODIAN,
        	IS_LEGAL_ENFORCE, 
        	IS_LEGAL_ENFORCE_DATE,
		cms_security_subtype_id, 
		substr(cms_security_subtype_id, 1, 2), 
		cms_security_subtype_id,
		SOURCE_SECURITY_TYPE,
		SOURCE_SECURITY_SUB_TYPE,
        	COLLATERAL_STATUS,
		0,
		'ACTIVE',
		'SIBS',
		'Y'
    	FROM MIG_CO012_IN t
		WHERE IS_VALID = 'Y');
--    	WHERE NOT EXISTS (SELECT 1 FROM cms_security t
--	  		WHERE sci_security_dtl_id = t.security_id
--	  		AND source_id = 'SIBS' fetch first row only) 
--    	AND t.is_valid = 'Y');
	  	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO012_IN', 'SIBS', 2);
	commit;
    
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	
	UPDATE cms_security a SET (type_name, subtype_name) =
	(SELECT security_type_name, subtype_name 
	   FROM cms_security_sub_type
	   WHERE security_sub_type_id = a.security_sub_type_id)
    	WHERE source_id = 'SIBS'
    	AND type_name IS NULL;
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO012_IN', 'SIBS', 3);
	commit;
    
	update MIG_CO012_IN
	set cms_act_col_id = (select cms_collateral_id
			from cms_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';
		
	commit;
	
	-------------------------------------
	-- Actual Table
	-- CMS_INSURANCE
	-------------------------------------
--	INSERT INTO cms_insurance (cms_collateral_id)
--	(SELECT cms_collateral_id
--	  FROM cms_security sec, MIG_CO012_IN t
--	  WHERE sci_security_dtl_id = t.security_id
--	  AND is_valid = 'Y'
--	  AND source_id = 'SIBS'
--	  AND NOT EXISTS (SELECT 1 FROM cms_insurance
--	  		 WHERE cms_collateral_id = sec.cms_collateral_id));

	INSERT INTO CMS_INSURANCE(CMS_COLLATERAL_ID, INSURED_AMOUNT)
	(SELECT CMS_ACT_COL_ID, 0 
	FROM MIG_CO012_IN
	WHERE IS_VALID = 'Y');
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO012_IN', 'SIBS', 4);
	commit;
    
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-------------------------------------
	INSERT INTO cms_stage_security (
		cms_collateral_id, 
		SCI_SECURITY_DTL_ID,
		SCI_REFERENCE_NOTE,
		SCI_SECURITY_CURRENCY,
		SCI_ORIG_SECURITY_CURRENCY,
		SECURITY_LOCATION,
		SECURITY_ORGANISATION,
		CUSTODIAN_TYPE,
        	SECURITY_CUSTODIAN, 
        	IS_LEGAL_ENFORCE,
        	IS_LEGAL_ENFORCE_DATE,
        	security_sub_type_id, 
		sci_security_type_value, 
		SCI_SECURITY_SUBTYPE_VALUE, 
		source_security_type,
		source_security_sub_type,
        	COLLATERAL_STATUS,
		version_time,
		status,
		source_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
		SECURITY_ID,
		SECURITY_REF_NOTE,
		CURRENCY,
		CURRENCY,
		LOC_COUNTRY,
		LOC_ORG_CODE,
		CUSTODIAN_TYPE,
        	SECURITY_CUSTODIAN,
        	IS_LEGAL_ENFORCE,
        	IS_LEGAL_ENFORCE_DATE,
		cms_security_subtype_id, 
		substr(cms_security_subtype_id, 1, 2),
		cms_security_subtype_id,
		SOURCE_SECURITY_TYPE,
		SOURCE_SECURITY_SUB_TYPE,
        	COLLATERAL_STATUS,
		0,
		'ACTIVE',
		'SIBS'
	FROM MIG_CO012_IN t
	WHERE IS_VALID = 'Y');
--	WHERE NOT EXISTS (SELECT 1 FROM cms_stage_security t
--			 WHERE sci_security_dtl_id = t.security_id
--			 AND source_id = 'SIBS' fetch first row only) 
--     	AND t.is_valid = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CO012_IN', 'SIBS', 5);
	commit;
    
	update MIG_CO012_IN
	set cms_stg_col_id = (select cms_collateral_id
			from cms_stage_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';	
	
	COMMIT;
	-------------------------------------
	-- Staging Table
	-- CMS_INSURANCE
	-------------------------------------	 
--	INSERT INTO cms_stage_insurance (cms_collateral_id)
--	(SELECT cms_collateral_id
--	 FROM cms_stage_security sec, MIG_CO012_IN t
 --        WHERE sci_security_dtl_id = t.security_id
--	 AND is_valid = 'Y'
--	 AND source_id = 'SIBS'
--	 AND NOT EXISTS (SELECT 1 FROM cms_stage_insurance
--	  		 WHERE cms_collateral_id = sec.cms_collateral_id));

	INSERT INTO CMS_STAGE_INSURANCE(CMS_COLLATERAL_ID, INSURED_AMOUNT)
	(SELECT CMS_STG_COL_ID, 0
	FROM MIG_CO012_IN
	WHERE IS_VALID = 'Y');
								 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO012_IN', 'SIBS', 6);
	commit;
    
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------	
	UPDATE cms_stage_security a SET (type_name, subtype_name) =
		(SELECT security_type_name, subtype_name 
        	FROM cms_security_sub_type
        	WHERE security_sub_type_id = a.security_sub_type_id)
     	WHERE source_id = 'SIBS'
	AND TYPE_NAME IS NULL;
							
	CALL "LOG_PROC_TIME"('MIG_RUN_CO012_IN', 'SIBS', 7);
	commit;
    
    	----------------------------
	-- Begin Insertion
	-- cms_security_source
	----------------------------
	INSERT INTO cms_security_source (cms_security_source_id, cms_collateral_id, source_security_id, source_id, 
									 status, last_update_date, security_sub_type_id, interface_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR SHARE_SECURITY_SEQ), 2)) AS BIGINT),
			cms_collateral_id, security_id, 'SIBS', 'ACTIVE', CURRENT_TIMESTAMP, cms_security_subtype_id, 'CO012'
    	FROM cms_security sec, MIG_CO012_IN t
    	WHERE NOT EXISTS (SELECT 1 FROM cms_security_source 
        	          WHERE source_security_id = security_id 
                       	  AND source_id = 'SIBS' fetch first row only) 
    	AND is_valid = 'Y'
    	AND sec.sci_security_dtl_id = t.security_id
    	AND source_id = 'SIBS');

	CALL "LOG_PROC_TIME"('MIG_RUN_CO012_IN', 'SIBS', 8);
	commit;
	
	----------------------------
	-- Begin Update
	-- set collateral id back to temp table
	----------------------------
--     	UPDATE MIG_CO012_IN a
--         	SET (CMS_ACT_COL_ID, CMS_STG_COL_ID) = 
--     	(SELECT act.CMS_COLLATERAL_ID, stg.CMS_COLLATERAL_ID
--      	FROM CMS_SECURITY act, CMS_STAGE_SECURITY stg
--      	WHERE act.sci_security_dtl_id = a.security_id
--      	AND stg.sci_security_dtl_id = a.security_id
--      	AND act.sci_security_type_value = 'IN'
--      	AND stg.sci_security_type_value = 'IN'
--      	AND a.is_valid = 'Y');
    


     	
     	
	--CALL "LOG_PROC_TIME"('MIG_RUN_CO012_IN', 'SIBS', 9);
	--commit;    
	----------------------------
	-- Begin Insertion
	-- cms_charge_detail
	----------------------------
	INSERT INTO cms_charge_detail (charge_detail_id, 
            cms_collateral_id, security_rank, charge_type, CHARGE_NATURE, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT, 
            status, source_id, cms_ref_id, LEGAL_CHARGE_DATE)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT),
			t.cms_act_col_id, 1, charge_type, CHARGE_NATURE, CURRENCY, CHARGE_AMOUNT, 'ACTIVE', 'SIBS',
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT), LEGAL_CHARGE_DATE
	   FROM MIG_CO012_IN t
	  WHERE t.is_valid = 'Y');
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO012_IN', 'SIBS', 10);
	commit;
	    
	CALL RUNSTATS_HELPER('cms_charge_detail', 'cms_collateral_id,source_id');
	CALL RUNSTATS_HELPER('MIG_CO012_IN', 'CMS_ACT_COL_ID');
	----------------------------
	-- Begin Insertion
	-- cms_stage_charge_detail
	----------------------------
	INSERT INTO cms_stage_charge_detail (charge_detail_id, 
            cms_collateral_id, security_rank, charge_type, CHARGE_NATURE, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT,  
            status, source_id, cms_ref_id, LEGAL_CHARGE_DATE)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT),
			t.cms_stg_col_id, 1, t.charge_type, t.CHARGE_NATURE, t.CURRENCY, t.CHARGE_AMOUNT, 'ACTIVE', 'SIBS', act.cms_ref_id, t.LEGAL_CHARGE_DATE
	   from MIG_CO012_IN t, cms_charge_detail act
        WHERE t.CMS_ACT_COL_ID = act.cms_collateral_id
	    AND act.source_id = 'SIBS' 
	    AND t.is_valid = 'Y');
        	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO012_IN', 'SIBS', 0);
	
END@



CREATE PROCEDURE MIG_RUN_CO014_CL
	LANGUAGE SQL
BEGIN

	CALL "LOG_PROC_TIME"('MIG_RUN_CO014_CL', 'SIBS', 1);
	commit;

	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-------------------------------------
	INSERT INTO cms_security (
		cms_collateral_id, 
		SCI_SECURITY_DTL_ID,
		SCI_REFERENCE_NOTE,
		SCI_SECURITY_CURRENCY,
		SCI_ORIG_SECURITY_CURRENCY,
		SECURITY_LOCATION,
		SECURITY_ORGANISATION,
		security_sub_type_id, 
		sci_security_type_value, 
		SCI_SECURITY_SUBTYPE_VALUE, 
		source_security_type,
		source_security_sub_type,
        	IS_LEGAL_ENFORCE, 
        	IS_LEGAL_ENFORCE_DATE, 
        	COLLATERAL_STATUS,
		version_time,
		status,
		source_id,
		is_migrated_ind)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
		SECURITY_ID,
		SECURITY_REF_NOTE,
		CURRENCY,
		CURRENCY,
		LOC_COUNTRY,
		LOC_ORG_CODE,
		cms_security_subtype_id, 
		substr(cms_security_subtype_id, 1,2),
		cms_security_subtype_id,
		SOURCE_SECURITY_TYPE,
		SOURCE_SECURITY_SUB_TYPE,
        	IS_LEGAL_ENFORCE, 
        	IS_LEGAL_ENFORCE_DATE, 
        	COLLATERAL_STATUS,
		0,
		'ACTIVE',
		'SIBS',
		'Y'
	FROM MIG_CO014_CL t
	WHERE NOT EXISTS (SELECT 1 FROM cms_security t
			 WHERE sci_security_dtl_id = t.security_id
		    	 AND source_id = 'SIBS' fetch first row only) AND t.is_valid = 'Y');

	CALL "LOG_PROC_TIME"('MIG_RUN_CO014_CL', 'SIBS', 2);
	commit;
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	LOCK TABLE CMS_SECURITY IN SHARE MODE;
	UPDATE cms_security a SET (type_name, subtype_name) =
		(SELECT security_type_name, subtype_name 
	   	 FROM cms_security_sub_type
	  	 WHERE security_sub_type_id = a.security_sub_type_id)
	WHERE source_id = 'SIBS'
	AND type_name IS NULL;
	 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO014_CL', 'SIBS', 3);
	commit;
    
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-------------------------------------
    	INSERT INTO cms_stage_security (
		cms_collateral_id, 
		SCI_SECURITY_DTL_ID,
		SCI_REFERENCE_NOTE,
		SCI_SECURITY_CURRENCY,
		SCI_ORIG_SECURITY_CURRENCY,
		SECURITY_LOCATION,
		SECURITY_ORGANISATION,
		security_sub_type_id, 
		sci_security_type_value, 
		SCI_SECURITY_SUBTYPE_VALUE, 
		source_security_type,
		source_security_sub_type,
        	IS_LEGAL_ENFORCE, 
        	IS_LEGAL_ENFORCE_DATE, 
        	COLLATERAL_STATUS,
		version_time,
		status,
		source_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT),
		SECURITY_ID,
		SECURITY_REF_NOTE,
		CURRENCY,
		CURRENCY,
		LOC_COUNTRY,
		LOC_ORG_CODE,
		cms_security_subtype_id, 
		substr(cms_security_type_id, 1, 2),
		cms_security_subtype_id,
		SOURCE_SECURITY_TYPE,
		SOURCE_SECURITY_SUB_TYPE,
        	IS_LEGAL_ENFORCE, 
        	IS_LEGAL_ENFORCE_DATE, 
        	COLLATERAL_STATUS,
		0,
		'ACTIVE',
		'SIBS'
	FROM MIG_CO014_CL t
	WHERE NOT EXISTS (SELECT 1 FROM cms_stage_security t
			 WHERE sci_security_dtl_id = t.security_id
		   	 AND source_id = 'SIBS' fetch first row only) AND t.is_valid = 'Y');
								 
	CALL "LOG_PROC_TIME"('MIG_RUN_CO014_CL', 'SIBS', 4);
	commit;
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	-- Update type_name, subtype_name
	-------------------------------------
	LOCK TABLE CMS_STAGE_SECURITY IN SHARE MODE;
	UPDATE cms_stage_security a SET (type_name, subtype_name) =
		(SELECT security_type_name, subtype_name 
	   	 FROM cms_security_sub_type
	  	 WHERE security_sub_type_id = a.security_sub_type_id)
	WHERE source_id = 'SIBS'
	AND TYPE_NAME IS NULL;

	CALL "LOG_PROC_TIME"('MIG_RUN_CO014_CL', 'SIBS', 5);
	commit;

	----------------------------
	-- Begin Update
	-- set collateral id back to temp table
	----------------------------
--    	UPDATE MIG_CO014_CL a
--       SET (CMS_ACT_COL_ID, CMS_STG_COL_ID) = 
--    		(SELECT act.CMS_COLLATERAL_ID, stg.CMS_COLLATERAL_ID
--     		FROM CMS_SECURITY act, CMS_STAGE_SECURITY stg
--     		WHERE act.sci_security_dtl_id = a.security_id
--     		AND stg.sci_security_dtl_id = a.security_id
--     		AND a.is_valid = 'Y');
			
	LOCK TABLE MIG_CO014_CL IN SHARE MODE;
	update MIG_CO014_CL
	set cms_act_col_id = (select cms_collateral_id
			from cms_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';
		
	commit;
	
	LOCK TABLE MIG_CO014_CL IN SHARE MODE;
	update MIG_CO014_CL
	set cms_stg_col_id = (select cms_collateral_id
			from cms_stage_security 
			where sci_security_dtl_id = security_id
			and source_id = 'SIBS')
	where is_valid = 'Y';			
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO014_CL', 'SIBS', 6);
	commit;
    
	----------------------------
	-- Begin Insertion
	-- cms_security_source
	----------------------------
	INSERT INTO cms_security_source (cms_security_source_id, cms_collateral_id, source_security_id, source_id, 
									 status, last_update_date, security_sub_type_id, interface_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR SHARE_SECURITY_SEQ), 2)) AS BIGINT),
			cms_collateral_id, security_id, 'SIBS', 'ACTIVE', CURRENT_TIMESTAMP, cms_security_subtype_id,
			'CO014'
	FROM cms_security sec, MIG_CO014_CL t
	WHERE NOT EXISTS (SELECT 1 FROM cms_security_source 
			 WHERE source_security_id = security_id 
		   	 AND source_id = 'SIBS' fetch first row only) 
	AND is_valid = 'Y'
	AND sec.sci_security_dtl_id = t.security_id
	AND source_id = 'SIBS');


	CALL "LOG_PROC_TIME"('MIG_RUN_CO014_CL', 'SIBS', 0);
	
END@


CREATE PROCEDURE MIG_RUN_CO015_VL
	LANGUAGE SQL
BEGIN

	CALL LOG_PROC_TIME('MIG_RUN_CO015_VL', 'SIBS', 1);
	commit;
	
	CALL RUNSTATS_HELPER('MIG_CO015_VL', 'security_id, is_valid, valuation_date');
	CALL RUNSTATS_HELPER('CMS_SECURITY', 'source_id, sci_security_dtl_id, cms_collateral_id');
	CALL RUNSTATS_HELPER('CMS_VALUATION', 'source_type, cms_collateral_id, valuation_date, cmv');
	
	---------------------------------------------------
	-- Actual Table
	-- CMS_VALUATION
	---------------------------------------------------
	INSERT INTO CMS_VALUATION (VALUATION_ID, CMS_COLLATERAL_ID, VALUER, VALUATION_DATE, VALUATION_CURRENCY, CMV, FSV, 
						  	   RESERVE_PRICE, RESERVE_PRICE_DATE, UPDATE_DATE, SOURCE_TYPE, SOURCE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR valuation_seq), 2)) as BIGINT),
			cms_collateral_id, valuer_code, valuation_date, valuation_currency, t.cmv, t.fsv, 
			t.reserve_price, t.reserve_price_date, CURRENT_TIMESTAMP, 'S', 'SIBS'
	   FROM MIG_CO015_VL t, cms_security sec
	  WHERE NOT EXISTS (SELECT 1 FROM cms_valuation
	  					 WHERE cms_collateral_id = sec.cms_collateral_id
			    		   and source_type = 'S'
			    		   AND (date(valuation_date) = date(t.valuation_date)
			    		   	or (valuation_date is null and cmv = t.cmv)) fetch first row only)
		AND sec.sci_security_dtl_id = t.security_id
		AND source_id = 'SIBS'
		AND is_valid = 'Y');
		
	CALL LOG_PROC_TIME('MIG_RUN_CO015_VL', 'SIBS', 2);
	commit;
			    		   
	---------------------------------------------------
	-- Staging Table
	-- CMS_STAGE_VALUATION
	---------------------------------------------------
	CALL RUNSTATS_HELPER('CMS_STAGE_SECURITY', 'sci_security_dtl_id,cms_collateral_id,source_id');	
	
	INSERT INTO CMS_STAGE_VALUATION (VALUATION_ID, CMS_COLLATERAL_ID, VALUER, VALUATION_DATE, VALUATION_CURRENCY, CMV, FSV, 
						  	   		 RESERVE_PRICE, RESERVE_PRICE_DATE, UPDATE_DATE, SOURCE_TYPE, SOURCE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR valuation_seq), 2)) as BIGINT),
			cms_collateral_id, valuer_code, valuation_date, valuation_currency, t.cmv, t.fsv, 
			t.reserve_price, t.reserve_price_date, CURRENT_TIMESTAMP, 'S', 'SIBS'
	   FROM MIG_CO015_VL t, cms_stage_security sec, transaction trx
	  WHERE NOT EXISTS (SELECT 1 FROM cms_stage_valuation v
	  					 WHERE v.cms_collateral_id = sec.cms_collateral_id --trx.staging_reference_id
			    		   and source_type = 'S'
			    		   AND (date(v.valuation_date) = date(t.valuation_date)
			    		   	or (v.valuation_date is null and v.cmv = t.cmv)) fetch first row only)
		AND sec.sci_security_dtl_id = t.security_id
		AND source_id = 'SIBS'
		AND sec.cms_collateral_id = trx.staging_reference_id
		AND transaction_type = 'COL'
		AND is_valid = 'Y');
		
	CALL LOG_PROC_TIME('MIG_RUN_CO015_VL', 'SIBS', 3);
	commit;
	
	update cms_security s 
	set reserve_price = (select max(t.reserve_price)
					from mig_co015_vl t
					where t.is_valid = 'Y'
					and t.security_id = s.sci_security_dtl_id)
	where exists (select 1 from mig_co015_vl t1
				where t1.is_valid = 'Y'
				and t1.security_id = s.sci_security_dtl_id)
	and s.source_id = 'SIBS';
	
	CALL LOG_PROC_TIME('MIG_RUN_CO015_VL', 'SIBS', 4);
	commit;	
	
	update cms_stage_security s 
	set reserve_price = (select max(t.reserve_price)
					from mig_co015_vl t
					where t.is_valid = 'Y'
					and t.security_id = s.sci_security_dtl_id)
	where exists (select 1 from mig_co015_vl t1
				where t1.is_valid = 'Y'
				and t1.security_id = s.sci_security_dtl_id)
	and s.source_id = 'SIBS';	


-- 	DECLARE GLOBAL TEMPORARY TABLE SESSION.valuation_reserved_price
-- 		(cms_act_col_id BIGINT,
-- 		 cms_stg_col_id BIGINT,
-- 		 cms_max_act_val_id BIGINT,
-- 		 cms_max_stg_val_id BIGINT,
-- 		 security_id VARCHAR(19),
-- 		 valuation_currency VARCHAR(3),
-- 		 reserve_price DECIMAL(15,2)) 
-- 	WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;

-- 	INSERT INTO SESSION.valuation_reserved_price(security_id, valuation_currency, reserve_price)
-- 	(SELECT security_id, valuation_currency, reserve_price
-- 	   FROM MIG_CO015_VL
-- 	  WHERE is_valid = 'Y');
-- 	
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO015_VL', 'SIBS', 4);
-- 	commit;

-- 	UPDATE SESSION.valuation_reserved_price a SET (cms_act_col_id, cms_stg_col_id) =
-- 	(SELECT reference_id, staging_reference_id
-- 	   FROM cms_security sec, transaction trx
-- 	  WHERE sec.cms_collateral_id = reference_id
-- 		AND trx.transaction_type = 'COL'
-- 		AND sec.source_id = 'SIBS'
-- 		AND sec.sci_security_dtl_id = a.security_id);
-- 		
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO015_VL', 'SIBS', 5);
-- 	commit;
-- 		
-- 	CREATE INDEX SESSION.t_val_col_idx1
--     	ON SESSION.valuation_reserved_price(cms_act_col_id ASC) ALLOW REVERSE SCANS;

-- 	CREATE INDEX SESSION.t_val_col_idx2
--     	ON SESSION.valuation_reserved_price(cms_stg_col_id ASC) ALLOW REVERSE SCANS;

-- 	UPDATE SESSION.valuation_reserved_price a SET (cms_max_act_val_id) =
-- 	(SELECT valuation_id 
-- 	   FROM cms_valuation
-- 	  WHERE cms_collateral_id = a.cms_act_col_id
-- 	    AND source_type = 'M' order by valuation_id desc
-- 			fetch first row only);
-- 	  
-- 	UPDATE SESSION.valuation_reserved_price a SET (cms_max_stg_val_id) =
-- 	(SELECT valuation_id 
-- 	   FROM cms_stage_valuation
-- 	  WHERE cms_collateral_id = a.cms_stg_col_id
-- 	    AND source_type = 'M' order by valuation_id desc
-- 			fetch first row only);
-- 			
-- 	CREATE INDEX SESSION.t_val_idx1
-- 			ON SESSION.valuation_reserved_price(cms_max_act_val_id ASC) ALLOW REVERSE SCANS;
-- 		
-- 	CREATE INDEX SESSION.t_val_idx2
-- 			ON SESSION.valuation_reserved_price(cms_max_stg_val_id ASC) ALLOW REVERSE SCANS;
-- 	
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO015_VL', 'SIBS', 6);
-- 	commit;
-- 	
-- 	LOCK TABLE CMS_VALUATION IN SHARE MODE;
-- 	UPDATE cms_valuation a SET (valuation_currency, reserve_price, update_date) =
-- 	(SELECT valuation_currency, reserve_price, CURRENT_TIMESTAMP
-- 	   FROM SESSION.valuation_reserved_price
-- 	  WHERE cms_max_act_val_id = a.valuation_id)
-- 	 WHERE EXISTS (SELECT 1 FROM SESSION.valuation_reserved_price
-- 	 				WHERE a.valuation_id = cms_max_act_val_id);
-- 	
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO015_VL', 'SIBS', 7);
-- 	commit;
-- 	  
-- 	INSERT INTO cms_valuation (valuation_id, cms_collateral_id, valuation_currency, reserve_price,  
-- 							   update_date, source_type, source_id)
-- 	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR valuation_seq), 2)) as BIGINT),
-- 			cms_act_col_id, valuation_currency, reserve_price, CURRENT_TIMESTAMP, 'M', 'SIBS'
-- 	   FROM SESSION.valuation_reserved_price
-- 	  WHERE cms_max_act_val_id IS NULL);
-- 	  
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO015_VL', 'SIBS', 8);
-- 	commit;
-- 	
-- 	LOCK TABLE CMS_STAGE_VALUATION IN SHARE MODE;
-- 	UPDATE cms_stage_valuation a SET (valuation_currency, reserve_price, update_date) =
-- 	(SELECT valuation_currency, reserve_price, CURRENT_TIMESTAMP
-- 	   FROM SESSION.valuation_reserved_price
-- 	  WHERE cms_max_stg_val_id = a.valuation_id)
-- 	 WHERE EXISTS (SELECT 1 FROM SESSION.valuation_reserved_price
-- 	 				WHERE a.valuation_id = cms_max_stg_val_id);

-- 	CALL LOG_PROC_TIME('MIG_RUN_CO015_VL', 'SIBS', 9);
-- 	commit;
-- 	  
-- 	INSERT INTO cms_stage_valuation (valuation_id, cms_collateral_id, valuation_currency, reserve_price,  
-- 									 update_date, source_type, source_id)
-- 	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR valuation_seq), 2)) as BIGINT),
-- 			cms_stg_col_id, valuation_currency, reserve_price, CURRENT_TIMESTAMP, 'M', 'SIBS'
-- 	   FROM SESSION.valuation_reserved_price
-- 	  WHERE cms_max_stg_val_id IS NULL);
-- 	  
-- 	DROP TABLE SESSION.valuation_reserved_price;
	
	CALL LOG_PROC_TIME('MIG_RUN_CO015_VL', 'SIBS', 0);

END@


CREATE PROCEDURE MIG_RUN_CO016_IN
	LANGUAGE SQL
BEGIN

	CALL LOG_PROC_TIME('MIG_RUN_CO016_IN', 'SIBS', 1);
	commit;
	
	---------------------------------------------------
	-- Actual Table
	-- MIG_CO016_IN
	-- set cms key (collateral)
	---------------------------------------------------	
	UPDATE MIG_CO016_IN t SET (t.cms_act_col_id, t.cms_stg_col_id) =
	(SELECT trx.reference_id, trx.staging_reference_id
	   FROM cms_security sec, transaction trx
	  WHERE sec.cms_collateral_id = trx.reference_id
		AND trx.transaction_type = 'COL'
		AND sec.source_id = 'SIBS'
		AND sec.sci_security_dtl_id = t.security_id)
	 WHERE t.is_valid = 'Y';
	 
	commit;

	UPDATE MIG_CO016_IN t SET t.cms_act_insr_id = 
	(SELECT ins.insurance_policy_id 
	   FROM cms_insurance_policy ins
	  WHERE ins.cms_collateral_id = t.cms_act_col_id  
	  and ins.POLICY_SEQ_NO = t.POLICY_SEQ_NO)
	 WHERE t.is_valid = 'Y';
	 
	commit;

	-- UPDATE cms_stage_insurance_policy stg SET policy_seq_no = 
	-- (SELECT policy_seq_no FROM cms_insurance_policy
	  -- WHERE insurance_policy_id = CAST(stg.insr_id AS BIGINT))
	 -- WHERE cms_collateral_id IN (SELECT cms_stg_col_id FROM MIG_CO016_IN)
	   -- AND policy_seq_no IS NULL;
	 
	-- commit;

	UPDATE MIG_CO016_IN t SET t.cms_stg_insr_id = 
	(SELECT stg.insurance_policy_id
	   FROM cms_stage_insurance_policy stg
	  WHERE stg.cms_collateral_id = t.cms_stg_col_id 
	  and stg.policy_seq_no = t.policy_seq_no)
	 WHERE t.is_valid = 'Y';
	 
	CALL LOG_PROC_TIME('MIG_RUN_CO016_IN', 'SIBS', 2);
	commit;
	
	---------------------------------------------------
	-- Actual Table
	-- CMS_INSURANCE_POLICY
	---------------------------------------------------
	CALL RUNSTATS_HELPER('MIG_CO016_IN');
	commit;
	
	INSERT INTO CMS_INSURANCE_POLICY (INSURANCE_POLICY_ID, CMS_COLLATERAL_ID, POLICY_NO, INSURER_NAME, INSURANCE_TYPE,
									  CURRENCY_CODE, INSURED_AMT, EFFECTIVE_DATE, EXPIRY_DATE, PROP_NO_COVER_NOTE_NUMBER, GROSS_PREMIUM, STAMP_DUTY, 
									  NET_PREMIUM_PAY_TO_INSURANCE_C, NET_PREMIUM_PAY_BY_BORROWER, COMMISSION_EARNED, BANK_CUST_ARRANGE_INS_IND,
									  NON_SCHEME_OR_SCHEME, INSURANCE_PREMIUM, INS_INSSUE_DATE, AUTO_DEBIT, TAKAFUL_COMMISSION, NEW_AMT_INSURED, 
									  ENDORSEMENT_DATE, BUILDING_OCCUPATION, NATURE_OF_WORK, TYPE_OF_BUILDING, NUMBER_OF_STOREY, WALL, EXTENSION_WALLS, 
									  ROOF, EXTENSION_ROOF, ENDORSEMENT_CODE, REMARK1, REMARK2, REMARK3, POLICY_CUSTODIAN, INSURANCE_CLAIM_DATE, 
									  INSURANCE_EXCHANGE_RATE, TYPE_OF_FLOOR, TYPE_OF_PERILS1, TYPE_OF_PERILS2, TYPE_OF_PERILS3, TYPE_OF_PERILS4,
									  TYPE_OF_PERILS5, DEBITING_AC_NO, AC_TYPE, POLICY_SEQ_NO,
									  SOURCE_SECURITY_ID, STATUS, SOURCE_ID, INSR_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR insurance_policy_seq), 2)) as BIGINT),
			cms_act_col_id, policy_number, insurer_name_code, insurance_type_code, insurance_policy_currency,
			t.insured_amt, t.effective_date, t.expiry_date, t.prop_no_cover_note_number, t.gross_premium, t.stamp_duty, 
			t.net_premium_pay_to_ins_comp, t.net_premium_pay_by_borrower, t.commission_earned, bank_cust_arrange_ins_ind, 
			nonschema_schema, ins_premium, ins_issue_date, auto_debit, takaful_commission, new_amt_insured, 
			endorsement_date, building_occupation_code, nature_of_work, type_of_building, number_of_storey, wall, extension_wall, 
			roof, extension_roof, endorsement_code, remark1, remark2, remark3, policy_custodian_code, insurance_claim_date, 
			insurance_exchange_rate, type_of_floor, type_of_perils1, type_of_perils2, type_of_perils3, type_of_perils4, 
			type_of_perils5, strip(debiting_acc_no, LEADING, '0'), acc_type_code, POLICY_SEQ_NO,
			security_id, 'ACTIVE', 'SIBS',
			rtrim(TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR insurance_policy_seq), 2))
	   FROM MIG_CO016_IN t 
	  WHERE cms_act_insr_id IS NULL				   
		AND is_valid = 'Y');

	CALL RUNSTATS_HELPER('cms_insurance_policy');
		
	CALL LOG_PROC_TIME('MIG_RUN_CO016_IN', 'SIBS', 3);
	commit;
	
	--------------------------------------------------------------
	-- set actual insurance id for new insurance policy record
	--------------------------------------------------------------
	UPDATE MIG_CO016_IN t SET (cms_act_insr_id) = 
	(SELECT insurance_policy_id 
		FROM cms_insurance_policy
		WHERE cms_collateral_id = t.cms_act_col_id fetch first row only)
	 WHERE is_valid = 'Y'
	 and cms_act_insr_id is null;
	 
	CALL LOG_PROC_TIME('MIG_RUN_CO016_IN', 'SIBS', 4);	 
	commit;	
	
	---------------------------------------------------
	-- Staging Table
	-- CMS_STAGE_INSURANCE_POLICY
	---------------------------------------------------
	INSERT INTO CMS_STAGE_INSURANCE_POLICY (INSURANCE_POLICY_ID, CMS_COLLATERAL_ID, POLICY_NO, INSURER_NAME, INSURANCE_TYPE,
									  CURRENCY_CODE, INSURED_AMT, EFFECTIVE_DATE, EXPIRY_DATE, PROP_NO_COVER_NOTE_NUMBER, GROSS_PREMIUM, STAMP_DUTY, 
									  NET_PREMIUM_PAY_TO_INSURANCE_C, NET_PREMIUM_PAY_BY_BORROWER, COMMISSION_EARNED, BANK_CUST_ARRANGE_INS_IND,
									  NON_SCHEME_OR_SCHEME, INSURANCE_PREMIUM, INS_INSSUE_DATE, AUTO_DEBIT, TAKAFUL_COMMISSION, NEW_AMT_INSURED, 
									  ENDORSEMENT_DATE, BUILDING_OCCUPATION, NATURE_OF_WORK, TYPE_OF_BUILDING, NUMBER_OF_STOREY, WALL, EXTENSION_WALLS, 
									  ROOF, EXTENSION_ROOF, ENDORSEMENT_CODE, REMARK1, REMARK2, REMARK3, POLICY_CUSTODIAN, INSURANCE_CLAIM_DATE, 
									  INSURANCE_EXCHANGE_RATE, TYPE_OF_FLOOR, TYPE_OF_PERILS1, TYPE_OF_PERILS2, TYPE_OF_PERILS3, TYPE_OF_PERILS4,
									  TYPE_OF_PERILS5, DEBITING_AC_NO, AC_TYPE, POLICY_SEQ_NO, 
									  SOURCE_SECURITY_ID, STATUS, SOURCE_ID, INSR_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR insurance_policy_seq), 2)) as BIGINT),
			cms_act_col_id, policy_number, insurer_name_code, insurance_type_code, insurance_policy_currency,
			t.insured_amt, t.effective_date, t.expiry_date, t.prop_no_cover_note_number, t.gross_premium, t.stamp_duty, 
			t.net_premium_pay_to_ins_comp, t.net_premium_pay_by_borrower, t.commission_earned, bank_cust_arrange_ins_ind, 
			nonschema_schema, ins_premium, ins_issue_date, auto_debit, takaful_commission, new_amt_insured, 
			endorsement_date, building_occupation_code, nature_of_work, type_of_building, number_of_storey, wall, extension_wall, 
			roof, extension_roof, endorsement_code, remark1, remark2, remark3, policy_custodian_code, insurance_claim_date, 
			insurance_exchange_rate, type_of_floor, type_of_perils1, type_of_perils2, type_of_perils3, type_of_perils4, 
			type_of_perils5, strip(debiting_acc_no, LEADING, '0'), acc_type_code, POLICY_SEQ_NO, 
			security_id, 'ACTIVE', 'SIBS',
			rtrim(TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR insurance_policy_seq), 2))
	   FROM MIG_CO016_IN t 
	  WHERE t.cms_stg_insr_id IS NULL				   
		AND t.is_valid = 'Y');
	   
	--CALL RUNSTATS_HELPER('cms_stage_insurance_policy');
		
	--CALL LOG_PROC_TIME('MIG_RUN_CO016_IN', 'SIBS', 5);
	--commit;
	
	--UPDATE MIG_CO016_IN t SET (cms_stg_insr_id) = 
	--(SELECT stg.insurance_policy_id
	   --FROM cms_stage_insurance_policy stg
	  --WHERE stg.cms_collateral_id = t.cms_stg_col_id)
	 --WHERE is_valid = 'Y'
	 --and cms_stg_insr_id is null;
	 	
	CALL LOG_PROC_TIME('MIG_RUN_CO016_IN', 'SIBS', 0);
	
END@


CREATE PROCEDURE MIG_RUN_CO017_CD
	LANGUAGE SQL
BEGIN

	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 1);
	commit;
	
	-- already setup in validation procedure
-- 	UPDATE MIG_CO017_CD t SET (cms_act_col_id, cms_stg_col_id) =
-- 	(SELECT reference_id, staging_reference_id
-- 	   FROM cms_security sec, transaction trx
-- 	  WHERE sec.cms_collateral_id = reference_id
-- 		AND trx.transaction_type = 'COL'
-- 		AND sec.source_id = 'SIBS'
-- 		AND sec.sci_security_dtl_id = t.security_id)
-- 	 WHERE is_valid = 'Y';
-- 	
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 2);
-- 	commit;

-- 	LOCK TABLE MIG_CO017_CD IN SHARE MODE;
-- 	UPDATE MIG_CO017_CD t 
-- 		SET (cms_act_lmt_id, cms_stg_lmt_id) = (SELECT reference_id, staging_reference_id 
-- 												FROM sci_lsp_appr_lmts lmt, transaction trx 
-- 												WHERE lmt.CMS_LSP_APPR_LMTS_ID = reference_id 
-- 													AND trx.transaction_type = 'LIMIT' 
-- 													AND lmt.source_id = 'SIBS' 
-- 													AND lmt.LMT_BCA_REF_NUM = t.APPLICATION_NO 
-- 													AND lmt.LMT_FAC_CODE = t.FACILITY_CODE 
-- 													AND lmt.LMT_FAC_SEQ = t.FACILITY_SEQ) 
-- 	WHERE is_valid = 'Y';
-- 	 
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 3);
-- 	commit;

-- 	UPDATE MIG_CO017_CD t SET (cms_act_chrg_id) = 
-- 	(SELECT charge_id FROM cms_limit_security_map 
-- 	  WHERE cms_collateral_id = t.cms_act_col_id
-- 		AND cms_lsp_appr_lmts_id = t.cms_act_lmt_id)
-- 	 WHERE is_valid = 'Y';
-- 	 
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 4);
-- 	commit;

	CALL RUNSTATS_HELPER('MIG_CO017_CD', 'RANKING_OF_SECURITY, IS_VALID, CMS_ACT_LMT_ID, CMS_STG_COL_ID, SECURITY_ID');
	CALL RUNSTATS_HELPER('CMS_STAGE_LIMIT_SECURITY_MAP', 'CMS_COLLATERAL_ID, CMS_LSP_APPR_LMTS_ID, CHARGE_ID');
	
--	create index temp_index_1 on mig_co017_cd
--		(is_valid, cms_act_lmt_id, cms_stg_col_id)
--		allow reverse scans;
		
	create index temp_index_1 on mig_co017_cd
		(is_valid, cms_stg_col_id, cms_act_lmt_id)
		allow reverse scans
		collect statistics;		
		
	create index temp_index_2 on cms_stage_limit_security_map
		(cms_lsp_appr_lmts_id, cms_collateral_id, charge_id)
		allow reverse scans
		collect statistics;
	
	COMMIT;
		
	LOCK TABLE MIG_CO017_CD IN share MODE;
	UPDATE MIG_CO017_CD t SET t.cms_stg_chrg_id = 
	(SELECT s.charge_id FROM cms_stage_limit_security_map s
	  WHERE s.cms_collateral_id = t.cms_stg_col_id
		AND s.cms_lsp_appr_lmts_id = t.cms_act_lmt_id)
	 WHERE t.is_valid = 'Y';
	 
	drop index temp_index_1;
	drop index temp_index_2;
	
	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 2);
	commit;
	
	
	--------------------------------------
	-- Update Charge currency code
	--------------------------------------
	UPDATE MIG_CO017_CD chrg set chrg.CURRENCY_CODE =
		(select sec.SCI_SECURITY_CURRENCY from cms_security sec
		where sec.sci_security_dtl_id = chrg.SECURITY_ID)
	where chrg.IS_VALID = 'Y';
	
	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 3);
	commit;
	
	
-- 	UPDATE MIG_CO017_CD t SET (cms_act_aa_id) = 
-- 	(SELECT cms_lsp_lmt_profile_id
-- 	   FROM sci_lsp_lmt_profile
-- 	  WHERE llp_bca_ref_num = t.application_no
-- 		AND source_id = 'RLOS')
-- 	 WHERE is_valid = 'Y';
-- 	 
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 6);
-- 	CALL RUNSTATS_HELPER('MIG_CO017_CD');
-- 	commit;
	
	--------------------------------------
	-- set actual charge detail id
	--------------------------------------
	-- new records not required to set actual charge detail id
-- 	update MIG_CO017_CD
-- 	set cms_act_chrg_dtl_id =
-- 		(select charge_detail_id
-- 		from cms_charge_detail chrg
-- 		where chrg.status = 'ACTIVE'
-- 		and chrg.cms_collateral_id = cms_act_col_id
-- 		and chrg.security_rank = ranking_of_security
-- 		and chrg.source_id = 'SIBS')
-- 	where is_valid = 'Y';
-- 	
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 7);
-- 	commit;
	
	-----------------------------
	-- ACTUAL Table
	-- CMS_CHARGE_DETAIL
	-----------------------------
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 8);
-- 	commit;
 
	
	INSERT INTO CMS_CHARGE_DETAIL (CHARGE_DETAIL_ID, SCI_LAS_SEC_ID, CMS_COLLATERAL_ID, SECURITY_RANK, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT, LEGAL_CHARGE_DATE, 
									PRESENTATION_NO, PRESENTATION_DATE, FOLIO_CHARGE, JILID_CHARGE, PARTY_CHARGE, CHARGE_TYPE,
									CHARGE_NATURE, CHARGE_PENDING_REDEMPTION, CAVEAT_WAIVED_IND,
									STATUS, SOURCE_ID, CMS_REF_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT),
			security_id, cms_act_col_id, ranking_of_security, currency_code, charge_amt, date_legally_charge, 
			presentation_no, presentation_date, folio, jilid, first_third_party_charge, charge_type_code,
			nature_of_charge, charge_pending_redemption, caveat_waived_ind,
			'ACTIVE', 'SIBS',
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT)
		from	
		(select row_number()over(partition by cms_act_col_id, ranking_of_security) rownum,
		security_id, t.cms_act_col_id, ranking_of_security, currency_code, charge_amt, date_legally_charge, 
			presentation_no, presentation_date, folio, jilid, first_third_party_charge, charge_type_code,
			nature_of_charge, charge_pending_redemption, caveat_waived_ind
	   FROM MIG_CO017_CD t
	   WHERE is_valid = 'Y') as t_charge
	   where rownum = 1);
	   
	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 4);
	commit;
	
	CALL RUNSTATS_HELPER('CMS_CHARGE_DETAIL', 'STATUS, CMS_COLLATERAL_ID, SECURITY_RANK, SOURCE_ID, CHARGE_DETAIL_ID');
	
	--------------------------------------
	-- set actual charge detail id
	-- for newly insert charge detail
	--------------------------------------
	LOCK TABLE MIG_CO017_CD IN share MODE;
	update MIG_CO017_CD cd
	set cd.cms_act_chrg_dtl_id =
		(select chrg.charge_detail_id
		from cms_charge_detail chrg
		where chrg.status = 'ACTIVE'
		and chrg.cms_collateral_id = cd.cms_act_col_id
		and chrg.security_rank = cd.ranking_of_security
		and chrg.source_id = 'SIBS')
	where cd.is_valid = 'Y';
	
	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 5);
	commit;	
	
-- 	DECLARE GLOBAL TEMPORARY TABLE SESSION.sum_charge_info
-- 		(sum_charge_amt decimal(20,2),
-- 		 currency_code char(3),
-- 		 cms_collateral_id bigint,
-- 		 ranking_of_security bigint) 
-- 		WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;	
-- 		
-- 	insert into session.sum_charge_info (sum_charge_amt, currency_code, cms_collateral_id, ranking_of_security)
-- 		(select sum(charge_amt), s.sci_security_currency, s.cms_collateral_id, ranking_of_security
-- 		from MIG_CO017_CD, cms_security s
-- 		where s.cms_collateral_id = cms_act_col_id
-- 		and is_valid = 'Y'
-- 		group by s.cms_collateral_id, ranking_of_security, sci_security_currency);
-- 	
-- 	create index session.sum_charge_idx on session.sum_charge_info
-- 	(cms_collateral_id asc, ranking_of_security asc, sum_charge_amt, currency_code) allow reverse scans;
-- 	
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 11);	
-- 	commit;
-- 	
-- 	LOCK TABLE CMS_CHARGE_DETAIL IN SHARE MODE;
-- 	UPDATE cms_charge_detail A1 
-- 	SET (charge_amount, currency_code) = (SELECT sum_charge_amt, currency_code 
-- 				                                   FROM session.sum_charge_info t
-- 				                                  WHERE t.cms_collateral_id = A1.cms_collateral_id 
-- 				                                    AND t.ranking_of_security = A1.security_rank) 
-- 	WHERE source_id = 'SIBS' 
-- 	and status = 'ACTIVE'
-- 	AND EXISTS (SELECT 1 FROM session.sum_charge_info t1
--                  where t1.cms_collateral_id = A1.cms_collateral_id
--                  and t1.ranking_of_security = A1.security_rank fetch first row only);
-- 	   				  
--     drop table session.sum_charge_info;
    
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 12);
-- 	commit;
			   
	
	-----------------------------
	-- ACTUAL Table
	-- CMS_LIMIT_CHARGE_MAP
	-----------------------------
	LOCK TABLE CMS_LIMIT_CHARGE_MAP IN SHARE MODE;
	INSERT INTO cms_limit_charge_map (limit_charge_map_id, cms_lsp_appr_lmts_id, charge_id, charge_detail_id, cms_collateral_id, 
									  status, customer_category, cms_lsp_lmt_profile_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR limit_charge_map_seq), 2)) as BIGINT),
			cms_act_lmt_id, cms_act_chrg_id, cms_act_chrg_dtl_id, t.cms_act_col_id, 'ACTIVE', 'MB', cms_act_aa_id
	   FROM MIG_CO017_CD t
	  WHERE t.is_valid = 'Y');
-- 	  	AND NOT EXISTS (SELECT 1 FROM cms_limit_charge_map m
-- 	  					 WHERE t.cms_act_chrg_id = m.charge_id
-- 	  					   AND t.cms_act_chrg_dtl_id = m.charge_detail_id fetch first row only));
		
	--CALL RUNSTATS_HELPER('CMS_LIMIT_SECURITY_MAP');
	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 6);
	commit;
	
-- 	LOCK TABLE CMS_LIMIT_SECURITY_MAP IN SHARE MODE;
-- 	UPDATE CMS_LIMIT_SECURITY_MAP A1 
-- 		SET (CHARGE_AMOUNT, SCI_LAS_LMT_ID) = (SELECT charge_amt, limit_id FROM MIG_CO017_CD 
-- 												WHERE is_valid = 'Y' AND cms_act_chrg_id = A1.charge_id) 
-- 	WHERE A1.SOURCE_ID = 'SIBS' 
-- 	AND EXISTS (SELECT 1 FROM MIG_CO017_CD 
-- 				WHERE is_valid = 'Y' AND cms_act_chrg_id = A1.charge_id fetch first row only);

-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 14);
-- 	commit;
	  									    
	-----------------------------
	-- Staging Table
	-- CMS_STAGE_CHARGE_DETAIL
	-----------------------------
	----------------------------
	-- set stage charge detail id
	------------------------------
-- 	LOCK TABLE MIG_CO017_CD IN SHARE MODE;
-- 	update MIG_CO017_CD
-- 	set cms_stg_chrg_dtl_id = 
-- 		(select charge_detail_id
-- 		from cms_stage_charge_detail chrg
-- 		where chrg.cms_collateral_id = cms_stg_col_id
-- 		and chrg.security_rank = ranking_of_security
-- 		and source_id = 'SIBS'
--     order by charge_detail_id desc fetch first row only)
-- 	where is_valid = 'Y';
-- 	
-- 	call RUNSTATS_HELPER('CMS_STAGE_CHARGE_DETAIL');
-- 	
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 15);
-- 	commit;
	
	INSERT INTO CMS_STAGE_CHARGE_DETAIL (CHARGE_DETAIL_ID, SCI_LAS_SEC_ID, CMS_COLLATERAL_ID, SECURITY_RANK, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT, LEGAL_CHARGE_DATE, 
										PRESENTATION_NO, PRESENTATION_DATE, FOLIO_CHARGE, JILID_CHARGE, PARTY_CHARGE, CHARGE_TYPE,
										CHARGE_NATURE, CHARGE_PENDING_REDEMPTION, CAVEAT_WAIVED_IND,
										STATUS, SOURCE_ID, CMS_REF_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT),
			security_id, cms_stg_col_id, ranking_of_security, currency_code, charge_amt, date_legally_charge, 
			presentation_no, presentation_date, folio, jilid, first_third_party_charge, charge_type_code,
			nature_of_charge, charge_pending_redemption, caveat_waived_ind,
			'ACTIVE', 'SIBS', cms_act_chrg_dtl_id
		from (select row_number()over(partition by cms_stg_col_id, ranking_of_security) rownum,
		security_id, t.cms_stg_col_id, ranking_of_security, currency_code, charge_amt, date_legally_charge, 
			presentation_no, presentation_date, folio, jilid, first_third_party_charge, charge_type_code,
			nature_of_charge, charge_pending_redemption, caveat_waived_ind, cms_act_chrg_dtl_id
	   FROM MIG_CO017_CD t
	   WHERE t.is_valid = 'Y') as t_charge
	   where rownum = 1);	
	
	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 7);
	commit;
		
	--------------------------------------------
	-- set stage charge detail id
	-- for newly added stage charge record
	--------------------------------------------
	
	call RUNSTATS_HELPER('CMS_STAGE_CHARGE_DETAIL', 'CMS_COLLATERAL_ID, SECURITY_RANK, SOURCE_ID');
	
	LOCK TABLE MIG_CO017_CD IN share MODE;
	update MIG_CO017_CD cd
	set cd.cms_stg_chrg_dtl_id = 
		(select chrg.charge_detail_id
		from cms_stage_charge_detail chrg
		where chrg.cms_collateral_id = cd.cms_stg_col_id
		and chrg.security_rank = cd.ranking_of_security
		and chrg.source_id = 'SIBS')
	where cd.is_valid = 'Y'
	and cd.cms_stg_chrg_dtl_id is null;
	
	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 8);
	commit;
		
	-----------------------------
	-- Staging Table
	-- stage_charge_info
	-- Sum Up Charge Amount
	-----------------------------
-- 	DECLARE GLOBAL TEMPORARY TABLE SESSION.stage_charge_info
-- 		(charge_amount DECIMAL(15,2),
-- 		 currency_code VARCHAR(3),
-- 		 cms_ref_id BIGINT,
-- 		 cms_stg_col_id BIGINT,
-- 		 ranking_of_security BIGINT,
-- 		 cms_chrg_dtl_id BIGINT) 
-- 		WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
-- 				
-- 	INSERT INTO SESSION.stage_charge_info(cms_stg_col_id, ranking_of_security, cms_chrg_dtl_id)
-- 	(SELECT DISTINCT cms_stg_col_id, ranking_of_security, cms_stg_chrg_dtl_id
-- 		FROM MIG_CO017_CD
-- 		WHERE is_valid = 'Y');
-- 	
-- 	CREATE INDEX SESSION.t_col_rank_idx
--     	ON SESSION.stage_charge_info(cms_stg_col_id ASC, ranking_of_security)
--         ALLOW REVERSE SCANS;
--         
-- 	CREATE INDEX SESSION.t_chrg_dtl_idx
--     	ON SESSION.stage_charge_info(cms_chrg_dtl_id);
--     	
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 18);
-- 	commit;
--   
-- 	UPDATE SESSION.stage_charge_info t SET (charge_amount, currency_code) = 
-- 	(SELECT SUM(charge_amt), sci_security_currency FROM MIG_CO017_CD, cms_stage_security
-- 	  WHERE t.cms_stg_col_id = cms_stg_col_id
-- 	    AND t.ranking_of_security = ranking_of_security
-- 	    AND t.cms_stg_col_id = cms_collateral_id
-- 			AND source_id = 'SIBS'
-- 			AND is_valid = 'Y'
-- 			group by sci_security_currency);
-- 	
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 19);
-- 	commit;
	
-- 	UPDATE SESSION.stage_charge_info t SET cms_ref_id = 
-- 	(SELECT charge_detail_id 
-- 	   FROM cms_charge_detail, MIG_CO017_CD
-- 	  WHERE cms_act_col_id = cms_collateral_id
-- 			AND SOURCE_ID = 'SIBS'
-- 	    AND security_rank = ranking_of_security
-- 	    AND t.ranking_of_security = ranking_of_security
-- 	    AND t.cms_stg_col_id = cms_stg_col_id
-- 		AND is_valid = 'Y'
-- 		FETCH FIRST ROW ONLY);
-- 		
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 20);
-- 	commit;

-- 	UPDATE cms_stage_charge_detail a SET (charge_amount, currency_code, cms_ref_id) =
-- 	(SELECT charge_amount, currency_code, cms_ref_id
-- 	   FROM SESSION.stage_charge_info
-- 	  WHERE a.charge_detail_id = cms_chrg_dtl_id);
-- 	
-- 	DROP TABLE SESSION.stage_charge_info;
-- 	
-- 	call RUNSTATS_HELPER('CMS_STAGE_CHARGE_DETAIL');
-- 	   				  
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 21);
-- 	commit;
-- 						   
	-------------------------------
	-- Staging Table
	-- CMS_STAGE_LIMIT_CHARGE_MAP
	-------------------------------
	LOCK TABLE CMS_STAGE_LIMIT_CHARGE_MAP IN SHARE MODE;
	INSERT INTO CMS_STAGE_LIMIT_CHARGE_MAP (LIMIT_CHARGE_MAP_ID, CMS_LSP_APPR_LMTS_ID, CHARGE_ID, CHARGE_DETAIL_ID, CMS_COLLATERAL_ID, 
									  		STATUS, CUSTOMER_CATEGORY, CMS_LSP_LMT_PROFILE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR limit_charge_map_seq), 2)) as BIGINT),
			cms_act_lmt_id, cms_act_chrg_id, cms_stg_chrg_dtl_id, cms_stg_col_id, 'ACTIVE', 'MB', t.cms_act_aa_id
	   FROM MIG_CO017_CD t
	  WHERE t.is_valid = 'Y');
-- 	    AND NOT EXISTS (SELECT 1 FROM cms_stage_limit_charge_map m
-- 	  					 WHERE m.cms_lsp_appr_lmts_id=t.cms_act_lmt_id
-- 	  					   AND m.cms_collateral_id=t.cms_stg_col_id
-- 	  					   AND m.charge_id=t.cms_act_chrg_id
-- 	  					   AND m.charge_detail_id = t.cms_stg_chrg_dtl_id fetch first row only));	  					   
		
-- 	CALL RUNSTATS_HELPER('CMS_STAGE_LIMIT_SECURITY_MAP');
-- 	
-- 	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 22);
-- 	commit;
-- 	
-- 	LOCK TABLE CMS_STAGE_LIMIT_SECURITY_MAP IN SHARE MODE;
-- 	UPDATE CMS_STAGE_LIMIT_SECURITY_MAP A1 
-- 		SET (CHARGE_AMOUNT, SCI_LAS_LMT_ID) = (SELECT charge_amt, limit_id FROM MIG_CO017_CD 
-- 												WHERE cms_stg_chrg_id = A1.charge_id
-- 												AND is_valid = 'Y') 
-- 	WHERE A1.SOURCE_ID = 'SIBS' 
-- 	AND EXISTS (SELECT 1 FROM MIG_CO017_CD 
-- 				WHERE cms_stg_chrg_id = charge_id 
-- 				AND is_valid = 'Y' fetch first row only);
				
	commit;

	CALL LOG_PROC_TIME('MIG_RUN_CO017_CD', 'SIBS', 0);
	
END@


CREATE PROCEDURE MIG_RUN_CO018_PG
	LANGUAGE SQL
BEGIN

	CALL LOG_PROC_TIME('MIG_RUN_CO018_PG', 'SIBS', 1);
	commit;
	
	call RUNSTATS_HELPER('MIG_CO018_PG', 'IS_VALID, PLEDGOR_CIF_ID');
	---------------------------------------------------
	-- SI Temp Table
	-- Set CMS Key (Col and Pldgr)
	---------------------------------------------------
	UPDATE MIG_CO018_PG t SET cms_pldgr_id = 
	(SELECT cms_pledgor_dtl_id FROM sci_pledgor_dtl
	  WHERE plg_le_id = t.pledgor_cif_id
		AND source_id = 'SIBS')
	 WHERE is_valid = 'Y';
	 
	commit;

-- 	UPDATE MIG_CO018_PG t SET cms_act_col_id = 
-- 	(SELECT cms_collateral_id FROM cms_security
-- 	  WHERE sci_security_dtl_id = t.security_id
-- 		AND source_id = 'SIBS')
-- 	 WHERE is_valid = 'Y';
-- 	 
	UPDATE MIG_CO018_PG t SET (cms_act_col_id, cms_stg_col_id) =
		(select reference_id, staging_reference_id
		from cms_security sec, transaction trx
		where sec.cms_collateral_id = reference_id
		and trx.transaction_type = 'COL'
		and sec.source_id = 'SIBS'
		and sec.sci_security_dtl_id = t.security_id)
	WHERE is_valid = 'Y';	 
	 
	commit;
	 
	UPDATE MIG_CO018_PG t SET cms_stg_pldgr_id = 
	(SELECT cms_pledgor_dtl_id FROM stage_pledgor_dtl
	  WHERE plg_le_id = t.pledgor_cif_id
		AND source_id = 'SIBS')
	 WHERE is_valid = 'Y';
	 
	commit;
	
	UPDATE MIG_CO018_PG t
	set (pledgor_country, pledgor_org_code, pledgor_id_num) = 
		(select cms_sub_orig_country, cms_sub_orig_organisation, lmp_inc_num_text
		from sci_le_sub_profile sp, sci_le_main_profile mp
		where mp.lmp_le_id = pledgor_cif_id
		and mp.source_id = 'SIBS'
		and mp.cms_le_main_profile_id = sp.cms_le_main_profile_id)
	where is_valid = 'Y'
	AND cms_pldgr_id is null;

-- 	UPDATE MIG_CO018_PG t SET cms_stg_col_id = 
-- 	(SELECT cms_collateral_id FROM cms_stage_security
-- 	  WHERE sci_security_dtl_id = t.security_id
-- 		AND source_id = 'SIBS')
-- 	 WHERE is_valid = 'Y';	 
		
	CALL LOG_PROC_TIME('MIG_RUN_CO018_PG', 'SIBS', 2);
	commit;
	
	---------------------------------------------------
	-- Actual Table
	-- SCI_PLEDGOR_DTL
	---------------------------------------------------
	INSERT INTO SCI_PLEDGOR_DTL (CMS_PLEDGOR_DTL_ID, PLG_LE_ID, PLG_LEGAL_NAME, PLG_REL_TYPE_NUM, PLG_REL_TYPE_VALUE, SOURCE_ID, 
		CREATE_DATE, PLG_INC_NUM_TEXT, PLG_ID_NUM_TEXT, PLG_LE_ID_SRC_VALUE, CMS_ORIG_COUNTRY, CMS_ORIG_ORGANISATION)
			(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR pledgor_seq), 2)) as BIGINT),
	 		 pledgor_cif_id, pledgor_legal_name, REL_WITH_BORROWER_CAT, rel_with_borrower_code, 'SIBS', current_timestamp,
			PLEDGOR_ID_NUM, PLEDGOR_ID_NUM, 'SIBS', PLEDGOR_COUNTRY, PLEDGOR_ORG_CODE
		from (select row_number()over(partition by pledgor_cif_id) rownum,
			pledgor_cif_id, pledgor_legal_name, REL_WITH_BORROWER_CAT, rel_with_borrower_code, 
			PLEDGOR_ID_NUM, PLEDGOR_ID_NUM, PLEDGOR_COUNTRY, PLEDGOR_ORG_CODE
	   FROM MIG_CO018_PG
	   WHERE is_valid = 'Y'
	   and cms_pldgr_id is null) as t
	   where rownum = 1);
	   
	--CALL RUNSTATS_HELPER('SCI_PLEDGOR_DTL');
	CALL LOG_PROC_TIME('MIG_RUN_CO018_PG', 'SIBS', 3);
	commit;
	
	-- Update legal constitution based from customer main profile
	UPDATE SCI_PLEDGOR_DTL plg
	SET (PLG_LEGAL_TYPE_NUM, PLG_LEGAL_TYPE_VALUE) = (select LMP_LEGAL_CONST_NUM, LMP_LEGAL_CONST_VALUE from SCI_LE_MAIN_PROFILE mainprf
	                                                    where plg.PLG_LE_ID = mainprf.LMP_LE_ID)
	WHERE EXISTS (select 1 from SCI_LE_MAIN_PROFILE mainprf1
					where plg.PLG_LE_ID = mainprf1.LMP_LE_ID)
	AND plg.PLG_LEGAL_TYPE_VALUE IS NULL;	
	
	-- Update id type values based from customer main profile
	UPDATE SCI_PLEDGOR_DTL plg
	SET (PLG_ID_TYPE_NUM, PLG_ID_TYPE_VALUE) = (select LMP_ID_TYPE_NUM, LMP_ID_TYPE_VALUE from SCI_LE_MAIN_PROFILE mainprf
												where plg.PLG_LE_ID = mainprf.LMP_LE_ID)
	WHERE EXISTS (select 1 from SCI_LE_MAIN_PROFILE mainprf1
					where plg.PLG_LE_ID = mainprf1.LMP_LE_ID)
	AND plg.PLG_ID_TYPE_VALUE IS NULL;	
	
	CALL LOG_PROC_TIME('MIG_RUN_CO018_PG', 'SIBS', 4);
	commit;	
	
	---------------------------------------------------
	-- Staging Table
	-- STAGE_PLEDGOR_DTL
	---------------------------------------------------
	INSERT INTO STAGE_PLEDGOR_DTL (CMS_PLEDGOR_DTL_ID, PLG_LE_ID, PLG_LEGAL_NAME, PLG_REL_TYPE_NUM, PLG_REL_TYPE_VALUE, SOURCE_ID, CREATE_DATE, 
		PLG_INC_NUM_TEXT, PLG_ID_NUM_TEXT, PLG_LE_ID_SRC_VALUE, CMS_ORIG_COUNTRY, CMS_ORIG_ORGANISATION)
			(SELECT (CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR pledgor_seq), 2)) as BIGINT)),
	 		 pledgor_cif_id, pledgor_legal_name, REL_WITH_BORROWER_CAT, rel_with_borrower_code, 'SIBS', current_timestamp,
			PLEDGOR_ID_NUM, PLEDGOR_ID_NUM, 'SIBS', PLEDGOR_COUNTRY, PLEDGOR_ORG_CODE
		from (select row_number()over(partition by pledgor_cif_id) rownum,
			pledgor_cif_id, pledgor_legal_name, REL_WITH_BORROWER_CAT, rel_with_borrower_code,
			PLEDGOR_ID_NUM, PLEDGOR_ID_NUM, PLEDGOR_COUNTRY, PLEDGOR_ORG_CODE	
	   FROM MIG_CO018_PG
	   WHERE is_valid = 'Y'
	   and cms_stg_pldgr_id is null) as t
	   where rownum = 1);
	   
--	CALL RUNSTATS_HELPER('SCI_PLEDGOR_DTL');
	CALL LOG_PROC_TIME('MIG_RUN_CO018_PG', 'SIBS', 5);
	commit;		
	
	-- Update legal constitution based from customer main profile
	UPDATE STAGE_PLEDGOR_DTL plg
	SET (PLG_LEGAL_TYPE_NUM, PLG_LEGAL_TYPE_VALUE) = (select LMP_LEGAL_CONST_NUM, LMP_LEGAL_CONST_VALUE from SCI_LE_MAIN_PROFILE mainprf
	                                                    where plg.PLG_LE_ID = mainprf.LMP_LE_ID)
	WHERE EXISTS (select 1 from SCI_LE_MAIN_PROFILE mainprf1
					where plg.PLG_LE_ID = mainprf1.LMP_LE_ID)
	AND plg.PLG_LEGAL_TYPE_VALUE IS NULL;	
	
	-- Update id type values based from customer main profile
	UPDATE STAGE_PLEDGOR_DTL plg
	SET (PLG_ID_TYPE_NUM, PLG_ID_TYPE_VALUE) = (select LMP_ID_TYPE_NUM, LMP_ID_TYPE_VALUE from SCI_LE_MAIN_PROFILE mainprf
												where plg.PLG_LE_ID = mainprf.LMP_LE_ID)
	WHERE EXISTS (select 1 from SCI_LE_MAIN_PROFILE mainprf1
					where plg.PLG_LE_ID = mainprf1.LMP_LE_ID)
	AND plg.PLG_ID_TYPE_VALUE IS NULL;		
	
	CALL LOG_PROC_TIME('MIG_RUN_CO018_PG', 'SIBS', 6);
	commit;		
	
	---------------------------------------------------
	-- SI Temp Table
	-- MIG_CO018_PG 
	-- Set CMS Key (Pldgr) after insert 
	---------------------------------------------------
	CALL RUNSTATS_HELPER('SCI_PLEDGOR_DTL', 'PLG_LE_ID, SOURCE_ID, CMS_PLEDGOR_DTL_ID');
	
	LOCK TABLE MIG_CO018_PG IN SHARE MODE;
	UPDATE MIG_CO018_PG t SET cms_pldgr_id = 
	(SELECT cms_pledgor_dtl_id FROM sci_pledgor_dtl
	  WHERE plg_le_id = t.pledgor_cif_id
		AND source_id = 'SIBS')
	where is_valid = 'Y'
	and cms_pldgr_id is null;
	
	commit;
	
	CALL RUNSTATS_HELPER('SCI_PLEDGOR_DTL', 'PLG_LE_ID, SOURCE_ID, CMS_PLEDGOR_DTL_ID');
	
	LOCK TABLE MIG_CO018_PG IN SHARE MODE;
	UPDATE MIG_CO018_PG t SET cms_stg_pldgr_id = 
	(SELECT cms_pledgor_dtl_id FROM stage_pledgor_dtl
	  WHERE plg_le_id = t.pledgor_cif_id
		AND source_id = 'SIBS')
	where is_valid = 'Y'
	and cms_stg_pldgr_id is null;	
	
	CALL LOG_PROC_TIME('MIG_RUN_CO018_PG', 'SIBS', 7);
	commit;	

	---------------------------------------------------
	-- Actual Table
	-- SCI_SEC_PLDGR_MAP
	---------------------------------------------------
	INSERT INTO SCI_SEC_PLDGR_MAP (CMS_SEC_PLDGR_MAP_ID, SPM_SEC_ID, CMS_PLEDGOR_DTL_ID, CMS_COLLATERAL_ID,
								   SEC_PLEDGOR_RELATIONSHIP_NUM, SEC_PLEDGOR_RELATIONSHIP_VALUE, SOURCE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR PLEDGOR_SEQ), 2)) as BIGINT),
			security_id, cms_pldgr_id, cms_act_col_id,
			rel_with_borrower_cat, rel_with_borrower_code, 'SIBS'
	   FROM MIG_CO018_PG t
	  WHERE NOT EXISTS (SELECT 1 FROM sci_sec_pldgr_map
	  					 WHERE cms_collateral_id = cms_act_col_id
						   AND cms_pledgor_dtl_id = cms_pldgr_id )
		AND is_valid = 'Y'
		AND cms_act_col_id IS NOT NULL
		AND cms_pldgr_id IS NOT NULL);
		
	CALL LOG_PROC_TIME('MIG_RUN_CO018_PG', 'SIBS', 8);
	commit;	
	
	CALL RUNSTATS_HELPER('SCI_SEC_PLDGR_MAP', 'SOURCE_ID, CMS_COLLATERAL_ID, CMS_PLEDGOR_DTL_ID');

	UPDATE SCI_SEC_PLDGR_MAP SET SPM_ID = CMS_SEC_PLDGR_MAP_ID
	where SPM_ID is null;

	CALL LOG_PROC_TIME('MIG_RUN_CO018_PG', 'SIBS', 9);
	commit;	
	
	UPDATE MIG_CO018_PG t SET cms_act_spm_id = 
	(SELECT CMS_SEC_PLDGR_MAP_ID FROM SCI_SEC_PLDGR_MAP
		WHERE CMS_PLEDGOR_DTL_ID = t.cms_pldgr_id
		AND CMS_COLLATERAL_ID = t.cms_act_col_id
		AND source_id = 'SIBS')
	where is_valid = 'Y'
	and cms_act_spm_id is null;

	CALL LOG_PROC_TIME('MIG_RUN_CO018_PG', 'SIBS', 10);
	commit;	
	
	---------------------------------------------------
	-- Staging Table
	-- STAGE_SEC_PLDGR_MAP
	---------------------------------------------------
	INSERT INTO STAGE_SEC_PLDGR_MAP (CMS_SEC_PLDGR_MAP_ID, SPM_ID, SPM_SEC_ID, CMS_PLEDGOR_DTL_ID, CMS_COLLATERAL_ID,
								   SEC_PLEDGOR_RELATIONSHIP_NUM, SEC_PLEDGOR_RELATIONSHIP_VALUE, SOURCE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR PLEDGOR_SEQ), 2)) as BIGINT),
			cms_act_spm_id, security_id, cms_stg_pldgr_id, cms_stg_col_id,
			rel_with_borrower_cat, rel_with_borrower_code, 'SIBS'
	   FROM MIG_CO018_PG t
	  WHERE NOT EXISTS (SELECT 1 FROM stage_sec_pldgr_map
	  					 WHERE cms_collateral_id = cms_stg_col_id
						   AND cms_pledgor_dtl_id = cms_stg_pldgr_id )
		AND is_valid = 'Y'
		AND cms_stg_col_id IS NOT NULL
		AND cms_stg_pldgr_id IS NOT NULL);		
				
	CALL LOG_PROC_TIME('MIG_RUN_CO018_PG', 'SIBS', 0);
	
END@


CREATE PROCEDURE MIG_RUN_CO019_PL
	LANGUAGE SQL
BEGIN

	CALL "LOG_PROC_TIME"('MIG_RUN_CO019_PL', 'SIBS', 1);
	commit;
	
	CALL RUNSTATS_HELPER('MIG_CO019_PL', 'IS_VALID, CMS_ACT_COL_ID, CMS_STG_COL_ID, AMOUNT_PLEDGED, PERCENT_PLEDGED, AMOUNT_DRAW, PERCENT_DRAW, CMS_ACT_LMT_ID');
	call runstats_helper('CMS_SECURITY', 'IS_MIGRATED_IND, CMS_COLLATERAL_ID');
	
	--------------------------------------------
	-- Update pledge amount usage indicator
	--------------------------------------------
	create index temp_index_1 on mig_co019_pl
		(is_valid, amount_pledged, cms_act_col_id)
		allow reverse scans
		collect statistics;
		
	create index temp_index_2 on mig_co019_pl
		(is_valid, percent_pledged, cms_act_col_id)
		allow reverse scans
		collect statistics;
		
	COMMIT;
	
	-- Actual table
	update CMS_SECURITY sec
	set PLEDGE_AMOUNT_USAGE_IND = 'A'
	where exists (select 1 from MIG_CO019_PL migpl
	                where migpl.CMS_ACT_COL_ID = sec.cms_collateral_id
	                and AMOUNT_PLEDGED > 0
					and is_valid = 'Y')
	and IS_MIGRATED_IND = 'Y';

	update CMS_SECURITY sec
	set PLEDGE_AMOUNT_USAGE_IND = 'P'
	where exists (select 1 from MIG_CO019_PL migpl
	                where migpl.CMS_ACT_COL_ID = sec.cms_collateral_id
	                and PERCENT_PLEDGED >= 0
					and PLEDGE_AMOUNT_USAGE_IND is null fetch first row only)
	and IS_MIGRATED_IND = 'Y';
	
	commit;
	
	-- Staging table
	update CMS_STAGE_SECURITY sec
	set PLEDGE_AMOUNT_USAGE_IND = 'A'
	where exists (select 1 from MIG_CO019_PL migpl
	                where migpl.SECURITY_ID = sec.SCI_SECURITY_DTL_ID
	                and AMOUNT_PLEDGED > 0)
	and source_id = 'SIBS';

	update CMS_STAGE_SECURITY sec
	set PLEDGE_AMOUNT_USAGE_IND = 'P'
	where exists (select 1 from MIG_CO019_PL migpl
	                where migpl.SECURITY_ID = sec.SCI_SECURITY_DTL_ID
	                and PERCENT_PLEDGED >= 0
					and PLEDGE_AMOUNT_USAGE_IND is null)
	and source_id = 'SIBS';

	
	commit;
	drop index temp_index_1;
	drop index temp_index_2;
	--------------------------------------------
	-- Update Draw amount usage indicator
	--------------------------------------------
	
	create index temp_index_1 on mig_co019_pl
		(is_valid, AMOUNT_DRAW, cms_act_col_id)
		allow reverse scans
		collect statistics;
		
	create index temp_index_2 on mig_co019_pl
		(is_valid, PERCENT_DRAW, cms_act_col_id)
		allow reverse scans
		collect statistics;
		
	COMMIT;
		
	-- Actual table
	update CMS_SECURITY sec
	set DRAW_AMOUNT_USAGE_IND = 'A'
	where exists (select 1 from MIG_CO019_PL migpl
	                where migpl.CMS_ACT_COL_ID = sec.cms_collateral_id
	                and AMOUNT_DRAW > 0 fetch first row only)
	and IS_MIGRATED_IND = 'Y';

	update CMS_SECURITY sec
	set DRAW_AMOUNT_USAGE_IND = 'P'
	where exists (select 1 from MIG_CO019_PL migpl
	                where migpl.CMS_ACT_COL_ID = sec.cms_collateral_id
	                and PERCENT_DRAW >= 0
					and DRAW_AMOUNT_USAGE_IND is null fetch first row only)
	and IS_MIGRATED_IND = 'Y';	
	
	-- Staging table
	update CMS_STAGE_SECURITY sec
	set DRAW_AMOUNT_USAGE_IND = 'A'
	where exists (select 1 from MIG_CO019_PL migpl
	                where migpl.SECURITY_ID = sec.SCI_SECURITY_DTL_ID
	                and AMOUNT_DRAW > 0)
	and source_id = 'SIBS';


	update CMS_STAGE_SECURITY sec
	set DRAW_AMOUNT_USAGE_IND = 'P'
	where exists (select 1 from MIG_CO019_PL migpl
	                where migpl.SECURITY_ID = sec.SCI_SECURITY_DTL_ID
	                and PERCENT_DRAW >= 0
					and DRAW_AMOUNT_USAGE_IND is null)
	and source_id = 'SIBS';		

	
	commit;
	drop index temp_index_1;
	drop index temp_index_2;
	--------------------------------------------
	-- Update collateral id and stage collateral id
	-- get from CMS_SECURITY and TRANSACTION
	--------------------------------------------
	UPDATE MIG_CO019_PL T SET (CMS_STG_COL_ID) =
		(SELECT STAGING_REFERENCE_ID
	 	FROM TRANSACTION TRX
	 	WHERE --T.CMS_ACT_COL_ID IS NOT NULL AND 
		T.CMS_ACT_COL_ID = REFERENCE_ID
	 	AND TRX.TRANSACTION_TYPE = 'COL')
	WHERE --T.CMS_ACT_COL_ID IS NOT NULL AND 
	IS_VALID = 'Y';
		
	CALL "LOG_PROC_TIME"('MIG_RUN_CO019_PL', 'SIBS', 2);
	commit;
    
	--------------------------------------------
	-- Update stage limit id
	-- get from TRANSACTION
    -- get from FAC MIG table instead
	--------------------------------------------
	UPDATE MIG_CO019_PL T 
	SET CMS_STG_LMT_ID = 
		(SELECT STAGING_REFERENCE_ID 
		FROM TRANSACTION TRX 
		WHERE --T.CMS_ACT_LMT_ID IS NOT NULL AND 
		T.CMS_ACT_LMT_ID = REFERENCE_ID 
		AND TRX.TRANSACTION_TYPE = 'LIMIT') 
	WHERE --T.CMS_ACT_LMT_ID IS NOT NULL AND 
	IS_VALID = 'Y';
    
	-- UPDATE MIG_CO019_PL T 
	-- SET CMS_STG_LMT_ID = 
		-- (SELECT CMS_STG_LMT_ID 
		-- FROM MIG_CA003_1 FAC 
		-- WHERE FAC.LIMIT_ID = T.LIMIT_ID 
		-- AND FAC.IS_VALID = 'Y') 
	-- WHERE T.CMS_ACT_LMT_ID IS NOT NULL
	-- AND IS_VALID = 'Y';
	
	CALL "LOG_PROC_TIME"('MIG_RUN_CO019_PL', 'SIBS', 3);
	commit;
	
	-------------------------------------
	-- Actual Table
	-- CMS_LIMIT_SECURITY_MAP
	-------------------------------------
	INSERT INTO CMS_LIMIT_SECURITY_MAP (CHARGE_ID, CMS_LSP_APPR_LMTS_ID, CMS_COLLATERAL_ID, SCI_LAS_LMT_ID, SCI_LAS_SEC_ID,
		CUSTOMER_CATEGORY, CMS_LSP_LMT_PROFILE_ID, SCI_LAS_BCA_REF_NUM, SCI_LAS_FAC_CODE, SCI_LAS_FAC_SEQ,
		SCI_LAS_LE_ID, PLEDGE_AMOUNT, PLEDGE_AMOUNT_PERCENTAGE, DRAW_AMOUNT, DRAW_AMOUNT_PERCENTAGE, CREATE_DATE, 
		SOURCE_ID, UPDATE_STATUS_IND, SCI_LAS_SYS_GEN_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COL_LIMIT_MAP_SEQ), 2)) AS BIGINT), 
		CMS_ACT_LMT_ID, CMS_ACT_COL_ID, LIMIT_ID, SECURITY_ID,
		'MB', CMS_ACT_LMT_PROFILE_ID, T.APPLICATION_NO, T.FACILITY_CODE, T.FACILITY_SEQUENCE,
		SRC_LE_ID, AMOUNT_PLEDGED, PERCENT_PLEDGED, AMOUNT_DRAW, PERCENT_DRAW, CURRENT_TIMESTAMP, 
		'SIBS', 'I',
		CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COL_LIMIT_MAP_SEQ), 2)) AS BIGINT)
 	FROM MIG_CO019_PL T 
 	WHERE T.IS_VALID = 'Y'
	AND CMS_ACT_COL_ID IS NOT NULL
	AND CMS_ACT_LMT_ID IS NOT NULL
	AND NOT EXISTS (SELECT 1 FROM CMS_LIMIT_SECURITY_MAP B
			WHERE B.CMS_COLLATERAL_ID=T.CMS_ACT_COL_ID
			AND B.CMS_LSP_APPR_LMTS_ID=T.CMS_ACT_LMT_ID));

	CALL "LOG_PROC_TIME"('MIG_RUN_CO019_PL', 'SIBS', 4);
	commit; 

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_LIMIT_SECURITY_MAP
	-------------------------------------
	INSERT INTO CMS_STAGE_LIMIT_SECURITY_MAP (CHARGE_ID, CMS_LSP_APPR_LMTS_ID, CMS_COLLATERAL_ID, SCI_LAS_LMT_ID, SCI_LAS_SEC_ID,
		CUSTOMER_CATEGORY, CMS_LSP_LMT_PROFILE_ID, SCI_LAS_BCA_REF_NUM, SCI_LAS_FAC_CODE, SCI_LAS_FAC_SEQ,
		SCI_LAS_LE_ID, PLEDGE_AMOUNT, PLEDGE_AMOUNT_PERCENTAGE, DRAW_AMOUNT, DRAW_AMOUNT_PERCENTAGE, CREATE_DATE, 
		SOURCE_ID, UPDATE_STATUS_IND, SCI_LAS_SYS_GEN_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COL_LIMIT_MAP_SEQ), 2)) AS BIGINT), 
		CMS_ACT_LMT_ID, CMS_STG_COL_ID, LIMIT_ID, SECURITY_ID,
		'MB', CMS_ACT_LMT_PROFILE_ID, T.APPLICATION_NO, T.FACILITY_CODE, T.FACILITY_SEQUENCE,
		SRC_LE_ID, AMOUNT_PLEDGED, PERCENT_PLEDGED, AMOUNT_DRAW, PERCENT_DRAW, CURRENT_TIMESTAMP, 
		'SIBS', 'I', lsm.SCI_LAS_SYS_GEN_ID
 	FROM MIG_CO019_PL T , CMS_LIMIT_SECURITY_MAP lsm
 	WHERE T.IS_VALID = 'Y'
	AND CMS_ACT_LMT_ID IS NOT NULL
	AND CMS_STG_COL_ID IS NOT NULL
	AND CMS_ACT_LMT_ID = lsm.CMS_LSP_APPR_LMTS_ID
	AND CMS_ACT_COL_ID = lsm.CMS_COLLATERAL_ID
	AND NOT EXISTS (SELECT 1 FROM CMS_STAGE_LIMIT_SECURITY_MAP B
			WHERE B.CMS_COLLATERAL_ID=T.CMS_STG_COL_ID
			AND B.CMS_LSP_APPR_LMTS_ID=T.CMS_ACT_LMT_ID));
            
            
	CALL "LOG_PROC_TIME"('MIG_RUN_CO019_PL', 'SIBS', 5);
	commit;

	-------------------------------------
	-- Actual Table
	-- CMS_LIMIT_CHARGE_MAP
    -- Required because files like CO005 came with charge already and charge details already inserted
	-------------------------------------            
	call runstats_helper('cms_charge_detail', 'cms_collateral_id, charge_detail_id');
	call runstats_helper('cms_limit_security_map', 'cms_collateral_id');
	
    INSERT INTO CMS_LIMIT_CHARGE_MAP (limit_charge_map_id, cms_lsp_appr_lmts_id, charge_id, charge_detail_id, cms_collateral_id, 
                                      status, customer_category, cms_lsp_lmt_profile_id)
    (SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR limit_charge_map_seq), 2)) as BIGINT),
        lsm.CMS_LSP_APPR_LMTS_ID, lsm.CHARGE_ID, chg.charge_detail_id, chg.cms_collateral_id, 
        'ACTIVE', lsm.CUSTOMER_CATEGORY, lsm.cms_lsp_lmt_profile_id
    from cms_charge_detail chg, cms_limit_security_map lsm
    where chg.cms_collateral_id = lsm.cms_collateral_id
    and not exists (select 1 from cms_limit_charge_map map 
                    where chg.charge_detail_id = map.CHARGE_DETAIL_ID));


	CALL "LOG_PROC_TIME"('MIG_RUN_CO019_PL', 'SIBS', 6);
	commit;


	-------------------------------------
	-- Staging Table
	-- CMS_LIMIT_CHARGE_MAP
    -- security id = staging
    -- limit id = actual
    -- charge detail id = staging
    -- limit profile id = actual
    -- charge id = staging limit sec map
	-------------------------------------
	call runstats_helper('CMS_STAGE_CHARGE_DETAIL', 'cms_collateral_id, charge_detail_id');
	call runstats_helper('CMS_STAGE_LIMIT_SECURITY_MAP', 'cms_collateral_id');
	
	INSERT INTO CMS_STAGE_LIMIT_CHARGE_MAP (LIMIT_CHARGE_MAP_ID, CMS_LSP_APPR_LMTS_ID, CHARGE_ID, CHARGE_DETAIL_ID, CMS_COLLATERAL_ID, 
									  		STATUS, CUSTOMER_CATEGORY, CMS_LSP_LMT_PROFILE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR limit_charge_map_seq), 2)) as BIGINT),
        lsm.CMS_LSP_APPR_LMTS_ID, lsm.CHARGE_ID, chg.charge_detail_id, chg.cms_collateral_id, 
        'ACTIVE', lsm.CUSTOMER_CATEGORY, lsm.cms_lsp_lmt_profile_id
    from CMS_STAGE_CHARGE_DETAIL chg, CMS_STAGE_LIMIT_SECURITY_MAP lsm
    where chg.cms_collateral_id = lsm.cms_collateral_id
    and not exists (select 1 from CMS_STAGE_LIMIT_CHARGE_MAP map 
                    where chg.charge_detail_id = map.CHARGE_DETAIL_ID));
    
	CALL "LOG_PROC_TIME"('MIG_RUN_CO019_PL', 'SIBS', 0);
	
END@


CREATE PROCEDURE MIG_UPD_CO019_PL
	LANGUAGE SQL
BEGIN

	CALL "LOG_PROC_TIME"('MIG_UPD_CO019_PL', 'SIBS', 1);
	commit;
	
	--------------------------------------------
	-- Update pledged amount = 0 
	-- when both pledged amount and pledged percent exists.
	-- for application type = 'HP'
	--------------------------------------------
	UPDATE MIG_CO019_PL T 
	SET AMOUNT_PLEDGED = 0
	WHERE EXISTS (select 1 from MIG_CO019_PL pl  
	                where T.SECURITY_ID = pl.SECURITY_ID
	                and T.LIMIT_ID = pl.LIMIT_ID
	                and (pl.AMOUNT_PLEDGED > 0 and pl.PERCENT_PLEDGED > 0)
	                and pl.APPLICATION_TYPE = 'HP');

	CALL "LOG_PROC_TIME"('MIG_UPD_CO019_PL', 'SIBS', 0);
	
END@