  create or replace PROCEDURE SP_PARTY_BANK_METHOD_MIG
AS
  CURSOR PARTY_MIG
  IS
  SELECT LSP_LE_ID,
  CMS_LE_SUB_PROFILE_ID,
  CMS_LE_MAIN_PROFILE_ID,
  BANKING_METHOD
FROM SCI_LE_SUB_PROFILE;
      
 RC_FLAG_UPDATE PARTY_MIG%ROWTYPE;
  COUNT_ACTUAL NUMBER(10);
  SEQUENCE_NUM Number(19);
  STAGING_SEQUENCE Number(19);
BEGIN
  OPEN PARTY_MIG;
  LOOP
    FETCH PARTY_MIG INTO RC_FLAG_UPDATE;
    EXIT
     WHEN PARTY_MIG%NOTFOUND;
    COUNT_ACTUAL := 0;
	
	select TO_CHAR (SYSDATE, 'YYYYMMDD') || LPAD(CMS_BANKING_METHOD_SEQ.NEXTVAL,9,'0') into SEQUENCE_NUM from dual;
	select TO_CHAR (SYSDATE, 'YYYYMMDD') || LPAD(CHK_STG_BANKING_METHOD_SEQ.NEXTVAL,9,'0') into STAGING_SEQUENCE from dual;
 
  SELECT COUNT(1)
    INTO COUNT_ACTUAL
    FROM SCI_LE_SUB_PROFILE 
	WHERE LSP_LE_ID = RC_FLAG_UPDATE.LSP_LE_ID;
   
	
    IF(COUNT_ACTUAL>0) THEN
		INSERT INTO CMS_BANKING_METHOD_CUST (CMS_BANKING_METHOD_ID, CUSTOMER_ID, CMS_BANKING_METHOD_NAME, CMS_LE_SUB_PROFILE_ID, STATUS)
   VALUES (SEQUENCE_NUM, RC_FLAG_UPDATE.LSP_LE_ID , RC_FLAG_UPDATE.BANKING_METHOD , RC_FLAG_UPDATE.CMS_LE_SUB_PROFILE_ID , 'ACTIVE');
		
		INSERT INTO CMS_STAGE_BANKING_METHOD_CUST (CMS_BANKING_METHOD_ID, CUSTOMER_ID, CMS_BANKING_METHOD_NAME, CMS_LE_SUB_PROFILE_ID, STATUS)
   VALUES (STAGING_SEQUENCE, RC_FLAG_UPDATE.LSP_LE_ID , RC_FLAG_UPDATE.BANKING_METHOD , RC_FLAG_UPDATE.CMS_LE_SUB_PROFILE_ID , 'ACTIVE');
   
		INSERT INTO PARTY_BANKING_METHOD_MIGRATION_STATUS (LSP_LE_ID, IS_UPDATED)
   VALUES (RC_FLAG_UPDATE.LSP_LE_ID,'Y');
   
END IF;
  END LOOP;
  CLOSE PARTY_MIG;
  COMMIT;
END;