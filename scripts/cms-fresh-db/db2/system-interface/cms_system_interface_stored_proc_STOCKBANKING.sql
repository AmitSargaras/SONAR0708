--SET CURRENT PATH = SYSIBM,SYSFUN,SYSPROC,SYSIBMADM,ABCLIMS@
DROP PROCEDURE SI_RUN_TEMP_STBG_CO022@
DROP PROCEDURE SI_RUN_TEMP_STBG_CO023@
DROP PROCEDURE SI_RUN_TEMP_STBG_CO024@
DROP PROCEDURE SI_RUN_TEMP_STBG_PF001@
DROP PROCEDURE SI_RUN_TEMP_STBG_PF002@
DROP PROCEDURE SI_RUN_TEMP_STBG_SH001@
DROP PROCEDURE SI_RUN_ALL_STBG@

CREATE PROCEDURE SI_RUN_TEMP_STBG_CO022
		LANGUAGE SQL
	BEGIN
		CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO022', 'STBG', 1);
		
	----------------------------------------------
	-- Update security type and subtype id
	-- SI_RUN_TEMP_STBG_CO022
	----------------------------------------------

	UPDATE SI_TEMP_STBG_CO022 A
	   SET (cms_security_type_id, cms_security_subtype_id) =
	(SELECT 'MS', SI_GET_SUBTYPE_BY_STOCK_CODE_AND_EXCHANGE(STOCK_CODE, STOCK_EXCHANGE)
	   FROM SI_TEMP_STBG_CO022
	  WHERE security_id = a.security_id)
	WHERE A.IS_VALID = 'Y';

	----------------------------------------------
	-- Update xref for settlement account
	-- SI_RUN_TEMP_STBG_CO022
	----------------------------------------------

	UPDATE SI_TEMP_STBG_CO022 A
	   SET A.CMS_LSP_SYS_XREF_ID =
	(SELECT X.CMS_LSP_SYS_XREF_ID FROM SCI_LSP_SYS_XREF X
	  WHERE A.CIF_ID = X.LSX_EXT_SYS_ACCT_NUM AND X.LSX_EXT_SYS_CODE_VALUE = 'ARBS')
	WHERE A.IS_VALID = 'Y';

	call si_runstats('SI_TEMP_STBG_CO022');
	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO022', 'STBG', 101);
	commit;
	

	
	-------------------------------------
	-- Actual Table
	-- CMS_SECURITY
	--
	-------------------------------------
	
	UPDATE CMS_SECURITY S SET STATUS = 'DELETED', S.DELETED_DATE = CURRENT_TIMESTAMP
	WHERE S.SOURCE_ID = 'STBG'
		AND NOT EXISTS (SELECT 1 FROM SI_TEMP_STBG_CO022 T WHERE T.SECURITY_ID = S.SCI_SECURITY_DTL_ID AND T.IS_VALID = 'Y');
	
		
	commit;
	
	UPDATE CMS_SECURITY SET (SCI_ORIG_SECURITY_CURRENCY, SECURITY_LOCATION, CUSTODIAN_TYPE, SECURITY_MATURITY_DATE,
		EXCHANGE_CONTROL_OBTAINED, IS_LEGAL_ENFORCE, IS_LEGAL_ENFORCE_DATE, SECURITY_PERFECTION_DATE, STATUS,
		SCI_SECURITY_TYPE_VALUE, SCI_SECURITY_SUBTYPE_VALUE, SECURITY_SUB_TYPE_ID) =
	(SELECT ORIGINAL_CURRENCY, LOC_COUNTRY, CUSTODIAN_TYPE, SECURITY_EXPIRY_DATE, EXCHANGE_CONTROL_OBTAINED,
		LEGAL_ENFORCEABILITY, LEGAL_ENFORCEABILITY_DATE, SECURITY_PERFECTION_DATE, 'ACTIVE', CMS_SECURITY_TYPE_ID, CMS_SECURITY_SUBTYPE_ID, CMS_SECURITY_SUBTYPE_ID
		FROM SI_TEMP_STBG_CO022
		WHERE IS_VALID = 'Y' AND SCI_SECURITY_DTL_ID = SECURITY_ID)
	WHERE EXISTS (SELECT 1 FROM SI_TEMP_STBG_CO022 WHERE IS_VALID = 'Y' AND SCI_SECURITY_DTL_ID = SECURITY_ID AND SOURCE_ID = 'STBG') AND SOURCE_ID = 'STBG';
	
	commit;
	
	INSERT INTO CMS_SECURITY (CMS_COLLATERAL_ID, SCI_SECURITY_DTL_ID, SCI_SECURITY_CURRENCY, SCI_ORIG_SECURITY_CURRENCY, SECURITY_LOCATION, CUSTODIAN_TYPE, SECURITY_MATURITY_DATE,
		EXCHANGE_CONTROL_OBTAINED, IS_LEGAL_ENFORCE, IS_LEGAL_ENFORCE_DATE, SECURITY_PERFECTION_DATE, STATUS, SOURCE_ID,
		SCI_SECURITY_TYPE_VALUE, SCI_SECURITY_SUBTYPE_VALUE, SECURITY_SUB_TYPE_ID, SECURITY_ORGANISATION, IS_MIGRATED_IND)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT), 
		SECURITY_ID, ORIGINAL_CURRENCY, ORIGINAL_CURRENCY, LOC_COUNTRY, CUSTODIAN_TYPE, SECURITY_EXPIRY_DATE, EXCHANGE_CONTROL_OBTAINED,
		LEGAL_ENFORCEABILITY, LEGAL_ENFORCEABILITY_DATE, SECURITY_PERFECTION_DATE, 'ACTIVE', 'STBG', CMS_SECURITY_TYPE_ID, CMS_SECURITY_SUBTYPE_ID,
    CMS_SECURITY_SUBTYPE_ID, '011', 'N'
		FROM SI_TEMP_STBG_CO022
		WHERE IS_VALID = 'Y' AND NOT EXISTS (SELECT 1 FROM CMS_SECURITY WHERE SCI_SECURITY_DTL_ID = SECURITY_ID AND SOURCE_ID = 'STBG'));

	commit;
	
  UPDATE CMS_SECURITY A SET (TYPE_NAME, SUBTYPE_NAME) =
	(SELECT SECURITY_TYPE_NAME, SUBTYPE_NAME 
	   FROM CMS_SECURITY_SUB_TYPE
	  WHERE SECURITY_SUB_TYPE_ID = A.SECURITY_SUB_TYPE_ID)
	 WHERE SOURCE_ID = 'STBG'
	   AND SUBTYPE_NAME IS NULL;		

	 commit;
  -- cms_security_source	   
	   
	UPDATE cms_security_source SET(cms_collateral_id, source_security_id, source_id, 
								   last_update_date, security_sub_type_id) =
	(SELECT sec.cms_collateral_id, t.security_id, 'STBG', current_timestamp, t.cms_security_subtype_id
	   FROM cms_security sec, si_temp_stbg_co022 t 
	  WHERE sec.sci_security_dtl_id = security_id
	    AND sec.sci_security_dtl_id = source_security_id 
	    AND source_id = 'STBG' 
	    AND is_valid = 'Y')
	 WHERE EXISTS (SELECT 1 FROM si_temp_stbg_co022
	 				WHERE source_security_id = security_id 
	 				  AND is_valid = 'Y')
	   AND source_id = 'STBG';
		
	commit;
	
	INSERT INTO cms_security_source (cms_security_source_id, cms_collateral_id, source_security_id, source_id, 
									 status, last_update_date, security_sub_type_id)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR SHARE_SECURITY_SEQ), 2)) AS BIGINT),
			sec.cms_collateral_id, t.security_id, 'STBG', 'ACTIVE', CURRENT_TIMESTAMP, t.cms_security_subtype_id
	   FROM cms_security sec, si_temp_stbg_co022 t
	  WHERE NOT EXISTS (SELECT 1 FROM cms_security_source 
						 WHERE source_security_id = security_id 
						   AND source_id = 'STBG') 
		AND is_valid = 'Y'
		AND sec.sci_security_dtl_id = t.security_id
		AND source_id = 'STBG');

	commit;
	-- Update ID to temp table
	
	UPDATE SI_TEMP_STBG_CO022 T SET CMS_COLLATERAL_ID = 
	(SELECT S.CMS_COLLATERAL_ID
		FROM CMS_SECURITY S
		WHERE S.SCI_SECURITY_DTL_ID = T.SECURITY_ID AND S.SOURCE_ID = 'STBG')
	WHERE T.IS_VALID = 'Y';

	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO022', 'STBG', 2);
	COMMIT;

	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_SECURITY
	--
	-------------------------------------

	UPDATE CMS_STAGE_SECURITY S SET STATUS = 'DELETED', S.DELETED_DATE = CURRENT_TIMESTAMP
	WHERE S.SOURCE_ID = 'STBG'
		AND NOT EXISTS (SELECT 1 FROM SI_TEMP_STBG_CO022 T WHERE T.SECURITY_ID = S.SCI_SECURITY_DTL_ID AND T.IS_VALID = 'Y');

	commit;
	
	UPDATE CMS_STAGE_SECURITY SET (SCI_ORIG_SECURITY_CURRENCY, SECURITY_LOCATION, CUSTODIAN_TYPE, SECURITY_MATURITY_DATE,
		EXCHANGE_CONTROL_OBTAINED, IS_LEGAL_ENFORCE, IS_LEGAL_ENFORCE_DATE, SECURITY_PERFECTION_DATE, STATUS, 
    SCI_SECURITY_TYPE_VALUE, SCI_SECURITY_SUBTYPE_VALUE, SECURITY_SUB_TYPE_ID) =
	(SELECT ORIGINAL_CURRENCY, LOC_COUNTRY, CUSTODIAN_TYPE, SECURITY_EXPIRY_DATE, EXCHANGE_CONTROL_OBTAINED,
		LEGAL_ENFORCEABILITY, LEGAL_ENFORCEABILITY_DATE, SECURITY_PERFECTION_DATE, 'ACTIVE', CMS_SECURITY_TYPE_ID, CMS_SECURITY_SUBTYPE_ID, CMS_SECURITY_SUBTYPE_ID
		FROM SI_TEMP_STBG_CO022
		WHERE IS_VALID = 'Y' AND SCI_SECURITY_DTL_ID = SECURITY_ID)
	WHERE EXISTS (SELECT 1 FROM SI_TEMP_STBG_CO022 WHERE IS_VALID = 'Y' AND SCI_SECURITY_DTL_ID = SECURITY_ID AND SOURCE_ID = 'STBG') AND SOURCE_ID = 'STBG';
	
	commit;
	
	INSERT INTO CMS_STAGE_SECURITY (CMS_COLLATERAL_ID, SCI_SECURITY_DTL_ID, SCI_ORIG_SECURITY_CURRENCY, SECURITY_LOCATION, CUSTODIAN_TYPE, SECURITY_MATURITY_DATE,
		EXCHANGE_CONTROL_OBTAINED, IS_LEGAL_ENFORCE, IS_LEGAL_ENFORCE_DATE, SECURITY_PERFECTION_DATE, STATUS, SOURCE_ID, 
    SCI_SECURITY_TYPE_VALUE, SCI_SECURITY_SUBTYPE_VALUE, SECURITY_SUB_TYPE_ID, SECURITY_ORGANISATION)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR collateral_seq), 2)) as BIGINT), 
		SECURITY_ID, ORIGINAL_CURRENCY, LOC_COUNTRY, CUSTODIAN_TYPE, SECURITY_EXPIRY_DATE, EXCHANGE_CONTROL_OBTAINED,
		LEGAL_ENFORCEABILITY, LEGAL_ENFORCEABILITY_DATE, SECURITY_PERFECTION_DATE, 'ACTIVE', 'STBG', CMS_SECURITY_TYPE_ID, CMS_SECURITY_SUBTYPE_ID,
    CMS_SECURITY_SUBTYPE_ID, '011'
		FROM SI_TEMP_STBG_CO022
		WHERE IS_VALID = 'Y' AND NOT EXISTS (SELECT 1 FROM CMS_STAGE_SECURITY WHERE SCI_SECURITY_DTL_ID = SECURITY_ID AND SOURCE_ID = 'STBG'));

	commit;
	
  UPDATE CMS_STAGE_SECURITY A SET (TYPE_NAME, SUBTYPE_NAME) =
	(SELECT SECURITY_TYPE_NAME, SUBTYPE_NAME 
	   FROM CMS_SECURITY_SUB_TYPE
	  WHERE SECURITY_SUB_TYPE_ID = A.SECURITY_SUB_TYPE_ID)
	 WHERE SOURCE_ID = 'STBG'
	   AND SUBTYPE_NAME IS NULL;	
	  
	commit;	

	-- Update ID to temp table
	
	UPDATE SI_TEMP_STBG_CO022 T SET CMS_COLLATERAL_ID_STG = 
	(SELECT S.CMS_COLLATERAL_ID
		FROM CMS_STAGE_SECURITY S
		WHERE S.SCI_SECURITY_DTL_ID = T.SECURITY_ID AND S.SOURCE_ID = 'STBG')
	WHERE T.IS_VALID = 'Y';

	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO022', 'STBG', 3);
	COMMIT;

	-------------------------------------
	-- Actual Table
	-- CMS_MARKETABLE_SEC
	--
	-------------------------------------
	
	INSERT INTO CMS_MARKETABLE_SEC (CMS_COLLATERAL_ID)
	(SELECT S.CMS_COLLATERAL_ID
	   FROM CMS_SECURITY S, SI_TEMP_STBG_CO022 T
	  WHERE T.SECURITY_ID = S.SCI_SECURITY_DTL_ID
	    AND SOURCE_ID = 'STBG'
			AND T.IS_VALID = 'Y'
	    AND NOT EXISTS (SELECT '1' FROM CMS_MARKETABLE_SEC
	    				 WHERE CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID));
	
	commit;
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_MARKETABLE_SEC
	--
	-------------------------------------
	
	INSERT INTO CMS_STAGE_MARKETABLE_SEC (CMS_COLLATERAL_ID)
	(SELECT S.CMS_COLLATERAL_ID
	   FROM CMS_STAGE_SECURITY S, SI_TEMP_STBG_CO022 T
	  WHERE T.SECURITY_ID = S.SCI_SECURITY_DTL_ID
	    AND SOURCE_ID = 'STBG'
			AND T.IS_VALID = 'Y'
	    AND NOT EXISTS (SELECT '1' FROM CMS_STAGE_MARKETABLE_SEC
	    				 WHERE CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID));
	
	commit;
	
	-------------------------------------
	-- Actual Table
	-- CMS_PORTFOLIO_ITEM
	--
	-------------------------------------
	
	LOCK TABLE CMS_PORTFOLIO_ITEM IN EXCLUSIVE MODE;
	UPDATE CMS_PORTFOLIO_ITEM P SET STATUS = 'DELETED'
	WHERE P.SOURCE_ID = 'STBG'
		AND NOT EXISTS (SELECT 1 FROM SI_TEMP_STBG_CO022 T, CMS_MARKETABLE_SEC M, CMS_SECURITY S
			WHERE P.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID AND M.CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID
			AND S.SCI_SECURITY_DTL_ID = T.SECURITY_ID AND T.IS_VALID = 'Y');

	commit;
	
	LOCK TABLE CMS_PORTFOLIO_ITEM IN EXCLUSIVE MODE;
	UPDATE CMS_PORTFOLIO_ITEM A SET (TYPE, AGENT_NAME, REGISTERED_NAME, NO_OF_UNITS, UNIT_PRICE, CUSTODIAN_TYPE, SECURITY_CUSTODIAN,
		SECURITY_MATURITY_DATE, STOCK_EXCHANGE, STOCK_EXCHANGE_COUNTRY, INDEX_NAME, STOCK_CODE, ISIN_CODE,
		RECOGNIZED_EXCHANGE_FLAG, STATUS) = 
	(SELECT TYPE, NOMINEE_NAME, REGISTERED_NAME, cast(UNITS_SIGN||char(UNITS) as bigint)UNITS, UNIT_PRICE, T.CUSTODIAN_TYPE, CUSTODIAN, MATURITY_DATE, 
		STOCK_EXCHANGE, STOCK_EXCHANGE_COUNTRY, INDEX_NAME, STOCK_CODE, ISIN_CODE, RECOGNIZED_EXCHANGE, 'ACTIVE'
		FROM SI_TEMP_STBG_CO022 T, CMS_MARKETABLE_SEC M, CMS_SECURITY S
		WHERE T.SECURITY_ID = S.SCI_SECURITY_DTL_ID AND T.IS_VALID = 'Y'
			AND S.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID
			AND A.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID)
	WHERE EXISTS (SELECT 1 FROM SI_TEMP_STBG_CO022 T, CMS_MARKETABLE_SEC M, CMS_SECURITY S
									WHERE T.SECURITY_ID = S.SCI_SECURITY_DTL_ID AND T.IS_VALID = 'Y'
										AND S.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID
										AND A.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID AND S.SOURCE_ID = 'STBG');
	
	commit;
											
	INSERT INTO CMS_PORTFOLIO_ITEM (CMS_COLLATERAL_ID, ITEM_ID, TYPE, AGENT_NAME, REGISTERED_NAME, NO_OF_UNITS, UNIT_PRICE,
		CUSTODIAN_TYPE, SECURITY_CUSTODIAN, SECURITY_MATURITY_DATE, STOCK_EXCHANGE, STOCK_EXCHANGE_COUNTRY, INDEX_NAME, 
		STOCK_CODE, ISIN_CODE, RECOGNIZED_EXCHANGE_FLAG, SOURCE_ID, CMS_REF_ID, STATUS)
	(SELECT M.CMS_COLLATERAL_ID,
		CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR marketable_equity_seq), 2)) as BIGINT),
		TYPE, NOMINEE_NAME, REGISTERED_NAME, cast(UNITS_SIGN||char(UNITS) as bigint)UNITS, UNIT_PRICE, T.CUSTODIAN_TYPE, CUSTODIAN, MATURITY_DATE, 
		STOCK_EXCHANGE, STOCK_EXCHANGE_COUNTRY, INDEX_NAME, STOCK_CODE, ISIN_CODE, RECOGNIZED_EXCHANGE, 'STBG',
		CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR marketable_equity_seq), 2)) as BIGINT), 'ACTIVE'
		FROM SI_TEMP_STBG_CO022 T, CMS_MARKETABLE_SEC M, CMS_SECURITY S
		WHERE S.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID AND T.SECURITY_ID = S.SCI_SECURITY_DTL_ID AND T.IS_VALID = 'Y'
			AND NOT EXISTS (SELECT 1 FROM CMS_PORTFOLIO_ITEM WHERE SOURCE_ID = 'STBG' AND CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID));

			
	commit;
	-------------------------------------
	-- Staing Table
	-- CMS_STAGE_PORTFOLIO_ITEM
	--
	-------------------------------------
	
	LOCK TABLE CMS_STAGE_PORTFOLIO_ITEM IN EXCLUSIVE MODE;
	UPDATE CMS_STAGE_PORTFOLIO_ITEM P SET STATUS = 'DELETED'
	WHERE P.SOURCE_ID = 'STBG'
		AND NOT EXISTS (SELECT 1 FROM SI_TEMP_STBG_CO022 T, CMS_STAGE_MARKETABLE_SEC M, CMS_STAGE_SECURITY S
			WHERE P.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID AND M.CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID
			AND S.SCI_SECURITY_DTL_ID = T.SECURITY_ID AND T.IS_VALID = 'Y');

	commit;
	
	LOCK TABLE CMS_STAGE_PORTFOLIO_ITEM IN EXCLUSIVE MODE;
	UPDATE CMS_STAGE_PORTFOLIO_ITEM A SET (TYPE, AGENT_NAME, REGISTERED_NAME, NO_OF_UNITS, UNIT_PRICE, CUSTODIAN_TYPE, SECURITY_CUSTODIAN,
		SECURITY_MATURITY_DATE, STOCK_EXCHANGE, STOCK_EXCHANGE_COUNTRY, INDEX_NAME, STOCK_CODE, ISIN_CODE,
		RECOGNIZED_EXCHANGE_FLAG, STATUS) = 
	(SELECT TYPE, NOMINEE_NAME, REGISTERED_NAME, cast(UNITS_SIGN||char(UNITS) as bigint)UNITS, UNIT_PRICE, T.CUSTODIAN_TYPE, CUSTODIAN, MATURITY_DATE, 
		STOCK_EXCHANGE, STOCK_EXCHANGE_COUNTRY, INDEX_NAME, STOCK_CODE, ISIN_CODE, RECOGNIZED_EXCHANGE, 'ACTIVE'
		FROM SI_TEMP_STBG_CO022 T, CMS_STAGE_MARKETABLE_SEC M, CMS_STAGE_SECURITY S
		WHERE T.SECURITY_ID = S.SCI_SECURITY_DTL_ID AND T.IS_VALID = 'Y'
			AND S.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID
			AND A.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID)
	WHERE EXISTS (SELECT 1 FROM SI_TEMP_STBG_CO022 T, CMS_STAGE_MARKETABLE_SEC M, CMS_STAGE_SECURITY S
									WHERE T.SECURITY_ID = S.SCI_SECURITY_DTL_ID AND T.IS_VALID = 'Y'
										AND S.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID
										AND A.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID AND S.SOURCE_ID = 'STBG');
	
	COMMIT;
											
	INSERT INTO CMS_STAGE_PORTFOLIO_ITEM (CMS_COLLATERAL_ID, ITEM_ID, TYPE, AGENT_NAME, REGISTERED_NAME, NO_OF_UNITS, UNIT_PRICE,
		CUSTODIAN_TYPE, SECURITY_CUSTODIAN, SECURITY_MATURITY_DATE, STOCK_EXCHANGE, STOCK_EXCHANGE_COUNTRY, INDEX_NAME, 
		STOCK_CODE, ISIN_CODE, RECOGNIZED_EXCHANGE_FLAG, SOURCE_ID, CMS_REF_ID, STATUS)
	(SELECT M.CMS_COLLATERAL_ID,
		CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR marketable_equity_seq), 2)) as BIGINT),
		TYPE, NOMINEE_NAME, REGISTERED_NAME, cast(UNITS_SIGN||char(UNITS) as bigint)UNITS, UNIT_PRICE, T.CUSTODIAN_TYPE, CUSTODIAN, MATURITY_DATE, 
		STOCK_EXCHANGE, STOCK_EXCHANGE_COUNTRY, INDEX_NAME, STOCK_CODE, ISIN_CODE, RECOGNIZED_EXCHANGE, 'STBG',
		CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR marketable_equity_seq), 2)) as BIGINT), 'ACTIVE'
		FROM SI_TEMP_STBG_CO022 T, CMS_STAGE_MARKETABLE_SEC M, CMS_STAGE_SECURITY S
		WHERE S.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID AND T.SECURITY_ID = S.SCI_SECURITY_DTL_ID AND T.IS_VALID = 'Y'
			AND NOT EXISTS (SELECT 1 FROM CMS_STAGE_PORTFOLIO_ITEM WHERE SOURCE_ID = 'STBG' AND CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID));

	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO022', 'STBG', 4);
	COMMIT;

	
	-------------------------------------
	-- Actual Table
	-- CMS_LIMIT_SECURITY_MAP
	--
	-------------------------------------
	
	lock table SI_TEMP_STBG_CO022 in exclusive mode;
	UPDATE SI_TEMP_STBG_CO022 T 
	SET CMS_LSP_APPR_LMTS_ID = 
		(SELECT M.CMS_LSP_APPR_LMTS_ID
			FROM SCI_LSP_LMTS_XREF_MAP M
			WHERE M.CMS_LSP_SYS_XREF_ID = T.CMS_LSP_SYS_XREF_ID)
	WHERE T.IS_VALID = 'Y';
	
	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO022', 'STBG', 501);	
	commit;
	
	UPDATE SI_TEMP_STBG_CO022 T 
	SET CMS_LIMIT_PROFILE_ID = 
		(SELECT L.CMS_LIMIT_PROFILE_ID
			FROM SCI_LSP_APPR_LMTS L
			WHERE L.CMS_LSP_APPR_LMTS_ID = T.CMS_LSP_APPR_LMTS_ID)
	WHERE T.IS_VALID = 'Y';	
	
-- 	UPDATE SI_TEMP_STBG_CO022 T 
-- 	SET (CMS_LSP_APPR_LMTS_ID, CMS_LIMIT_PROFILE_ID) = 
-- 		(SELECT M.CMS_LSP_APPR_LMTS_ID, L.CMS_LIMIT_PROFILE_ID
-- 			FROM SCI_LSP_LMTS_XREF_MAP M, SCI_LSP_APPR_LMTS L
-- 			WHERE M.CMS_LSP_SYS_XREF_ID = T.CMS_LSP_SYS_XREF_ID 
-- 			AND M.CMS_LSP_APPR_LMTS_ID = L.CMS_LSP_APPR_LMTS_ID 
-- 			AND L.SOURCE_ID = 'ARBS')
-- 	WHERE T.IS_VALID = 'Y';

	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO022', 'STBG', 5);	
	commit;

	
	
	--UPDATE CMS_LIMIT_SECURITY_MAP A SET (CMS_LSP_APPR_LMTS_ID, CMS_COLLATERAL_ID, SCI_LAS_LE_ID, CUSTOMER_CATEGORY, CMS_LSP_LMT_PROFILE_ID, SCI_LAS_SEC_ID) = 
	--(SELECT (SELECT CMS_LSP_APPR_LMTS_ID FROM SCI_LSP_APPR_LMTS WHERE LMT_ID = CIF_ID AND SOURCE_ID = 'STBG'),
	--		(SELECT CMS_COLLATERAL_ID FROM CMS_SECURITY WHERE SCI_SECURITY_DTL_ID = SECURITY_ID AND SOURCE_ID = 'STBG'),
	--		CIF_ID, 'MB',
	--		(SELECT CMS_LIMIT_PROFILE_ID FROM SCI_LSP_APPR_LMTS WHERE LMT_ID = CIF_ID AND SOURCE_ID = 'STBG')
	--		SECURITY_ID
	--	FROM SI_TEMP_STBG_CO022 T, SCI_LSP_APPR_LMTS L
	--	WHERE T.IS_VALID = 'Y' AND T.CIF_ID = L.LMT_ID AND L.LMT_ID = SCI_LAS_LE_ID AND SOURCE_ID = 'STBG')
	--WHERE EXISTS (SELECT 1 FROM SI_TEMP_STBG_CO022 T, SCI_LSP_APPR_LMTS L WHERE T.IS_VALID = 'Y' AND T.CIF_ID = L.LMT_ID AND L.LMT_ID = SCI_LAS_LE_ID AND SOURCE_ID = 'STBG');
		
	UPDATE CMS_LIMIT_SECURITY_MAP LSM SET LSM.UPDATE_STATUS_IND = 'D', LSM.DELETION_DATE = CURRENT_TIMESTAMP
	WHERE EXISTS (SELECT 1 FROM CMS_SECURITY S, SCI_LSP_APPR_LMTS L
		WHERE LSM.CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID AND LSM.CMS_LSP_APPR_LMTS_ID = L.CMS_LSP_APPR_LMTS_ID
			AND (S.STATUS = 'DELETED' OR L.CMS_LIMIT_STATUS = 'DELETED') AND LSM.SOURCE_ID = 'STBG' AND S.SOURCE_ID = 'STBG' AND L.SOURCE_ID = 'STBG');

	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO022', 'STBG', 6);			
	commit;
	
	
	INSERT INTO CMS_LIMIT_SECURITY_MAP (CHARGE_ID, CMS_LSP_APPR_LMTS_ID, CMS_COLLATERAL_ID, SCI_LAS_LE_ID, CUSTOMER_CATEGORY,
			CMS_LSP_LMT_PROFILE_ID, SCI_LAS_SEC_ID, UPDATE_STATUS_IND, SOURCE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COL_LIMIT_MAP_SEQ), 2)) as BIGINT),
			CMS_LSP_APPR_LMTS_ID, CMS_COLLATERAL_ID, CIF_ID, 'MB', CMS_LIMIT_PROFILE_ID, SECURITY_ID, 'I', 'STBG'
		FROM SI_TEMP_STBG_CO022 T
		WHERE T.IS_VALID = 'Y' 
		AND CMS_LSP_APPR_LMTS_ID is not null
		AND NOT EXISTS (SELECT 1 
						FROM CMS_LIMIT_SECURITY_MAP M, CMS_SECURITY S 
						WHERE T.IS_VALID = 'Y' 
						AND M.CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID
						AND S.SCI_SECURITY_DTL_ID = T.SECURITY_ID 
						AND M.CMS_LSP_APPR_LMTS_ID = T.CMS_LSP_APPR_LMTS_ID 
						AND M.SOURCE_ID = 'STBG' 
						AND S.SOURCE_ID = 'STBG')
	);
	
	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO022', 'STBG', 7);	
	commit;
	
	-------------------------------------
	-- Staging Table
	-- CMS_STAGE_LIMIT_SECURITY_MAP
	--
	-------------------------------------
	
	--UPDATE CMS_STAGE_LIMIT_SECURITY_MAP SET (CMS_LSP_APPR_LMTS_ID, CMS_COLLATERAL_ID, SCI_LAS_LE_ID, CUSTOMER_CATEGORY, CMS_LSP_LMT_PROFILE_ID) = 
	--(SELECT (SELECT CMS_LSP_APPR_LMTS_ID FROM SCI_LSP_APPR_LMTS WHERE LMT_ID = CIF_ID AND SOURCE_ID = 'STBG'),
	--		(SELECT CMS_COLLATERAL_ID FROM CMS_STAGE_SECURITY WHERE SCI_SECURITY_DTL_ID = SECURITY_ID AND SOURCE_ID = 'STBG'),
	--		CIF_ID, 'MB',
	--		(SELECT CMS_LIMIT_PROFILE_ID FROM SCI_LSP_APPR_LMTS WHERE LMT_ID = CIF_ID AND SOURCE_ID = 'STBG')
	--	FROM SI_TEMP_STBG_CO022 T, SCI_LSP_APPR_LMTS L
	--	WHERE T.IS_VALID = 'Y' AND T.CIF_ID = L.LMT_ID AND L.LMT_ID = SCI_LAS_LE_ID AND SOURCE_ID = 'STBG')
	--WHERE EXISTS (SELECT 1 FROM SI_TEMP_STBG_CO022 T, SCI_LSP_APPR_LMTS L WHERE T.IS_VALID = 'Y' AND T.CIF_ID = L.LMT_ID AND L.LMT_ID = SCI_LAS_LE_ID AND SOURCE_ID = 'STBG');
		
	UPDATE CMS_STAGE_LIMIT_SECURITY_MAP LSM SET LSM.UPDATE_STATUS_IND = 'D', LSM.DELETION_DATE = CURRENT_TIMESTAMP
	WHERE EXISTS (SELECT 1 FROM CMS_STAGE_SECURITY S, SCI_LSP_APPR_LMTS L
		WHERE LSM.CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID AND LSM.CMS_LSP_APPR_LMTS_ID = L.CMS_LSP_APPR_LMTS_ID
			AND (S.STATUS = 'DELETED' OR L.CMS_LIMIT_STATUS = 'DELETED') AND LSM.SOURCE_ID = 'STBG' AND S.SOURCE_ID = 'STBG' AND L.SOURCE_ID = 'STBG');

	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO022', 'STBG', 8);			
	commit;
	
	INSERT INTO CMS_STAGE_LIMIT_SECURITY_MAP (CHARGE_ID, CMS_LSP_APPR_LMTS_ID, CMS_COLLATERAL_ID, SCI_LAS_LE_ID, CUSTOMER_CATEGORY,
			CMS_LSP_LMT_PROFILE_ID, SCI_LAS_SEC_ID, UPDATE_STATUS_IND, SOURCE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COL_LIMIT_MAP_SEQ), 2)) as BIGINT),
			CMS_LSP_APPR_LMTS_ID, CMS_COLLATERAL_ID_STG, CIF_ID, 'MB', CMS_LIMIT_PROFILE_ID, SECURITY_ID, 'I', 'STBG'
		FROM SI_TEMP_STBG_CO022 T
		WHERE T.IS_VALID = 'Y' 
		AND CMS_LSP_APPR_LMTS_ID is not null
		AND NOT EXISTS (SELECT 1 FROM CMS_STAGE_LIMIT_SECURITY_MAP M, CMS_STAGE_SECURITY S 
							WHERE T.IS_VALID = 'Y' 
							AND M.CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID
							AND S.SCI_SECURITY_DTL_ID = T.SECURITY_ID 
							AND M.CMS_LSP_APPR_LMTS_ID = T.CMS_LSP_APPR_LMTS_ID 
							AND M.SOURCE_ID = 'STBG' AND S.SOURCE_ID = 'STBG')
	);
	
	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO022', 'STBG', 0);
	
END@
	

CREATE PROCEDURE SI_RUN_TEMP_STBG_CO023
	LANGUAGE SQL
BEGIN
	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO023', 'STBG', 1);
	
	UPDATE SI_TEMP_STBG_CO023 T SET T.CMS_ITEM_ID = 
	(SELECT P.ITEM_ID FROM CMS_PORTFOLIO_ITEM P, CMS_SECURITY S, CMS_MARKETABLE_SEC M
				WHERE P.CMS_COLLATERAL_ID = M.CMS_COLLATERAL_ID AND M.CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID 
				AND S.SCI_SECURITY_DTL_ID = T.SECURITY_ID AND T.IS_VALID = 'Y' AND S.SOURCE_ID = 'STBG' AND P.SOURCE_ID = 'STBG')
	WHERE T.IS_VALID = 'Y';
	
	---------------------------------------------------
	-- Actual Table
	-- CMS_PORTFOLIO_ITEM_DTL
	--
	---------------------------------------------------

	UPDATE CMS_PORTFOLIO_ITEM_DTL I SET NUMBER_OF_UNITS = 0
	WHERE EXISTS (SELECT 1 FROM CMS_PORTFOLIO_ITEM P, CMS_MARKETABLE_SEC MS, CMS_SECURITY S
		WHERE I.ITEM_ID = P.ITEM_ID AND P.CMS_COLLATERAL_ID = MS.CMS_COLLATERAL_ID AND MS.CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID
			AND P.SOURCE_ID = 'STBG' AND S.SOURCE_ID = 'STBG' AND I.SHARE_TYPE = 'P')
		AND NOT EXISTS (SELECT 1 FROM CMS_PORTFOLIO_ITEM P, CMS_MARKETABLE_SEC MS, CMS_SECURITY S, SI_TEMP_STBG_CO023 T
		WHERE I.ITEM_ID = P.ITEM_ID AND P.CMS_COLLATERAL_ID = MS.CMS_COLLATERAL_ID AND MS.CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID
			AND S.SCI_SECURITY_DTL_ID = T.SECURITY_ID AND I.SHARE_ID = T.SHARE_ID
			AND P.SOURCE_ID = 'STBG' AND S.SOURCE_ID = 'STBG' AND T.IS_VALID = 'Y');

	UPDATE CMS_PORTFOLIO_ITEM_DTL I SET (NUMBER_OF_UNITS, SHARE_TYPE, TRANSACTION_DATE, UNIT_SIGN) = 
	(SELECT T.UNITS, T.SHARES_TYPE, T.TRANSACTION_DATE, CASE SIGN_OF_UNITS WHEN '' THEN '+' ELSE SIGN_OF_UNITS END
		FROM SI_TEMP_STBG_CO023 T
		WHERE T.IS_VALID = 'Y' AND T.SHARE_ID = I.SHARE_ID)
	WHERE EXISTS (SELECT 1 FROM CMS_PORTFOLIO_ITEM P, CMS_MARKETABLE_SEC MS, CMS_SECURITY S, SI_TEMP_STBG_CO023 T
		WHERE I.ITEM_ID = P.ITEM_ID AND P.CMS_COLLATERAL_ID = MS.CMS_COLLATERAL_ID AND MS.CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID
			AND S.SCI_SECURITY_DTL_ID = T.SECURITY_ID AND I.SHARE_ID = T.SHARE_ID
			AND P.SOURCE_ID = 'STBG' AND S.SOURCE_ID = 'STBG' AND T.IS_VALID = 'Y');

	INSERT INTO CMS_PORTFOLIO_ITEM_DTL (ITEM_DTL_ID, ITEM_ID, NUMBER_OF_UNITS, SHARE_TYPE, STATUS, TRANSACTION_DATE, UNIT_SIGN, SHARE_ID)
	(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR marketable_equity_seq), 2)) as BIGINT),
			CMS_ITEM_ID, UNITS, SHARES_TYPE, 'ACTIVE', TRANSACTION_DATE, CASE SIGN_OF_UNITS WHEN '' THEN '+' ELSE SIGN_OF_UNITS END, T.SHARE_ID
		FROM SI_TEMP_STBG_CO023 T
		WHERE T.IS_VALID = 'Y' 
			AND NOT EXISTS (SELECT 1 FROM CMS_PORTFOLIO_ITEM_DTL I, CMS_PORTFOLIO_ITEM P, CMS_MARKETABLE_SEC MS, CMS_SECURITY S
				WHERE I.ITEM_ID = P.ITEM_ID AND P.CMS_COLLATERAL_ID = MS.CMS_COLLATERAL_ID AND MS.CMS_COLLATERAL_ID = S.CMS_COLLATERAL_ID
					AND S.SCI_SECURITY_DTL_ID = T.SECURITY_ID AND I.SHARE_ID = T.SHARE_ID
					AND P.SOURCE_ID = 'STBG' AND S.SOURCE_ID = 'STBG' AND T.IS_VALID = 'Y'));

	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO023', 'STBG', 0);
END@


CREATE PROCEDURE SI_RUN_TEMP_STBG_CO024
	LANGUAGE SQL
BEGIN
  CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO024', 'STBG', 1);

	-------------------------------------
	-- Auto Feed Std Code
	-- COMMON_CODE_CATEGORY_ENTRY
	--
	-------------------------------------
	
	FOR cur_std_code AS
		SELECT DISTINCT ID_TYPE code, ID_DESC desc,
				ID_CAT cat, 'STBG' source_id
			FROM SI_TEMP_STBG_CO024_PLEDGOR
			WHERE LENGTH(ID_TYPE) > 0
				AND LENGTH(ID_DESC) > 0
	DO
		CALL si_auto_feed_standard_code(cur_std_code.code, cur_std_code.desc, cur_std_code.cat, cur_std_code.source_id);--
	END FOR;--
	
	
	---------------------------------------------------
	-- Temp Table
	-- Distinct Pledgor
	-- SI_TEMP_STBG_CO024_PLEDGOR
	---------------------------------------------------
	
	DELETE FROM SI_TEMP_STBG_CO024_PLEDGOR;
	
	INSERT INTO SI_TEMP_STBG_CO024_PLEDGOR
	(SELECT DISTINCT CIF_NUMBER, SETTLEMENT_ACCT_NUMBER, PLEDGOR_CIF_SOURCE, 
		PLEDGOR_LEGAL_NAME,
		INCORPORATION_COUNTRY, 'ID_TYPE',
		ID_DESC, 
		ID_TYPE
		FROM SI_TEMP_STBG_CO024 WHERE IS_VALID = 'Y');
	
	
	---------------------------------------------------
	-- Actual Table
	-- sci_pledgor_dtl
	--
	---------------------------------------------------
	
	UPDATE SCI_PLEDGOR_DTL SET UPDATE_STATUS_IND = 'D'
		WHERE SOURCE_ID = 'STBG' AND NOT EXISTS (SELECT 1 FROM SI_TEMP_STBG_CO024_PLEDGOR WHERE PLG_LE_ID = CIF_NUMBER);
	
	UPDATE SCI_PLEDGOR_DTL A SET (PLG_LEGAL_NAME, UPDATE_STATUS_IND) =
		(SELECT PLEDGOR_LEGAL_NAME, 'U'
			FROM SI_TEMP_STBG_CO024_PLEDGOR
			WHERE CIF_NUMBER = A.PLG_LE_ID FETCH FIRST 1 ROW ONLY)
		WHERE SOURCE_ID = 'STBG'
			AND EXISTS (SELECT '1' FROM SI_TEMP_STBG_CO024_PLEDGOR
							WHERE A.PLG_LE_ID = CIF_NUMBER);
	
	INSERT INTO SCI_PLEDGOR_DTL (CMS_PLEDGOR_DTL_ID, PLG_LE_ID, PLG_LE_ID_SRC_NUM, PLG_LE_ID_SRC_VALUE, 
									PLG_ID_TYPE_NUM, PLG_ID_TYPE_VALUE, PLG_LEGAL_NAME, PLG_INC_CNTRY_ISO_CODE, SOURCE_ID, UPDATE_STATUS_IND)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR PLEDGOR_SEQ), 2)) AS BIGINT),
				CIF_NUMBER, '37', 'ARBS', ID_CAT, ID_TYPE, PLEDGOR_LEGAL_NAME, INCORPORATION_COUNTRY, 'STBG', 'I'
			FROM SI_TEMP_STBG_CO024_PLEDGOR T
			WHERE NOT EXISTS (SELECT '1' FROM SCI_PLEDGOR_DTL
								WHERE T.CIF_NUMBER = PLG_LE_ID
									AND SOURCE_ID = 'STBG'));
	
	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO024', 'STBG', 2);
	COMMIT;
	
	---------------------------------------------------
	-- Actual Table
	-- sci_sec_pldgr_map
	--
	---------------------------------------------------

	UPDATE SI_TEMP_STBG_CO024 T SET (CMS_PLEDGOR_DTL_ID, CMS_COLLATERAL_ID) = 
	(SELECT P.CMS_PLEDGOR_DTL_ID, S.CMS_COLLATERAL_ID
		FROM SCI_PLEDGOR_DTL P, CMS_SECURITY S
		WHERE T.CIF_NUMBER = P.PLG_LE_ID AND P.SOURCE_ID = 'STBG'
		AND T.SECURITY_ID = S.SCI_SECURITY_DTL_ID AND S.SOURCE_ID = 'STBG' FETCH FIRST 1 ROW ONLY)
	WHERE T.IS_VALID = 'Y';
	
	UPDATE SCI_SEC_PLDGR_MAP SPM SET UPDATE_STATUS_IND = 'D'
	WHERE EXISTS (SELECT 1 FROM SCI_PLEDGOR_DTL PD WHERE PD.SOURCE_ID = 'STBG' AND PD.CMS_PLEDGOR_DTL_ID = SPM.CMS_PLEDGOR_DTL_ID)
		AND NOT EXISTS (SELECT 1 FROM SCI_PLEDGOR_DTL PD, SI_TEMP_STBG_CO024 T WHERE PD.SOURCE_ID = 'STBG'
			AND PD.CMS_PLEDGOR_DTL_ID = SPM.CMS_PLEDGOR_DTL_ID AND PD.PLG_LE_ID = T.CIF_NUMBER);
		
	INSERT INTO SCI_SEC_PLDGR_MAP (CMS_SEC_PLDGR_MAP_ID, SPM_SEC_ID, CMS_PLEDGOR_DTL_ID, CMS_COLLATERAL_ID,
			SEC_PLEDGOR_RELATIONSHIP_NUM, UPDATE_STATUS_IND, SOURCE_ID)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COL_PLEDGOR_MAP_SEQ), 2)) AS BIGINT),
				T.SECURITY_ID, 
				T.CMS_PLEDGOR_DTL_ID,
				T.CMS_COLLATERAL_ID, '34', 'I', 'STBG'
			FROM SI_TEMP_STBG_CO024 T
			WHERE T.CMS_COLLATERAL_ID IS NOT NULL AND T.CMS_PLEDGOR_DTL_ID IS NOT NULL AND T.IS_VALID = 'Y'
			AND NOT EXISTS (SELECT '1' FROM SCI_SEC_PLDGR_MAP
											WHERE CMS_COLLATERAL_ID = T.CMS_COLLATERAL_ID
											AND CMS_PLEDGOR_DTL_ID = T.CMS_PLEDGOR_DTL_ID AND SOURCE_ID = 'STBG')
		);
	
	CALL si_log_proc_time('SI_RUN_TEMP_STBG_CO024', 'STBG', 0);
END@
	
	
CREATE PROCEDURE SI_RUN_TEMP_STBG_PF001
	LANGUAGE SQL
BEGIN
  CALL si_log_proc_time('SI_RUN_TEMP_STBG_PF001', 'STBG', 1);

	---------------------------------------------------
	-- Temp Table
	-- Update feed_group_id
	--
	---------------------------------------------------

	UPDATE SI_TEMP_STBG_PF001 SET FEED_GROUP_ID = 
	(SELECT G.FEED_GROUP_ID FROM CMS_FEED_GROUP G
	     WHERE G.GROUP_TYPE = 'STOCK' AND G.GROUP_SUBTYPE = EXCHANGE_CODE AND G.GROUP_STOCK_TYPE = STOCK_TYPES)
	WHERE IS_VALID = 'Y';

	UPDATE SI_TEMP_STBG_PF001 SET STAGE_FEED_GROUP_ID = 
	(SELECT T.STAGING_REFERENCE_ID FROM TRANSACTION T, CMS_FEED_GROUP G 
      WHERE T.REFERENCE_ID = G.FEED_GROUP_ID AND T.TRANSACTION_TYPE = 'STOCK_FEED_GROUP'
        AND G.GROUP_TYPE = 'STOCK' AND G.GROUP_SUBTYPE = EXCHANGE_CODE AND G.GROUP_STOCK_TYPE = STOCK_TYPES)
	WHERE IS_VALID = 'Y';

	---------------------------------------------------
	-- Actual Table
	-- CMS_PRICE_FEED
	--
	---------------------------------------------------

	UPDATE CMS_PRICE_FEED A set (NAME, UNIT_PRICE, CURRENCY, ISIN_CODE, BOARD_TYPE,
			TYPE, LISTEDSHARE_QUANTITY, PAR_VALUE, PAID_UP_CAPITAL, EXPIRY_DATE, SHARE_STATUS, IS_SUSPENDED, LAST_UPDATED_DATE) = 
		(SELECT COUNTER_NAME, UNIT_PRICE, UNIT_PRICE_CURRENCY, ISIN_CODE, STOCK_EXCHG_TRAD_BOARD_CODE, 
			STOCK_TYPES, LISTED_SHARES_QUANTITY, PAR_VALUE, PAID_UP_CAPITAL, EXPIRY_DATE,
			CASE WHEN SHARE_STAT = '' THEN '1' ELSE SHARE_STAT END,
			STOCK_EXCHG_SUSPEND_COUNT_IND, CURRENT_TIMESTAMP
			FROM SI_TEMP_STBG_PF001 T WHERE T.IS_VALID = 'Y' AND T.STOCK_CODE = A.STOCK_CODE AND T.EXCHANGE_CODE = A.EXCHANGE AND T.FEED_GROUP_ID = A.FEED_GROUP_ID)
		WHERE EXISTS (SELECT 1 FROM SI_TEMP_STBG_PF001 T WHERE T.IS_VALID = 'Y' AND T.STOCK_CODE = A.STOCK_CODE AND T.EXCHANGE_CODE = A.EXCHANGE AND T.FEED_GROUP_ID = A.FEED_GROUP_ID);

	INSERT INTO CMS_PRICE_FEED (FEED_ID, TICKER, STOCK_CODE, NAME, EXCHANGE, UNIT_PRICE, CURRENCY, ISIN_CODE, BOARD_TYPE,
			TYPE, LISTEDSHARE_QUANTITY, PAR_VALUE, PAID_UP_CAPITAL, EXPIRY_DATE, SHARE_STATUS, IS_SUSPENDED, FEED_REF, FEED_GROUP_ID, LAST_UPDATED_DATE)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_PRICE_FEED_SEQ), 2)) as BIGINT),
			STOCK_CODE, STOCK_CODE, COUNTER_NAME, EXCHANGE_CODE, UNIT_PRICE, UNIT_PRICE_CURRENCY, ISIN_CODE, 
			STOCK_EXCHG_TRAD_BOARD_CODE, STOCK_TYPES, LISTED_SHARES_QUANTITY, PAR_VALUE, PAID_UP_CAPITAL, EXPIRY_DATE,
			CASE WHEN SHARE_STAT = '' THEN '1' ELSE SHARE_STAT END,
			STOCK_EXCHG_SUSPEND_COUNT_IND,
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_PRICE_FEED_SEQ), 2)) as BIGINT), T.FEED_GROUP_ID, CURRENT_TIMESTAMP
			FROM SI_TEMP_STBG_PF001 T
			WHERE T.IS_VALID = 'Y' 
			AND NOT EXISTS (SELECT 1 FROM CMS_PRICE_FEED A WHERE T.IS_VALID = 'Y' AND T.STOCK_CODE = A.STOCK_CODE AND T.EXCHANGE_CODE = A.EXCHANGE AND T.FEED_GROUP_ID = A.FEED_GROUP_ID));
			

	---------------------------------------------------
	-- Staging Table
	-- CMS_STAGE_PRICE_FEED
	---------------------------------------------------

	UPDATE CMS_STAGE_PRICE_FEED A set (NAME, UNIT_PRICE, CURRENCY, ISIN_CODE, BOARD_TYPE,
			TYPE, PAR_VALUE, PAID_UP_CAPITAL, EXPIRY_DATE, SHARE_STATUS, IS_SUSPENDED, LAST_UPDATED_DATE) = 
		(SELECT COUNTER_NAME, UNIT_PRICE, UNIT_PRICE_CURRENCY, ISIN_CODE, STOCK_EXCHG_TRAD_BOARD_CODE, 
			STOCK_TYPES, PAR_VALUE, PAID_UP_CAPITAL, EXPIRY_DATE,
			CASE WHEN SHARE_STAT = '' THEN '1' ELSE SHARE_STAT END,
			STOCK_EXCHG_SUSPEND_COUNT_IND, CURRENT_TIMESTAMP
			FROM SI_TEMP_STBG_PF001 T WHERE T.IS_VALID = 'Y' AND T.STOCK_CODE = A.TICKER AND T.EXCHANGE_CODE = A.EXCHANGE AND T.STAGE_FEED_GROUP_ID = A.FEED_GROUP_ID)
		WHERE EXISTS (SELECT 1 FROM SI_TEMP_STBG_PF001 T WHERE T.IS_VALID = 'Y' AND T.STOCK_CODE = A.TICKER AND T.EXCHANGE_CODE = A.EXCHANGE AND T.STAGE_FEED_GROUP_ID = A.FEED_GROUP_ID);

	INSERT INTO CMS_STAGE_PRICE_FEED (FEED_ID, TICKER, NAME, EXCHANGE, UNIT_PRICE, CURRENCY, ISIN_CODE, BOARD_TYPE,
			TYPE, PAR_VALUE, PAID_UP_CAPITAL, EXPIRY_DATE, SHARE_STATUS, IS_SUSPENDED, FEED_REF, FEED_GROUP_ID, LAST_UPDATED_DATE)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_PRICE_FEED_SEQ), 2)) as BIGINT),
			STOCK_CODE, COUNTER_NAME, EXCHANGE_CODE, UNIT_PRICE, UNIT_PRICE_CURRENCY, ISIN_CODE, STOCK_EXCHG_TRAD_BOARD_CODE, 
			STOCK_TYPES, PAR_VALUE, PAID_UP_CAPITAL, EXPIRY_DATE,
			CASE WHEN SHARE_STAT = '' THEN '1' ELSE SHARE_STAT END,
			STOCK_EXCHG_SUSPEND_COUNT_IND,
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_PRICE_FEED_SEQ), 2)) as BIGINT), T.STAGE_FEED_GROUP_ID, CURRENT_TIMESTAMP
			FROM SI_TEMP_STBG_PF001 T
			WHERE T.IS_VALID = 'Y' 
			and t.stage_feed_group_id is not null
			AND NOT EXISTS (SELECT 1 FROM CMS_STAGE_PRICE_FEED A WHERE T.IS_VALID = 'Y' AND T.STOCK_CODE = A.TICKER 
					AND T.EXCHANGE_CODE = A.EXCHANGE AND T.STAGE_FEED_GROUP_ID = A.FEED_GROUP_ID));

	---------------------------------------------------
	-- History Table
	-- CMS_PRICE_FEED_HISTORY
	---------------------------------------------------

	INSERT INTO CMS_PRICE_FEED_HISTORY (HISTORY_ID, TICKER, NAME, EXCHANGE, UNIT_PRICE, CURRENCY, ISIN_CODE, BOARD_TYPE,
			TYPE, LISTEDSHARE_QUANTITY, PAR_VALUE, PAID_UP_CAPITAL, EXPIRY_DATE, SHARE_STATUS, IS_SUSPENDED, FEED_REF, FEED_GROUP_ID, LAST_UPDATED_DATE)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_PRICE_FEED_HISTORY_SEQ), 2)) as BIGINT),
			STOCK_CODE, NAME, EXCHANGE, UNIT_PRICE, CURRENCY, ISIN_CODE, BOARD_TYPE,
			TYPE, LISTEDSHARE_QUANTITY, PAR_VALUE, PAID_UP_CAPITAL, EXPIRY_DATE, SHARE_STATUS, IS_SUSPENDED, FEED_REF, FEED_GROUP_ID, CURRENT_TIMESTAMP
			FROM CMS_PRICE_FEED
			WHERE EXISTS (SELECT 1 FROM CMS_PRICE_FEED A, SI_TEMP_STBG_PF001 T WHERE T.IS_VALID = 'Y' AND T.STOCK_CODE = A.STOCK_CODE
				AND T.EXCHANGE_CODE = A.EXCHANGE AND T.FEED_GROUP_ID = A.FEED_GROUP_ID));

	CALL si_log_proc_time('SI_RUN_TEMP_STBG_PF001', 'STBG', 2);
	COMMIT;
	
	---------------------------------------------------
	-- Actual Table
	-- CMS_CREDIT_RISK_PARAM
	---------------------------------------------------

	-- TODO: delete

	UPDATE CMS_CREDIT_RISK_PARAM A SET (IS_INT_SUSPEND, VERSION_TIME, BOARD_TYPE, SHARE_STATUS, PREV_SHARE_STATUS)=
		(SELECT IS_SUSPENDED, CMS_VERSION_TIME, BOARD_TYPE, SHARE_STATUS, A.SHARE_STATUS
			FROM CMS_PRICE_FEED
			WHERE A.FEED_ID = FEED_ID
			FETCH FIRST 1 ROW ONLY)
		WHERE EXISTS (SELECT 1 FROM CMS_PRICE_FEED R, SI_TEMP_STBG_PF001 T WHERE T.IS_VALID = 'Y' AND T.STOCK_CODE = R.STOCK_CODE AND T.EXCHANGE_CODE = R.EXCHANGE AND T.FEED_GROUP_ID = R.FEED_GROUP_ID)
		AND EXISTS (SELECT 1 FROM CMS_CREDIT_RISK_PARAM A, CMS_PRICE_FEED R WHERE A.FEED_ID = R.FEED_ID);
	
	INSERT INTO CMS_CREDIT_RISK_PARAM (PARAM_ID, IS_INT_SUSPEND, FEED_ID, PARAM_REF, VERSION_TIME, BOARD_TYPE, SHARE_STATUS)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_CREDIT_RISK_PARAM_SEQ), 2)) as BIGINT),
			IS_SUSPENDED, FEED_ID, CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_CREDIT_RISK_PARAM_SEQ), 2)) as BIGINT),
			CMS_VERSION_TIME, BOARD_TYPE, SHARE_STATUS
			FROM CMS_PRICE_FEED
			WHERE EXISTS (SELECT 1 FROM CMS_PRICE_FEED R, SI_TEMP_STBG_PF001 T WHERE T.IS_VALID = 'Y' AND T.STOCK_CODE = R.STOCK_CODE AND T.EXCHANGE_CODE = R.EXCHANGE AND T.FEED_GROUP_ID = R.FEED_GROUP_ID)
			AND NOT EXISTS (SELECT 1 FROM CMS_CREDIT_RISK_PARAM A, CMS_PRICE_FEED R WHERE A.FEED_ID = R.FEED_ID));

	---------------------------------------------------
	-- Staging Table
	-- CMS_STAGE_CREDIT_RISK_PARAM
	---------------------------------------------------

	-- TODO: delete

	UPDATE CMS_STAGE_CREDIT_RISK_PARAM A SET (IS_INT_SUSPEND, VERSION_TIME, BOARD_TYPE, SHARE_STATUS, PREV_SHARE_STATUS)=
		(SELECT IS_SUSPENDED, CMS_VERSION_TIME, BOARD_TYPE, SHARE_STATUS, A.SHARE_STATUS
			FROM CMS_PRICE_FEED
			WHERE A.FEED_ID = FEED_ID
			FETCH FIRST 1 ROW ONLY)
		WHERE EXISTS (SELECT 1 FROM CMS_PRICE_FEED R, SI_TEMP_STBG_PF001 T WHERE T.IS_VALID = 'Y' AND T.STOCK_CODE = R.STOCK_CODE AND T.EXCHANGE_CODE = R.EXCHANGE AND T.FEED_GROUP_ID = R.FEED_GROUP_ID)
		AND EXISTS (SELECT 1 FROM CMS_STAGE_CREDIT_RISK_PARAM A, CMS_PRICE_FEED R WHERE A.FEED_ID = R.FEED_ID);
	
	INSERT INTO CMS_STAGE_CREDIT_RISK_PARAM (PARAM_ID, IS_INT_SUSPEND, FEED_ID, PARAM_REF, VERSION_TIME, BOARD_TYPE, SHARE_STATUS)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_CREDIT_RISK_PARAM_SEQ), 2)) as BIGINT),
			IS_SUSPENDED, FEED_ID, CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_CREDIT_RISK_PARAM_SEQ), 2)) as BIGINT),
			CMS_VERSION_TIME, BOARD_TYPE, SHARE_STATUS
			FROM CMS_PRICE_FEED
			WHERE EXISTS (SELECT 1 FROM CMS_PRICE_FEED R, SI_TEMP_STBG_PF001 T WHERE T.IS_VALID = 'Y' AND T.STOCK_CODE = R.STOCK_CODE AND T.EXCHANGE_CODE = R.EXCHANGE AND T.FEED_GROUP_ID = R.FEED_GROUP_ID)
			AND NOT EXISTS (SELECT 1 FROM CMS_STAGE_CREDIT_RISK_PARAM A, CMS_PRICE_FEED R WHERE A.FEED_ID = R.FEED_ID));

  CALL si_log_proc_time('SI_RUN_TEMP_STBG_PF001', 'STBG', 0);

END@


CREATE PROCEDURE SI_RUN_TEMP_STBG_PF002
	LANGUAGE SQL
BEGIN
  CALL si_log_proc_time('SI_RUN_TEMP_STBG_PF002', 'STBG', 1);

	---------------------------------------------------
	-- Temp Table
	-- Update feed_group_id
	---------------------------------------------------

	UPDATE SI_TEMP_STBG_PF002 SET FEED_GROUP_ID = 
	(SELECT G.FEED_GROUP_ID FROM CMS_FEED_GROUP G
	     WHERE G.GROUP_TYPE = 'STOCK_INDEX' AND G.GROUP_SUBTYPE = CASE EXCHANGE_CODE WHEN 'KLS' THEN 'MY' WHEN 'SES' THEN 'SG' END)
	WHERE IS_VALID = 'Y';

	UPDATE SI_TEMP_STBG_PF002 SET STAGE_FEED_GROUP_ID = 
	(SELECT T.STAGING_REFERENCE_ID FROM TRANSACTION T, CMS_FEED_GROUP G 
      WHERE T.REFERENCE_ID = G.FEED_GROUP_ID AND T.TRANSACTION_TYPE = 'STOCKIDX_FEED_GROUP'
        AND G.GROUP_TYPE = 'STOCK_INDEX' AND G.GROUP_SUBTYPE = CASE EXCHANGE_CODE WHEN 'KLS' THEN 'MY' WHEN 'SES' THEN 'SG' END)
	WHERE IS_VALID = 'Y';

	---------------------------------------------------
	-- Actual Table
	-- CMS_PRICE_FEED
	---------------------------------------------------

	UPDATE CMS_PRICE_FEED A set (UNIT_PRICE, LAST_UPDATED_DATE) = 
		(SELECT T.STOCK_INDEX_PRICE, CURRENT_TIMESTAMP
			FROM SI_TEMP_STBG_PF002 T WHERE T.IS_VALID = 'Y' AND T.EXCHANGE_CODE = A.EXCHANGE AND T.STOCK_INDEX_CODE = A.STOCK_CODE
				AND T.EXCHANGE_CODE = A.EXCHANGE AND A.FEED_GROUP_ID = T.FEED_GROUP_ID)
		WHERE EXISTS (SELECT 1 FROM SI_TEMP_STBG_PF002 T, CMS_PRICE_FEED WHERE T.IS_VALID = 'Y' AND T.EXCHANGE_CODE = EXCHANGE AND 
			T.STOCK_INDEX_CODE = STOCK_CODE AND A.FEED_GROUP_ID = T.FEED_GROUP_ID);

	INSERT INTO CMS_PRICE_FEED (FEED_ID, ISIN_CODE, EXCHANGE, UNIT_PRICE, FEED_REF, FEED_GROUP_ID, LAST_UPDATED_DATE)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_PRICE_FEED_SEQ), 2)) as BIGINT),
			STOCK_INDEX_CODE, EXCHANGE_CODE, STOCK_INDEX_PRICE,
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_PRICE_FEED_SEQ), 2)) as BIGINT), FEED_GROUP_ID, CURRENT_TIMESTAMP
			FROM SI_TEMP_STBG_PF002 T
			WHERE T.IS_VALID = 'Y' AND NOT EXISTS (SELECT 1 FROM CMS_PRICE_FEED A WHERE T.EXCHANGE_CODE = A.EXCHANGE AND 
			T.STOCK_INDEX_CODE = A.STOCK_CODE AND A.FEED_GROUP_ID = T.FEED_GROUP_ID));
			
	---------------------------------------------------
	-- Staging Table
	-- CMS_STAGE_PRICE_FEED
	---------------------------------------------------

	UPDATE CMS_STAGE_PRICE_FEED A set (UNIT_PRICE, LAST_UPDATED_DATE) = 
		(SELECT STOCK_INDEX_PRICE, CURRENT_TIMESTAMP
			FROM SI_TEMP_STBG_PF002 T WHERE T.IS_VALID = 'Y' AND T.STOCK_INDEX_CODE = A.TICKER AND T.EXCHANGE_CODE = A.EXCHANGE AND T.STAGE_FEED_GROUP_ID = A.FEED_GROUP_ID)
		WHERE EXISTS (SELECT 1 FROM SI_TEMP_STBG_PF002 T WHERE T.IS_VALID = 'Y' AND T.STOCK_INDEX_CODE = A.TICKER AND T.EXCHANGE_CODE = A.EXCHANGE AND T.STAGE_FEED_GROUP_ID = A.FEED_GROUP_ID);

	INSERT INTO CMS_STAGE_PRICE_FEED (FEED_ID, ISIN_CODE, EXCHANGE, UNIT_PRICE, FEED_REF, FEED_GROUP_ID, LAST_UPDATED_DATE)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_PRICE_FEED_SEQ), 2)) as BIGINT),
			STOCK_INDEX_CODE, EXCHANGE_CODE, STOCK_INDEX_PRICE,
			CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_PRICE_FEED_SEQ), 2)) as BIGINT), STAGE_FEED_GROUP_ID, CURRENT_TIMESTAMP
			FROM SI_TEMP_STBG_PF002 T
			WHERE T.IS_VALID = 'Y' AND NOT EXISTS (SELECT 1 FROM CMS_STAGE_PRICE_FEED A WHERE T.STOCK_INDEX_CODE = A.TICKER AND T.EXCHANGE_CODE = A.EXCHANGE AND T.STAGE_FEED_GROUP_ID = A.FEED_GROUP_ID));
			
	---------------------------------------------------
	-- History Table
	-- CMS_PRICE_FEED_HISTORY
	---------------------------------------------------

	INSERT INTO CMS_PRICE_FEED_HISTORY (HISTORY_ID, ISIN_CODE, EXCHANGE, UNIT_PRICE, FEED_REF, LAST_UPDATED_DATE)
		(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_PRICE_FEED_HISTORY_SEQ), 2)) as BIGINT),
			ISIN_CODE, EXCHANGE, UNIT_PRICE, FEED_REF, CURRENT_TIMESTAMP
			FROM CMS_PRICE_FEED A
			WHERE EXISTS (SELECT 1 FROM SI_TEMP_STBG_PF002 T WHERE T.IS_VALID = 'Y' AND T.EXCHANGE_CODE = A.EXCHANGE AND 
			T.STOCK_INDEX_CODE = A.STOCK_CODE AND A.FEED_GROUP_ID = T.FEED_GROUP_ID));

  CALL si_log_proc_time('SI_RUN_TEMP_STBG_PF002', 'STBG', 0);
END@


CREATE PROCEDURE SI_RUN_TEMP_STBG_SH001
		LANGUAGE SQL
	BEGIN
	 CALL si_log_proc_time('SI_RUN_TEMP_STBG_SH001', 'STBG', 1);
	 
	---------------------------------------------------
	-- Actual Table
	-- CMS_EARMARK_GROUP
	---------------------------------------------------

	UPDATE CMS_EARMARK_GROUP G SET G.STATUS = 'DELETED'
	WHERE NOT EXISTS (SELECT 1 FROM SI_TEMP_STBG_SH001 A, CMS_PRICE_FEED B
			WHERE G.FEED_ID = B.FEED_ID AND A.STOCK_CODE = B.STOCK_CODE AND A.STOCK_EXCHANGE_CODE = B.EXCHANGE AND A.IS_VALID = 'Y')
		AND G.SOURCE_SYSTEM_ID = 'STBG';

	 UPDATE CMS_EARMARK_GROUP G SET TOTAL_NO_OF_UNITS =
	   (SELECT CAST(A.SIGN_OF_UNIT||CHAR(A.TOTAL_NO_OF_UNIT) AS BIGINT)TOTAL_NO_OF_UNIT FROM SI_TEMP_STBG_SH001 A, CMS_PRICE_FEED B 
      WHERE A.STOCK_CODE = B.STOCK_CODE AND A.STOCK_EXCHANGE_CODE = B.EXCHANGE AND A.IS_VALID = 'Y' --AND A.ISIN_CODE = B.ISIN_CODE
        --AND A.STOCK_EXCHANGE_COUNTRY=B.COUNTRY 
        AND G.FEED_ID = B.FEED_ID AND G.SOURCE_SYSTEM_ID = 'STBG')
    WHERE EXISTS 
      (SELECT 1 FROM SI_TEMP_STBG_SH001 A, CMS_PRICE_FEED B 
        WHERE G.SOURCE_SYSTEM_ID = 'STBG' AND G.FEED_ID = B.FEED_ID AND A.STOCK_CODE = B.STOCK_CODE --AND A.ISIN_CODE = B.ISIN_CODE
        AND A.STOCK_EXCHANGE_CODE = B.EXCHANGE AND A.IS_VALID = 'Y');
	 
		INSERT INTO CMS_EARMARK_GROUP (
			EARMARK_GROUP_ID,
			FEED_ID,
			SOURCE_SYSTEM_ID,
			TOTAL_NO_OF_UNITS)
			(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR CMS_EARMARK_GROUP_SEQ), 2)) as BIGINT),
				B.FEED_ID,
				'STBG',
				A.TOTAL_NO_OF_UNIT
				FROM SI_TEMP_STBG_SH001 A, CMS_PRICE_FEED B
				WHERE A.IS_VALID = 'Y' AND A.STOCK_CODE = B.STOCK_CODE --AND A.ISIN_CODE = B.ISIN_CODE
					AND A.STOCK_EXCHANGE_CODE = B.EXCHANGE
					AND NOT EXISTS (SELECT 1 FROM CMS_EARMARK_GROUP WHERE B.FEED_ID = FEED_ID AND SOURCE_SYSTEM_ID = 'STBG'));

	 CALL si_log_proc_time('SI_RUN_TEMP_STBG_SH001', 'STBG', 2);
	 
  UPDATE CMS_PORTFOLIO_ITEM P SET ISSUER_NAME =
  (SELECT ISSUER_NAME FROM SI_TEMP_STBG_SH001 T WHERE P.STOCK_CODE = T.STOCK_CODE AND T.STOCK_CODE IS NOT NULL AND T.IS_VALID = 'Y')
  WHERE P.SOURCE_ID = 'STBG';

  CALL si_log_proc_time('SI_RUN_TEMP_STBG_SH001', 'STBG', 0);
	END@
	

CREATE PROCEDURE SI_RUN_ALL_STBG
	LANGUAGE SQL
BEGIN
	DECLARE v_count INTEGER;

  SELECT COUNT(*) INTO v_count FROM SI_TEMP_STBG_PF002;
	IF v_count > 0 THEN
  	call SI_VALIDATE_TEMP_STBG_PF002;
		call SI_RUN_TEMP_STBG_PF002;
		call UTIL_TRUNCATE_TABLE('SI_TEMP_STBG_PF002');
	END IF;

  SELECT COUNT(*) INTO v_count FROM SI_TEMP_STBG_SH001;
	IF v_count > 0 THEN
		call SI_VALIDATE_TEMP_STBG_SH001;
		call SI_RUN_TEMP_STBG_SH001;
		call UTIL_TRUNCATE_TABLE('SI_TEMP_STBG_SH001');
	END IF;

  SELECT COUNT(*) INTO v_count FROM SI_TEMP_STBG_CO022;
	IF v_count > 0 THEN
		call SI_VALIDATE_TEMP_STBG_CO022;
		call SI_RUN_TEMP_STBG_CO022;
		call UTIL_TRUNCATE_TABLE('SI_TEMP_STBG_CO022');
	END IF;

  SELECT COUNT(*) INTO v_count FROM SI_TEMP_STBG_CO023;
	IF v_count > 0 THEN
		call SI_VALIDATE_TEMP_STBG_CO023;
		call SI_RUN_TEMP_STBG_CO023;
		call UTIL_TRUNCATE_TABLE('SI_TEMP_STBG_CO023');
	END IF;

  SELECT COUNT(*) INTO v_count FROM SI_TEMP_STBG_CO024;
	IF v_count > 0 THEN
		call SI_VALIDATE_TEMP_STBG_CO024;
		call SI_RUN_TEMP_STBG_CO024;
		call UTIL_TRUNCATE_TABLE('SI_TEMP_STBG_CO024');
	END IF;

	CALL SI_AUTO_CREATE_TRANSACTION;
END@

COMMIT WORK@
