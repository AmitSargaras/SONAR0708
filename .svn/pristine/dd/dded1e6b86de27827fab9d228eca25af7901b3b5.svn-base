DROP PROCEDURE BR_VALIDATE_ALL
@
DROP PROCEDURE BR_RUN_TEMP_BVLNCMAA
@
DROP PROCEDURE BR_RUN_TEMP_BVCDCLIMS
@
DROP PROCEDURE BR_CHECK_NEW_BRANCH_CODE
@
DROP PROCEDURE BR_CHECK_ALL_BRANCH_CONVERT
@
DROP PROCEDURE BR_CHECK_ALL_AA_CONVERT
@
DROP PROCEDURE BR_CHECK_ALL_FD_CONVERT
@
DROP PROCEDURE BR_CHECK_ALL_LN_ACT_CONVERT
@
DROP PROCEDURE BR_CHECK_ALL_CR_ACT_CONVERT
@
DROP PROCEDURE BR_DELETE_OLD_BRANCH_CODE
@
DROP PROCEDURE BR_RUN_ALL
@

CREATE PROCEDURE BR_VALIDATE_ALL
LANGUAGE SQL

BEGIN
	CALL BR_LOG_PROC_TIME('BR_VALIDATE_ALL', 'VALIDATE', 1);    	
	lock table BR_TEMP_BVLNCMBR in share mode; 	  
	UPDATE BR_TEMP_BVLNCMBR 
	SET 
	IS_VALID = 'N' 
	WHERE 
	NOT EXISTS (SELECT '1' 
		FROM COMMON_CODE_CATEGORY_ENTRY 
		WHERE 		
		ENTRY_CODE = WOLDBR
		AND ACTIVE_STATUS = '1'
		AND CATEGORY_CODE = '40'
		AND ENTRY_SOURCE = 'ARBS'
		)
	AND IS_VALID = 'Y';	
	COMMIT;		
	CALL BR_LOG_PROC_TIME('BR_VALIDATE_ALL', 'VALIDATE', 2);    	
	
	lock table BR_TEMP_BVLNCMAA in share mode; 	  
	UPDATE BR_TEMP_BVLNCMAA a SET IS_VALID = 'N'
	WHERE NOT EXISTS 
	(SELECT '1' FROM SCI_LSP_LMT_PROFILE
		WHERE LLP_BCA_REF_NUM = a.WOLDAP
		  AND SOURCE_ID = 'ARBS')
		  AND IS_VALID = 'Y';
	COMMIT;		
	CALL BR_LOG_PROC_TIME('BR_VALIDATE_ALL', 'VALIDATE', 3);    	
	
	lock table BR_TEMP_BVLNCMAC in share mode; 	  
	UPDATE BR_TEMP_BVLNCMAC a SET IS_VALID = 'N'
	WHERE NOT EXISTS 
	(SELECT '1' FROM SCI_LSP_SYS_XREF
		WHERE LSX_EXT_SYS_ACCT_NUM = a.WOLDAC
		  AND LSX_EXT_SYS_ACCT_TYPE = a.WACTYPE
		  AND LSX_EXT_SYS_CODE_VALUE = 'ARBS')
		  AND IS_VALID = 'Y';
	COMMIT;		
	CALL BR_LOG_PROC_TIME('BR_VALIDATE_ALL', 'VALIDATE', 4);    	

	lock table BR_TEMP_BVDDCLIMS in share mode; 	  
	UPDATE BR_TEMP_BVDDCLIMS a SET IS_VALID = 'N'
	WHERE NOT EXISTS 
	(SELECT '1' FROM SCI_LSP_SYS_XREF
		WHERE LSX_EXT_SYS_ACCT_NUM = a.OACC
		  AND LSX_EXT_SYS_ACCT_TYPE = a.ATYP
		  AND LSX_EXT_SYS_CODE_VALUE = 'ARBS')		  
		  AND IS_VALID = 'Y';
	COMMIT;		
	CALL BR_LOG_PROC_TIME('BR_VALIDATE_ALL', 'VALIDATE', 5);    	

	--CALL SI_RUNSTATS('BR_TEMP_BVCDCLIMS'); 	
	lock table BR_TEMP_BVCDCLIMS in share mode; 
	
	UPDATE BR_TEMP_BVCDCLIMS a SET IS_VALID = 'N'
	WHERE NOT EXISTS 
	(SELECT '1' FROM CMS_CASH_DEPOSIT
		WHERE DEPOSIT_REFERENCE_NUMBER = a.OACCG
		  AND DEPOSIT_RECEIPT_NUMBER = a.OFDR
		  AND SOURCE_ID = 'ARBS')
	AND NOT EXISTS
	(SELECT '1' FROM CMS_CASH_DEPOSIT
		WHERE 
		  DEPOSIT_RECEIPT_NUMBER = a.OFDR
		  AND SOURCE_ID = 'SEMA')
	AND IS_VALID = 'Y';

	COMMIT;						  
	CALL BR_LOG_PROC_TIME('BR_VALIDATE_ALL', 'VALIDATE', 0);    		
END
@


CREATE PROCEDURE BR_RUN_TEMP_BVLNCMAA
LANGUAGE SQL

BEGIN

DECLARE newaa VARCHAR(50);
DECLARE newbr VARCHAR(50);
DECLARE oldaa VARCHAR(50);
DECLARE oldbr VARCHAR(50);
DECLARE aa_key BIGINT;
DECLARE lmt_key BIGINT;
DECLARE old_limit VARCHAR(50);
DECLARE new_limit VARCHAR(50);
DECLARE source_id VARCHAR(20);

CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 1);    	
		
	----------------------------------------------------------    
	-- Process limit profile table
	----------------------------------------------------------		
	lock table SCI_LSP_LMT_PROFILE in share mode; 	
	
	UPDATE SCI_LSP_LMT_PROFILE p
	SET(						
			LLP_BCA_REF_NUM,
			CMS_ORIG_ORGANISATION
		) =
	(SELECT 
		WNEWAP, WNEWBR
		FROM BR_TEMP_BVLNCMAA t
		WHERE 
			p.LLP_BCA_REF_NUM = t.WOLDAP	    
			AND IS_VALID = 'Y')
	WHERE 
		EXISTS 
			(SELECT '1' 
				FROM BR_TEMP_BVLNCMAA t
				WHERE p.LLP_BCA_REF_NUM = t.WOLDAP	    		
				--AND p.SOURCE_ID='ARBS'	
				AND t.IS_VALID = 'Y')
	AND SOURCE_ID='ARBS';

	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 2);    	
	
	COMMIT;
	lock table BR_AUDIT_LOG in share mode; 	
	
	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'SCI_LSP_LMT_PROFILE', 'CMS_ORIG_ORGANISATION', p.CMS_LSP_LMT_PROFILE_ID, p.SOURCE_ID, WOLDBR, WNEWBR, CURRENT_TIMESTAMP  
		from SCI_LSP_LMT_PROFILE p, BR_TEMP_BVLNCMAA t
		where p.LLP_BCA_REF_NUM = t.WNEWAP	    
			AND p.SOURCE_ID='ARBS'			
			AND IS_VALID = 'Y'
			);		

	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 3);    	
			
	COMMIT;
	lock table BR_AUDIT_LOG in share mode; 	
	
	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'SCI_LSP_LMT_PROFILE', 'LLP_BCA_REF_NUM', p.CMS_LSP_LMT_PROFILE_ID, p.SOURCE_ID, WOLDAP, WNEWAP, CURRENT_TIMESTAMP  
		from SCI_LSP_LMT_PROFILE p, BR_TEMP_BVLNCMAA t
		where p.LLP_BCA_REF_NUM = t.WNEWAP	    
			AND p.SOURCE_ID='ARBS'			
			AND IS_VALID = 'Y'
			);	
			
	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 4);    	

	COMMIT;
	
	  	
	----------------------------------------------------------    
	-- Process approve limit table
	----------------------------------------------------------	
	COMMIT;
	lock table SCI_LSP_APPR_LMTS in share mode; 	
	
	
	UPDATE SCI_LSP_APPR_LMTS l
	SET(						
			LMT_BCA_REF_NUM,
			CMS_BKG_ORGANISATION
		) =
	(SELECT 
		WNEWAP, WNEWBR
	FROM BR_TEMP_BVLNCMAA t, SCI_LSP_LMT_PROFILE p 
	WHERE 
		p.LLP_BCA_REF_NUM = t.WNEWAP	    
		AND l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID		
		AND p.SOURCE_ID='ARBS'			
		AND IS_VALID = 'Y')
	WHERE 
		EXISTS 
			(SELECT '1' 
				FROM BR_TEMP_BVLNCMAA t, SCI_LSP_LMT_PROFILE p 
				WHERE l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID
				AND p.LLP_BCA_REF_NUM = t.WNEWAP	    		
				AND p.SOURCE_ID='ARBS'	
				AND IS_VALID = 'Y')
	AND l.SOURCE_ID='ARBS';
	
	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 6);    	
	
	COMMIT;
	lock table BR_AUDIT_LOG in share mode; 	
	
	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'SCI_LSP_APPR_LMTS', 'CMS_BKG_ORGANISATION', l.CMS_LSP_APPR_LMTS_ID, l.SOURCE_ID, WOLDBR, WNEWBR, CURRENT_TIMESTAMP  
		from SCI_LSP_LMT_PROFILE p, BR_TEMP_BVLNCMAA t, SCI_LSP_APPR_LMTS l 
		where p.LLP_BCA_REF_NUM = t.WNEWAP	    
			AND l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID		
			AND p.SOURCE_ID='ARBS'			
			AND l.SOURCE_ID='ARBS'			
			AND IS_VALID = 'Y'
			);		

	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 7);    	
				
	COMMIT;
	lock table BR_AUDIT_LOG in share mode; 	
	
	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'SCI_LSP_APPR_LMTS', 'LMT_BCA_REF_NUM', l.CMS_LSP_APPR_LMTS_ID, l.SOURCE_ID, WOLDAP, WNEWAP, CURRENT_TIMESTAMP  
		from SCI_LSP_LMT_PROFILE p, BR_TEMP_BVLNCMAA t, SCI_LSP_APPR_LMTS l 
		where p.LLP_BCA_REF_NUM = t.WNEWAP	    
			AND l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID		
			AND p.SOURCE_ID='ARBS'	
			AND l.SOURCE_ID='ARBS'					
			AND IS_VALID = 'Y'
			);		

	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 8);    	
						
	COMMIT;
	
		
	----------------------------------------------------------    
	-- Process joint borrower table
	----------------------------------------------------------	

	COMMIT;
	lock table SCI_LSP_JOINT_BORROWER in share mode; 	
	
	UPDATE SCI_LSP_JOINT_BORROWER l
	SET(						
			LJB_BCA_REF_NUM
		) =
	(SELECT 
		WNEWAP
	FROM BR_TEMP_BVLNCMAA t, SCI_LSP_LMT_PROFILE p 
	WHERE 
		p.LLP_BCA_REF_NUM = t.WNEWAP	    
		AND l.CMS_LMP_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID		
		AND p.SOURCE_ID='ARBS'			
		AND IS_VALID = 'Y')
	WHERE 
		EXISTS 
			(SELECT '1' 
				FROM BR_TEMP_BVLNCMAA t, SCI_LSP_LMT_PROFILE p 
				WHERE l.CMS_LMP_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID
				AND p.LLP_BCA_REF_NUM = t.WNEWAP	    		
				AND p.SOURCE_ID='ARBS'	
				AND IS_VALID = 'Y')
	AND l.SOURCE_ID='ARBS'
	AND LJB_BCA_REF_NUM is not null;

	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 10);    	
	
	COMMIT;
	lock table BR_AUDIT_LOG in share mode; 	
	
	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'SCI_LSP_JOINT_BORROWER', 'LJB_BCA_REF_NUM', l.CMS_LSP_JOINT_BORROWER_ID, l.SOURCE_ID, WOLDAP, WNEWAP, CURRENT_TIMESTAMP  
		from SCI_LSP_LMT_PROFILE p, BR_TEMP_BVLNCMAA t, SCI_LSP_JOINT_BORROWER l 
		where p.LLP_BCA_REF_NUM = t.WNEWAP	    
			AND l.CMS_LMP_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID		
			AND p.SOURCE_ID='ARBS'	
			AND l.SOURCE_ID='ARBS'					
			AND IS_VALID = 'Y'
			);	

	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 11);    	
			
	----------------------------------------------------------    
	-- Process limit-sec map table
	----------------------------------------------------------		
	
	COMMIT;
	lock table CMS_LIMIT_SECURITY_MAP in share mode; 	
	
	UPDATE CMS_LIMIT_SECURITY_MAP m
	SET(						
			SCI_LAS_BCA_REF_NUM
		) =
	(SELECT 
		WNEWAP
	FROM BR_TEMP_BVLNCMAA t, SCI_LSP_LMT_PROFILE p, SCI_LSP_APPR_LMTS l 
	WHERE 
		p.LLP_BCA_REF_NUM = t.WNEWAP	    
		AND l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID		
		AND m.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID		
		AND p.SOURCE_ID='ARBS'			
		AND l.SOURCE_ID='ARBS'			
		AND IS_VALID = 'Y')
	WHERE 
		EXISTS 
			(SELECT '1' 
				FROM BR_TEMP_BVLNCMAA t, SCI_LSP_LMT_PROFILE p, SCI_LSP_APPR_LMTS l 
				WHERE l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID
				AND m.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID		
				AND p.LLP_BCA_REF_NUM = t.WNEWAP	    		
				AND p.SOURCE_ID='ARBS'	
				AND l.SOURCE_ID='ARBS'			
				AND IS_VALID = 'Y')
	AND m.SOURCE_ID in ('ARBS', 'CLMS' )	
	AND SCI_LAS_BCA_REF_NUM is not null;

	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 12);    	
	
	COMMIT;
	lock table BR_AUDIT_LOG in share mode; 	
	
	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'CMS_LIMIT_SECURITY_MAP', 'SCI_LAS_BCA_REF_NUM', m.CHARGE_ID, m.SOURCE_ID, WOLDAP, WNEWAP, CURRENT_TIMESTAMP  
		from SCI_LSP_LMT_PROFILE p, BR_TEMP_BVLNCMAA t, SCI_LSP_APPR_LMTS l, CMS_LIMIT_SECURITY_MAP m
		where p.LLP_BCA_REF_NUM = t.WNEWAP	    
			AND l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID		
			AND m.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID		
			AND p.SOURCE_ID='ARBS'	
			AND l.SOURCE_ID='ARBS'	
			AND m.SOURCE_ID in ('ARBS', 'CLMS' )				
			AND IS_VALID = 'Y'
			AND SCI_LAS_BCA_REF_NUM is not null
			);	
			
	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 13);    	
	
	COMMIT;
	
	----------------------------------------------------------    
	-- Process account table
	----------------------------------------------------------	
	
	COMMIT;
	lock table SCI_LSP_SYS_XREF in share mode; 	
	
	UPDATE SCI_LSP_SYS_XREF x
	SET(						
			LSX_BCA_REF_NUM
		) =
	(SELECT 
		WNEWAP
	FROM BR_TEMP_BVLNCMAA t, SCI_LSP_LMT_PROFILE p, SCI_LSP_APPR_LMTS l, SCI_LSP_LMTS_XREF_MAP m 
	WHERE 
		p.LLP_BCA_REF_NUM = t.WNEWAP	    
		AND l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID		
		AND m.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID		
		AND x.CMS_LSP_SYS_XREF_ID = m.CMS_LSP_SYS_XREF_ID
		AND p.SOURCE_ID='ARBS'			
		AND l.SOURCE_ID='ARBS'						
		AND IS_VALID = 'Y')
	WHERE 
		EXISTS 
			(SELECT '1' 
				FROM BR_TEMP_BVLNCMAA t, SCI_LSP_LMT_PROFILE p, SCI_LSP_APPR_LMTS l, SCI_LSP_LMTS_XREF_MAP m  
				WHERE l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID
				AND m.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID		
				AND x.CMS_LSP_SYS_XREF_ID = m.CMS_LSP_SYS_XREF_ID
				AND p.LLP_BCA_REF_NUM = t.WNEWAP	    		
				AND p.SOURCE_ID='ARBS'	
				AND l.SOURCE_ID='ARBS'								
				AND IS_VALID = 'Y')
	AND x.LSX_EXT_SYS_CODE_VALUE='ARBS'
	AND LSX_BCA_REF_NUM is not null;

	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 15);    	
	
	COMMIT;
	lock table BR_AUDIT_LOG in share mode; 	
	
	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'SCI_LSP_SYS_XREF', 'LSX_BCA_REF_NUM', x.CMS_LSP_SYS_XREF_ID, x.LSX_EXT_SYS_CODE_VALUE, WOLDAP, WNEWAP, CURRENT_TIMESTAMP  
		from SCI_LSP_LMT_PROFILE p, BR_TEMP_BVLNCMAA t, SCI_LSP_APPR_LMTS l, SCI_LSP_LMTS_XREF_MAP m, SCI_LSP_SYS_XREF x
		where p.LLP_BCA_REF_NUM = t.WNEWAP	    
			AND l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID		
			AND m.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID		
			AND x.CMS_LSP_SYS_XREF_ID = m.CMS_LSP_SYS_XREF_ID
			AND p.SOURCE_ID='ARBS'	
			AND l.SOURCE_ID='ARBS'	
			AND x.LSX_EXT_SYS_CODE_VALUE='ARBS'			
			AND IS_VALID = 'Y'
			AND LSX_BCA_REF_NUM is not null
			);	

	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 16);    	
		 	 
    COMMIT;
	
	----------------------------------------------------------    
	-- Process NPL table
	----------------------------------------------------------	
	
	COMMIT;
	lock table CMS_NPL in share mode; 	
	
	UPDATE CMS_NPL n
	SET( NPL_BCA_REF_NUM ) =
	(SELECT 
		WNEWAP
	FROM BR_TEMP_BVLNCMAA t 
	WHERE n.NPL_BCA_REF_NUM = t.WOLDAP 			
			AND IS_VALID = 'Y')
	WHERE 
		EXISTS 
			(SELECT '1' 
				FROM BR_TEMP_BVLNCMAA t 
				WHERE n.NPL_BCA_REF_NUM = t.WOLDAP  
				AND IS_VALID = 'Y')
		AND SOURCE_ID = 'ARBS'
		AND NPL_BCA_REF_NUM is not null;

	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 18);    	
		
	COMMIT;
	lock table BR_AUDIT_LOG in share mode; 	
	
	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'CMS_NPL', 'NPL_BCA_REF_NUM', p.CMS_NPL_ID, p.SOURCE_ID, WOLDAP, WNEWAP, CURRENT_TIMESTAMP  
		from CMS_NPL p, BR_TEMP_BVLNCMAA t
		where p.NPL_BCA_REF_NUM = t.WNEWAP	
			AND NPL_BCA_REF_NUM is not null
			AND p.SOURCE_ID='ARBS'			
			AND IS_VALID = 'Y'
			);	
	
	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 19);    	
	
	COMMIT;
	
	CALL SI_RUNSTATS('STAGE_LIMIT_PROFILE');
	
	lock table STAGE_LIMIT_PROFILE in share mode; 	
	
	----------------------------------------------------------    
	-- Process staging limit profile
	----------------------------------------------------------	
	UPDATE STAGE_LIMIT_PROFILE s
	SET(						
			LLP_BCA_REF_NUM,
			CMS_ORIG_ORGANISATION
		) =
	(SELECT 
		WNEWAP, WNEWBR
	FROM BR_TEMP_BVLNCMAA a, TRANS_HISTORY h, TRANSACTION t, SCI_LSP_LMT_PROFILE p
	WHERE 
		p.LLP_BCA_REF_NUM = a.WNEWAP	    
		AND p.SOURCE_ID='ARBS'			
		AND IS_VALID = 'Y'
		AND t.reference_id = p.CMS_LSP_LMT_PROFILE_ID
		AND h.staging_reference_id = char( s.CMS_LSP_LMT_PROFILE_ID )
	    AND t.transaction_type = 'LIMITPROFILE' 
		AND t.transaction_id = h.transaction_id )
	WHERE char(CMS_LSP_LMT_PROFILE_ID) in 
	( select DISTINCT h.staging_reference_id 
	  from TRANS_HISTORY h, TRANSACTION t, SCI_LSP_LMT_PROFILE p
	  WHERE t.reference_id = p.CMS_LSP_LMT_PROFILE_ID
	    AND t.transaction_type = 'LIMITPROFILE' 
		AND t.transaction_id = h.transaction_id )
		AND s.SOURCE_ID='ARBS';	
		
		
	----------------------------------------------------------    
	-- Process staging tables
	----------------------------------------------------------	
	
	COMMIT;
	
	CALL SI_RUNSTATS('STAGE_LIMIT');
	CALL SI_RUNSTATS('CMS_STAGE_LIMIT_SECURITY_MAP');
	CALL SI_RUNSTATS('CMS_STAGE_LSP_SYS_XREF');
		
    CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 20);    
	
	FOR each_record AS		
	
	select l.CMS_LSP_APPR_LMTS_ID as lmt_key, WNEWAP as newaa, WOLDAP as oldaa, WNEWBR as newbr, WOLDBR as oldbr, 
	p.SOURCE_ID as source_id
	from SCI_LSP_LMT_PROFILE p, BR_TEMP_BVLNCMAA t, SCI_LSP_APPR_LMTS l 
	where p.LLP_BCA_REF_NUM = t.WNEWAP	  
        and l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID
		and l.source_id='ARBS' 
        and p.source_id='ARBS' 
		and t.is_valid = 'Y'

	
	DO				
		UPDATE STAGE_LIMIT s SET LMT_BCA_REF_NUM = newaa, CMS_BKG_ORGANISATION = newbr
		WHERE char(CMS_LSP_APPR_LMTS_ID) in 
		( select DISTINCT h.staging_reference_id 
		  from TRANS_HISTORY h, TRANSACTION t
		  WHERE t.reference_id = lmt_key
		    AND t.transaction_type = 'LIMIT' 
			AND t.transaction_id = h.transaction_id )
		AND s.SOURCE_ID='ARBS';	
		
		UPDATE CMS_STAGE_LIMIT_SECURITY_MAP m SET SCI_LAS_BCA_REF_NUM = newaa
		WHERE char(CMS_LSP_APPR_LMTS_ID) IN 
		( select DISTINCT h.staging_reference_id 
		  from TRANS_HISTORY h, TRANSACTION t
		  WHERE t.reference_id = lmt_key		
		    AND t.transaction_type = 'LIMIT' 
			AND t.transaction_id = h.transaction_id 
	        )
		AND m.SOURCE_ID in ('ARBS'	, 'CLMS' );		
		
		UPDATE CMS_STAGE_LSP_SYS_XREF x SET LSX_BCA_REF_NUM = newaa
		WHERE CMS_LSP_SYS_XREF_ID IN 
		( select distinct m.CMS_LSP_SYS_XREF_ID
		  from TRANS_HISTORY h, TRANSACTION t, STAGE_LIMIT_XREF m, STAGE_LIMIT s
		  WHERE t.reference_id = lmt_key
			AND h.staging_reference_id = char( s.CMS_LSP_APPR_LMTS_ID )
			AND s.CMS_LSP_APPR_LMTS_ID = m.CMS_LSP_APPR_LMTS_ID
		    AND t.transaction_type = 'LIMIT' 
			AND t.transaction_id = h.transaction_id 
	        AND s.SOURCE_ID = 'ARBS'
	        )
		AND x.LSX_EXT_SYS_CODE_VALUE='ARBS';
	 
						 
	END FOR; 	

    CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 21);    
	
	----------------------------------------------------------    
	-- Updating Limit ID
	----------------------------------------------------------	
	FOR each_record1 AS
			
		select l.CMS_LSP_APPR_LMTS_ID as lmt_key, LMT_ID as old_limit, 
		t.WNEWAP || '-' || LMT_FAC_CODE || '-' || char(LMT_FAC_SEQ) as new_limit, p.source_id as source_id
		from SCI_LSP_APPR_LMTS l, SCI_LSP_LMT_PROFILE p, BR_TEMP_BVLNCMAA t 
		where p.LLP_BCA_REF_NUM = t.WNEWAP	  
			and l.CMS_LIMIT_PROFILE_ID = p.CMS_LSP_LMT_PROFILE_ID
			and l.source_id='ARBS' 
			and p.source_id='ARBS' 
			and t.is_valid = 'Y'
	DO	
	----------------------------------------------------------    
	-- Process each record
	----------------------------------------------------------	
	 
		UPDATE SCI_LSP_APPR_LMTS SET LMT_ID = new_limit WHERE CMS_LSP_APPR_LMTS_ID = lmt_key;
		
		CALL BR_LOG_AUDIT('SCI_LSP_APPR_LMTS', 'LMT_ID', lmt_key, '', '', source_id, old_limit, new_limit );    	

		UPDATE SCI_LSP_SYS_XREF SET LSX_LMT_ID = new_limit WHERE CMS_LSP_SYS_XREF_ID in 
			( select CMS_LSP_SYS_XREF_ID from SCI_LSP_LMTS_XREF_MAP where CMS_LSP_APPR_LMTS_ID = lmt_key )
			AND LSX_EXT_SYS_CODE_VALUE = 'ARBS';
		
		INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
			(select 'SCI_LSP_SYS_XREF', 'LSX_LMT_ID', p.CMS_LSP_SYS_XREF_ID, p.LSX_EXT_SYS_CODE_VALUE, old_limit, new_limit, CURRENT_TIMESTAMP  
				from SCI_LSP_SYS_XREF p
				where CMS_LSP_SYS_XREF_ID in 
					( select CMS_LSP_SYS_XREF_ID from SCI_LSP_LMTS_XREF_MAP where CMS_LSP_APPR_LMTS_ID = lmt_key ) 
				AND LSX_EXT_SYS_CODE_VALUE = 'ARBS'
			);			
				
		UPDATE CMS_LIMIT_SECURITY_MAP SET SCI_LAS_LMT_ID = new_limit WHERE CMS_LSP_APPR_LMTS_ID = lmt_key
			AND SOURCE_ID in ('ARBS', 'CLMS' );
			
		INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
			(select 'CMS_LIMIT_SECURITY_MAP', 'SCI_LAS_LMT_ID', p.CHARGE_ID, p.SOURCE_ID, old_limit, new_limit, CURRENT_TIMESTAMP  
				from CMS_LIMIT_SECURITY_MAP p
				where CMS_LSP_APPR_LMTS_ID = lmt_key
				AND p.SOURCE_ID in ('ARBS', 'CLMS' )
			);
							
		UPDATE SCI_LSP_LMTS_XREF_MAP SET LXM_LMT_ID = new_limit WHERE CMS_LSP_APPR_LMTS_ID = lmt_key;
			
		INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
			(select 'SCI_LSP_LMTS_XREF_MAP', 'LXM_LMT_ID', p.CMS_LSP_LMTS_XREF_MAP_ID, source_id, old_limit, new_limit, CURRENT_TIMESTAMP  
				from SCI_LSP_LMTS_XREF_MAP p
				where CMS_LSP_APPR_LMTS_ID = lmt_key
			);			
				
		UPDATE STAGE_LIMIT SET LMT_ID = new_limit
			WHERE char(CMS_LSP_APPR_LMTS_ID) in 
			( select DISTINCT h.staging_reference_id 
			  from TRANS_HISTORY h, TRANSACTION t
			  WHERE t.reference_id = lmt_key
			    AND t.transaction_type = 'LIMIT' 
				AND t.transaction_id = h.transaction_id )
				AND SOURCE_ID = 'ARBS';

							
		UPDATE CMS_STAGE_LSP_SYS_XREF SET LSX_LMT_ID = new_limit 
		WHERE CMS_LSP_SYS_XREF_ID IN 
		( select distinct CMS_LSP_SYS_XREF_ID
		  from TRANS_HISTORY h, TRANSACTION t, STAGE_LIMIT_XREF m, STAGE_LIMIT s
		  WHERE t.reference_id = lmt_key 
			AND t.staging_reference_id = s.CMS_LSP_APPR_LMTS_ID
			AND s.CMS_LSP_APPR_LMTS_ID = m.CMS_LSP_APPR_LMTS_ID
		    AND t.transaction_type = 'LIMIT' 
			AND t.transaction_id = h.transaction_id 
	        AND s.SOURCE_ID = 'ARBS'
	        )
			AND LSX_EXT_SYS_CODE_VALUE = 'ARBS';
			
					
		UPDATE CMS_STAGE_LIMIT_SECURITY_MAP SET SCI_LAS_LMT_ID = new_limit
			WHERE char(CMS_LSP_APPR_LMTS_ID) in 
			( select DISTINCT h.staging_reference_id 
				  from TRANS_HISTORY h, TRANSACTION t
				  WHERE t.reference_id = lmt_key
					AND t.transaction_type = 'LIMIT' 
					AND t.transaction_id = h.transaction_id  )
			AND SOURCE_ID in ('ARBS'	, 'CLMS' );		
	
		UPDATE STAGE_LIMIT_XREF SET LXM_LMT_ID = new_limit
			WHERE char(CMS_LSP_APPR_LMTS_ID) in 
			( select DISTINCT h.staging_reference_id 
				  from TRANS_HISTORY h, TRANSACTION t
				  WHERE t.reference_id = lmt_key
					AND t.transaction_type = 'LIMIT' 
					AND t.transaction_id = h.transaction_id  )
		;	
		
		
END FOR; 		
	
	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVLNCMAA', 'BVLNCMAA', 0);    		
END
@

CREATE PROCEDURE BR_RUN_TEMP_BVCDCLIMS
LANGUAGE SQL

BEGIN

DECLARE new_source_sec_id VARCHAR(50); 
DECLARE old_source_sec_id VARCHAR(50); 
DECLARE NFDR VARCHAR(50);
DECLARE NACCG VARCHAR(50);
DECLARE OFDR VARCHAR(50);
DECLARE OACCG VARCHAR(50);
DECLARE sec_key BIGINT;
DECLARE sec_source_key VARCHAR(50);
DECLARE source_id VARCHAR(20);

CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVCDCLIMS', 'BVCDCLIMS', 1);    	
	
FOR each_record AS
	
	select CMS_COLLATERAL_ID as sec_key, SOURCE_SECURITY_ID as sec_source_key, 
		NFDR as NFDR, NACCG as NACCG, OFDR as OFDR, OACCG as OACCG, d.SOURCE_ID as source_id  
	from CMS_CASH_DEPOSIT d, BR_TEMP_BVCDCLIMS t 
	where d.DEPOSIT_RECEIPT_NUMBER = t.OFDR
	    and d.DEPOSIT_REFERENCE_NUMBER = t.OACCG	    
		and d.source_id='ARBS' 
		and t.is_valid = 'Y'
	
DO	
	----------------------------------------------------------    
	-- Process each AA
	----------------------------------------------------------	
	 
	UPDATE CMS_CASH_DEPOSIT SET DEPOSIT_RECEIPT_NUMBER = NFDR, DEPOSIT_REFERENCE_NUMBER = NACCG WHERE CMS_COLLATERAL_ID = sec_key;
	
	CALL BR_LOG_AUDIT('CMS_CASH_DEPOSIT', 'DEPOSIT_RECEIPT_NUMBER', sec_key, sec_source_key, '', source_id, OFDR, NFDR );    	
	
	CALL BR_LOG_AUDIT('CMS_CASH_DEPOSIT', 'DEPOSIT_REFERENCE_NUMBER', sec_key, sec_source_key, '', source_id, OACCG, NACCG );    	
	
	UPDATE CMS_STAGE_CASH_DEPOSIT SET DEPOSIT_RECEIPT_NUMBER = NFDR, DEPOSIT_REFERENCE_NUMBER = NACCG
	WHERE char(CMS_COLLATERAL_ID) in 
	( select DISTINCT h.staging_reference_id 
	  from TRANS_HISTORY h, TRANSACTION t
	  WHERE 
		t.reference_id = sec_key
	    AND t.transaction_type = 'COL' 
		AND t.transaction_id = h.transaction_id );
			
END FOR; 	

CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVCDCLIMS', 'BVCDCLIMS', 2);    	
	
FOR each_record1 AS

	select s.CMS_COLLATERAL_ID as sec_key, t.OFDR as OFDR, t.NFDR as NFDR, 
	s.SCI_SECURITY_DTL_ID as old_source_sec_id, SCI_LAS_LE_ID || t.NFDR as new_source_sec_id
	from CMS_SECURITY s, CMS_LIMIT_SECURITY_MAP m, BR_TEMP_BVCDCLIMS t 
	where m.CMS_COLLATERAL_ID in (
		select CMS_COLLATERAL_ID from CMS_CASH_DEPOSIT d
		where d.DEPOSIT_RECEIPT_NUMBER = t.OFDR
		and d.source_id='SEMA' )
	and s.SOURCE_ID='SEMA'
	and m.SOURCE_ID='SEMA'
	and s.CMS_COLLATERAL_ID = m.CMS_COLLATERAL_ID
	and t.is_valid = 'Y'
	
DO	
	----------------------------------------------------------    
	-- Process each security
	----------------------------------------------------------	
	 
	UPDATE CMS_SECURITY SET SCI_SECURITY_DTL_ID = new_source_sec_id WHERE CMS_COLLATERAL_ID = sec_key;
	
	CALL BR_LOG_AUDIT('CMS_SECURITY', 'SCI_SECURITY_DTL_ID', sec_key, sec_source_key, '', source_id, old_source_sec_id, new_source_sec_id );    	

	UPDATE CMS_CASH_DEPOSIT SET SOURCE_SECURITY_ID = new_source_sec_id, DEPOSIT_RECEIPT_NUMBER = NFDR WHERE CMS_COLLATERAL_ID = sec_key;
	
	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'CMS_CASH_DEPOSIT', 'SOURCE_SECURITY_ID', p.CASH_DEPOSIT_ID, p.SOURCE_ID, old_source_sec_id, new_source_sec_id, CURRENT_TIMESTAMP  
		from CMS_CASH_DEPOSIT p
		where CMS_COLLATERAL_ID = sec_key  
			);		

	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'CMS_CASH_DEPOSIT', 'DEPOSIT_RECEIPT_NUMBER', p.CASH_DEPOSIT_ID, p.SOURCE_ID, OFDR, NFDR, CURRENT_TIMESTAMP  
		from CMS_CASH_DEPOSIT p
		where CMS_COLLATERAL_ID = sec_key  
			);	
			
	UPDATE CMS_SECURITY_SOURCE SET SOURCE_SECURITY_ID = new_source_sec_id WHERE CMS_COLLATERAL_ID = sec_key;
	
	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'CMS_SECURITY_SOURCE', 'SOURCE_SECURITY_ID', p.CMS_SECURITY_SOURCE_ID, p.SOURCE_ID, old_source_sec_id, new_source_sec_id, CURRENT_TIMESTAMP  
		from CMS_SECURITY_SOURCE p
		where CMS_COLLATERAL_ID = sec_key  
			);	
			
	UPDATE CMS_CHARGE_DETAIL SET SCI_LAS_SEC_ID = new_source_sec_id WHERE CMS_COLLATERAL_ID = sec_key;
	
	INSERT INTO 
			BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(select 'CMS_CHARGE_DETAIL', 'SCI_LAS_SEC_ID', p.CHARGE_DETAIL_ID, p.SOURCE_ID, old_source_sec_id, new_source_sec_id, CURRENT_TIMESTAMP  
		from CMS_CHARGE_DETAIL p
		where CMS_COLLATERAL_ID = sec_key  
			);	
	
	UPDATE CMS_STAGE_SECURITY SET SCI_SECURITY_DTL_ID = new_source_sec_id 
	WHERE char(CMS_COLLATERAL_ID) in 
	( select DISTINCT h.staging_reference_id 
	  from TRANS_HISTORY h, TRANSACTION t
	  WHERE t.reference_id = sec_key
	    AND t.transaction_type = 'COL' 
		AND t.transaction_id = h.transaction_id );

	
			
	UPDATE CMS_STAGE_CASH_DEPOSIT SET SOURCE_SECURITY_ID = new_source_sec_id, DEPOSIT_RECEIPT_NUMBER = NFDR 
	WHERE char(CMS_COLLATERAL_ID) in 
		( select DISTINCT h.staging_reference_id 
			  from TRANS_HISTORY h, TRANSACTION t
			  WHERE t.reference_id = sec_key
			    AND t.transaction_type = 'COL' 
				AND t.transaction_id = h.transaction_id );

	
						
	UPDATE CMS_STAGE_CHARGE_DETAIL SET SCI_LAS_SEC_ID = new_source_sec_id 
	WHERE char(CMS_COLLATERAL_ID) in 
		( select DISTINCT h.staging_reference_id 
			  from TRANS_HISTORY h, TRANSACTION t
			  WHERE t.reference_id = sec_key
			    AND t.transaction_type = 'COL' 
				AND t.transaction_id = h.transaction_id );	

	
					
END FOR; 	
	
	
	CALL BR_LOG_PROC_TIME('BR_RUN_TEMP_BVCDCLIMS', 'BVCDCLIMS', 0);    		
END
@

CREATE PROCEDURE BR_CHECK_NEW_BRANCH_CODE
	LANGUAGE SQL
BEGIN

	FOR cur_std_code AS
		SELECT DISTINCT WNEWBR code, WNEWBR desc,
			   '40' cat, 'ARBS' source_id
		  FROM BR_TEMP_BVLNCMBR
		 WHERE LENGTH(WNEWBR) > 0
		 AND NOT EXISTS ( SELECT '1'
		  FROM common_code_category_entry
		   WHERE category_code = '40'
		   AND entry_code = WNEWBR
		   AND entry_source = 'ARBS')
	DO
		CALL si_auto_feed_standard_code(cur_std_code.code, cur_std_code.desc, cur_std_code.cat, cur_std_code.source_id);
	END FOR;
END
@


CREATE PROCEDURE BR_DELETE_OLD_BRANCH_CODE
	LANGUAGE SQL
BEGIN
	CALL BR_LOG_PROC_TIME('BR_DELETE_OLD_BRANCH_CODE', 'DELETEBR', 1);    		
	UPDATE common_code_category_entry 
	SET ACTIVE_STATUS='0' 
	WHERE category_code = '40'
		AND entry_source = 'ARBS'
	    AND entry_code IN (SELECT DISTINCT WOLDBR 
				FROM BR_TEMP_BVLNCMBR
				WHERE LENGTH(WOLDBR) > 0
				AND IS_VALID = 'Y' )
		AND entry_code NOT IN (SELECT DISTINCT OLD_VALUE 
				FROM BR_BRANCH_NOT_CONVERT 
				WHERE ACTION_NAME='CHECKBR');
		
	CALL BR_LOG_PROC_TIME('BR_DELETE_OLD_BRANCH_CODE', 'DELETEBR', 0);    		
END
@

CREATE PROCEDURE BR_CHECK_ALL_BRANCH_CONVERT
	LANGUAGE SQL
BEGIN
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 1);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'SCI_LSP_LMT_PROFILE', 'CMS_ORIG_ORGANISATION', 
				a.CMS_LSP_LMT_PROFILE_ID, a.LLP_BCA_REF_NUM, a.SOURCE_ID, WOLDBR 
		FROM SCI_LSP_LMT_PROFILE a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.CMS_ORIG_ORGANISATION = t.WOLDBR	
			AND a.SOURCE_ID in ('ARBS', 'SEMA', 'QUAN')
			AND t.IS_VALID = 'Y'
			);		
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 2);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'SCI_LSP_APPR_LMTS', 'CMS_BKG_ORGANISATION', 
				a.CMS_LSP_APPR_LMTS_ID, a.LMT_ID, a.SOURCE_ID, WOLDBR 
		FROM SCI_LSP_APPR_LMTS a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.CMS_BKG_ORGANISATION = t.WOLDBR		
			AND a.SOURCE_ID in ('ARBS', 'SEMA', 'QUAN')
			AND t.IS_VALID = 'Y'
			);		

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 3);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'SCI_LSP_SYS_XREF', 'LSX_BKG_LOCTN_ORG', 
				a.CMS_LSP_SYS_XREF_ID, a.LSX_EXT_SYS_ACCT_NUM, a.LSX_EXT_SYS_ACCT_TYPE, a.LSX_EXT_SYS_CODE_VALUE, WOLDBR 
		FROM SCI_LSP_SYS_XREF a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.LSX_BKG_LOCTN_ORG = t.WOLDBR	
			AND a.LSX_BKG_LOCTN_ORG IS NOT NULL
			AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 4);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'CMS_SECURITY', 'SECURITY_ORGANISATION', 
				a.CMS_COLLATERAL_ID, a.SCI_SECURITY_DTL_ID, a.SOURCE_ID, WOLDBR 
		FROM CMS_SECURITY a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.SECURITY_ORGANISATION = t.WOLDBR		
			AND a.SOURCE_ID in ('ARBS', 'SEMA', 'CLMS')
			AND t.IS_VALID = 'Y'
			);	
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 5);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'CMS_SECURITY', 'SECURITY_CUSTODIAN', 
				a.CMS_COLLATERAL_ID, a.SCI_SECURITY_DTL_ID, a.SOURCE_ID, WOLDBR 
		FROM CMS_SECURITY a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.SECURITY_CUSTODIAN = t.WOLDBR		
			AND a.SECURITY_CUSTODIAN IS NOT NULL
			AND a.CUSTODIAN_TYPE = 'I'			
			AND t.IS_VALID = 'Y'
			);		

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 6);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'SCI_PLEDGOR_DTL', 'CMS_ORIG_ORGANISATION', 
				a.CMS_PLEDGOR_DTL_ID, a.PLG_LE_ID, a.SOURCE_ID, WOLDBR 
		FROM SCI_PLEDGOR_DTL a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.CMS_ORIG_ORGANISATION = t.WOLDBR	
			AND a.CMS_ORIG_ORGANISATION IS NOT NULL
			AND a.SOURCE_ID in ('ARBS', 'SEMA', 'CLMS')
			AND t.IS_VALID = 'Y'
			);		
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 7);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'CMS_TEAM_ORGANISATION_CODE', 'ORGANISATION_CODE', 
				a.CODE_ID, char(a.TEAM_ID), '', WOLDBR 
		FROM CMS_TEAM_ORGANISATION_CODE a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.ORGANISATION_CODE = t.WOLDBR				
			AND t.IS_VALID = 'Y'
			);	
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 8);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'TRANSACTION', 'TRX_ORIGIN_ORGANISATION', 
				a.REFERENCE_ID, a.TRANSACTION_ID, '', WOLDBR 
		FROM TRANSACTION a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.TRX_ORIGIN_ORGANISATION = t.WOLDBR			
			AND a.TRX_ORIGIN_ORGANISATION IS NOT NULL
			AND t.IS_VALID = 'Y'
			);	

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 9);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'TRANS_HISTORY', 'TRX_ORIGIN_ORGANISATION', 
				a.TR_HISTORY_ID, a.REFERENCE_ID, '', WOLDBR 
		FROM TRANS_HISTORY a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.TRX_ORIGIN_ORGANISATION = t.WOLDBR	
			AND a.TRX_ORIGIN_ORGANISATION IS NOT NULL			
			AND t.IS_VALID = 'Y'
			);	

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 10);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'STAGE_LIMIT_PROFILE', 'CMS_ORIG_ORGANISATION', 
				a.CMS_LSP_LMT_PROFILE_ID, a.LLP_BCA_REF_NUM, a.SOURCE_ID, WOLDBR 
		FROM STAGE_LIMIT_PROFILE a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.CMS_ORIG_ORGANISATION = t.WOLDBR	
			AND a.SOURCE_ID in ('ARBS', 'SEMA', 'QUAN')
			AND t.IS_VALID = 'Y'
			);		
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 11);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'STAGE_LIMIT', 'CMS_BKG_ORGANISATION', 
				a.CMS_LSP_APPR_LMTS_ID, a.LMT_ID, a.SOURCE_ID, WOLDBR 
		FROM STAGE_LIMIT a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.CMS_BKG_ORGANISATION = t.WOLDBR		
			AND a.SOURCE_ID in ('ARBS', 'SEMA', 'QUAN')
			AND t.IS_VALID = 'Y'
			);		

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 12);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'CMS_STAGE_LSP_SYS_XREF', 'LSX_BKG_LOCTN_ORG', 
				a.CMS_LSP_SYS_XREF_ID, a.LSX_EXT_SYS_ACCT_NUM, a.LSX_EXT_SYS_ACCT_TYPE, a.LSX_EXT_SYS_CODE_VALUE, WOLDBR 
		FROM CMS_STAGE_LSP_SYS_XREF a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.LSX_BKG_LOCTN_ORG = t.WOLDBR		
			AND a.LSX_BKG_LOCTN_ORG IS NOT NULL
			AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 13);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'CMS_STAGE_SECURITY', 'SECURITY_ORGANISATION', 
				a.CMS_COLLATERAL_ID, a.SCI_SECURITY_DTL_ID, a.SOURCE_ID, WOLDBR 
		FROM CMS_STAGE_SECURITY a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.SECURITY_ORGANISATION = t.WOLDBR		
			AND a.SOURCE_ID in ('ARBS', 'SEMA', 'CLMS')
			AND t.IS_VALID = 'Y'
			);	
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 14);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'CMS_STAGE_SECURITY', 'SECURITY_CUSTODIAN', 
				a.CMS_COLLATERAL_ID, a.SCI_SECURITY_DTL_ID, a.SOURCE_ID, WOLDBR 
		FROM CMS_STAGE_SECURITY a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.SECURITY_CUSTODIAN = t.WOLDBR	
			AND a.SECURITY_CUSTODIAN IS NOT NULL					
			AND a.CUSTODIAN_TYPE = 'I'			
			AND t.IS_VALID = 'Y'
			);		

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 15);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'STAGE_PLEDGOR_DTL', 'CMS_ORIG_ORGANISATION', 
				a.CMS_PLEDGOR_DTL_ID, a.PLG_LE_ID, a.SOURCE_ID, WOLDBR 
		FROM STAGE_PLEDGOR_DTL a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.CMS_ORIG_ORGANISATION = t.WOLDBR	
			AND a.CMS_ORIG_ORGANISATION IS NOT NULL			
			AND a.SOURCE_ID in ('ARBS', 'SEMA', 'CLMS')
			AND t.IS_VALID = 'Y'
			);		
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 16);    	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKBR', 'STAGE_TEAM_ORGANISATION_CODE', 'ORGANISATION_CODE', 
				a.CODE_ID, char(a.TEAM_ID), '', WOLDBR 
		FROM STAGE_TEAM_ORGANISATION_CODE a, BR_TEMP_BVLNCMBR t
		WHERE 
		    a.ORGANISATION_CODE = t.WOLDBR				
			AND t.IS_VALID = 'Y'
			);	
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_BRANCH_CONVERT', 'CHECKBR', 0);    
			
END
@


CREATE PROCEDURE BR_CHECK_ALL_AA_CONVERT
	LANGUAGE SQL
BEGIN	
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 1);    		
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'SCI_LSP_LMT_PROFILE', 'LLP_BCA_REF_NUM', 
				a.CMS_LSP_LMT_PROFILE_ID, a.LLP_BCA_REF_NUM, a.SOURCE_ID, WOLDAP 
		FROM SCI_LSP_LMT_PROFILE a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.LLP_BCA_REF_NUM = t.WOLDAP	
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 2);    		

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'SCI_LSP_APPR_LMTS', 'LMT_BCA_REF_NUM', 
				a.CMS_LSP_APPR_LMTS_ID, a.LMT_ID, a.SOURCE_ID, WOLDAP 
		FROM SCI_LSP_APPR_LMTS a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.LMT_BCA_REF_NUM = t.WOLDAP		
			AND a.LMT_BCA_REF_NUM IS NOT NULL
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 3);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'SCI_LSP_SYS_XREF', 'LSX_BCA_REF_NUM', 
				a.CMS_LSP_SYS_XREF_ID, a.LSX_EXT_SYS_ACCT_NUM, a.LSX_EXT_SYS_ACCT_TYPE, a.LSX_EXT_SYS_CODE_VALUE, WOLDAP 
		FROM SCI_LSP_SYS_XREF a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.LSX_BCA_REF_NUM = t.WOLDAP		
			AND a.LSX_BCA_REF_NUM IS NOT NULL
			AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 4);    		
			
	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'CMS_LIMIT_SECURITY_MAP', 'SCI_LAS_BCA_REF_NUM', 
				a.CHARGE_ID, char(a.CMS_COLLATERAL_ID), char(a.CMS_LSP_APPR_LMTS_ID), a.SOURCE_ID, WOLDAP 
		FROM CMS_LIMIT_SECURITY_MAP a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.SCI_LAS_BCA_REF_NUM = t.WOLDAP		
			AND a.SCI_LAS_BCA_REF_NUM IS NOT NULL
			AND a.SOURCE_ID in ('ARBS', 'CLMS')
			AND t.IS_VALID = 'Y'
			);				               

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 5);    		
	
	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'CMS_NPL', 'NPL_BCA_REF_NUM', 
				a.CMS_NPL_ID, a.ACCOUNT_NUMBER, a.SOURCE_ID, WOLDAP 
		FROM CMS_NPL a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.NPL_BCA_REF_NUM = t.WOLDAP		
			AND a.NPL_BCA_REF_NUM IS NOT NULL
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 6);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'SCI_LSP_JOINT_BORROWER', 'LJB_BCA_REF_NUM', 
				a.CMS_LSP_JOINT_BORROWER_ID, char( a.CMS_LMP_LIMIT_PROFILE_ID ), a.LJB_LE_ID, a.SOURCE_ID, WOLDAP 
		FROM SCI_LSP_JOINT_BORROWER a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.LJB_BCA_REF_NUM = t.WOLDAP	
			AND a.LJB_BCA_REF_NUM IS NOT NULL
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		          
             
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 7);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'STAGE_LIMIT_PROFILE', 'LLP_BCA_REF_NUM', 
				a.CMS_LSP_LMT_PROFILE_ID, a.LLP_BCA_REF_NUM, a.SOURCE_ID, WOLDAP 
		FROM STAGE_LIMIT_PROFILE a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.LLP_BCA_REF_NUM = t.WOLDAP	
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 8);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'STAGE_LIMIT', 'LMT_BCA_REF_NUM', 
				a.CMS_LSP_APPR_LMTS_ID, a.LMT_ID, a.SOURCE_ID, WOLDAP 
		FROM STAGE_LIMIT a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.LMT_BCA_REF_NUM = t.WOLDAP		
			AND a.LMT_BCA_REF_NUM IS NOT NULL
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 9);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'CMS_STAGE_LSP_SYS_XREF', 'LSX_BCA_REF_NUM', 
				a.CMS_LSP_SYS_XREF_ID, a.LSX_EXT_SYS_ACCT_NUM, a.LSX_EXT_SYS_ACCT_TYPE, a.LSX_EXT_SYS_CODE_VALUE, WOLDAP 
		FROM CMS_STAGE_LSP_SYS_XREF a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.LSX_BCA_REF_NUM = t.WOLDAP	
			AND a.LSX_BCA_REF_NUM IS NOT NULL			
			AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 10);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'CMS_STAGE_LIMIT_SECURITY_MAP', 'SCI_LAS_BCA_REF_NUM', 
				a.CHARGE_ID, char(a.CMS_COLLATERAL_ID), char(a.CMS_LSP_APPR_LMTS_ID), a.SOURCE_ID, WOLDAP 
		FROM CMS_STAGE_LIMIT_SECURITY_MAP a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.SCI_LAS_BCA_REF_NUM = t.WOLDAP	
			AND a.SCI_LAS_BCA_REF_NUM IS NOT NULL					
			AND a.SOURCE_ID in ('ARBS', 'CLMS')
			AND t.IS_VALID = 'Y'
			);				               
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 11);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'CMS_STAGE_NPL', 'NPL_BCA_REF_NUM', 
				a.CMS_NPL_ID, a.ACCOUNT_NUMBER, a.SOURCE_ID, WOLDAP 
		FROM CMS_STAGE_NPL a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.NPL_BCA_REF_NUM = t.WOLDAP	
			AND a.NPL_BCA_REF_NUM IS NOT NULL					
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			);				

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 12);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'SCI_LSP_APPR_LMTS', 'LMT_ID', 
				a.CMS_LSP_APPR_LMTS_ID, a.LMT_ID, a.SOURCE_ID, WOLDAP || '-' || LMT_FAC_CODE || '-' || char(LMT_FAC_SEQ)
		FROM SCI_LSP_APPR_LMTS a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.LMT_ID = t.WOLDAP	|| '-' || LMT_FAC_CODE || '-' || char(LMT_FAC_SEQ)
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			AND a.LMT_ID is not null
			);	

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 13);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'CMS_LIMIT_SECURITY_MAP', 'SCI_LAS_LMT_ID', 
				a.CHARGE_ID, a.SCI_LAS_LMT_ID, a.SOURCE_ID, WOLDAP
		FROM CMS_LIMIT_SECURITY_MAP a, BR_TEMP_BVLNCMAA t, SCI_LSP_APPR_LMTS l
		WHERE 
		    a.SCI_LAS_LMT_ID = t.WOLDAP	|| '-' || l.LMT_FAC_CODE || '-' || char(l.LMT_FAC_SEQ)
            AND a.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID
			AND a.SOURCE_ID in ('ARBS', 'CLMS')
            AND l.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			AND a.SCI_LAS_LMT_ID is not null
			);	
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 14);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'SCI_LSP_LMTS_XREF_MAP', 'LXM_LMT_ID', 
				a.CMS_LSP_LMTS_XREF_MAP_ID, a.LXM_LMT_ID, l.SOURCE_ID, WOLDAP
		FROM SCI_LSP_LMTS_XREF_MAP a, BR_TEMP_BVLNCMAA t, SCI_LSP_APPR_LMTS l
		WHERE 
		    a.LXM_LMT_ID = t.WOLDAP	|| '-' || l.LMT_FAC_CODE || '-' || char(l.LMT_FAC_SEQ)
			AND a.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID			
            AND l.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			AND a.LXM_LMT_ID is not null
			);			
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 15);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'SCI_LSP_SYS_XREF', 'LSX_LMT_ID', 
				a.CMS_LSP_SYS_XREF_ID, a.LSX_LMT_ID, a.LSX_EXT_SYS_CODE_VALUE, WOLDAP 
		FROM SCI_LSP_SYS_XREF a, BR_TEMP_BVLNCMAA t, SCI_LSP_LMTS_XREF_MAP m, SCI_LSP_APPR_LMTS l
		WHERE 
		    a.LSX_LMT_ID = t.WOLDAP	|| '-' || l.LMT_FAC_CODE || '-' || char(l.LMT_FAC_SEQ)
            AND m.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID		
            AND m.CMS_LSP_SYS_XREF_ID = a.CMS_LSP_SYS_XREF_ID			      
			AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
            AND l.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			AND a.LSX_LMT_ID is not null
			);		

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 16);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'STAGE_LIMIT', 'LMT_ID', 
				a.CMS_LSP_APPR_LMTS_ID, a.LMT_ID, a.SOURCE_ID, WOLDAP || '-' || LMT_FAC_CODE || '-' || char(LMT_FAC_SEQ)
		FROM STAGE_LIMIT a, BR_TEMP_BVLNCMAA t
		WHERE 
		    a.LMT_ID = t.WOLDAP	|| '-' || LMT_FAC_CODE || '-' || char(LMT_FAC_SEQ)
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
            AND a.LMT_ID is not null
			);	

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 17);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'CMS_STAGE_LIMIT_SECURITY_MAP', 'SCI_LAS_LMT_ID', 
				a.CHARGE_ID, a.SCI_LAS_LMT_ID, a.SOURCE_ID, WOLDAP
		FROM CMS_STAGE_LIMIT_SECURITY_MAP a, BR_TEMP_BVLNCMAA t, STAGE_LIMIT l
		WHERE 
		    a.SCI_LAS_LMT_ID = t.WOLDAP	|| '-' || l.LMT_FAC_CODE || '-' || char(l.LMT_FAC_SEQ)
            AND a.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID
			AND a.SOURCE_ID in ('ARBS', 'CLMS')
            AND l.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			AND a.SCI_LAS_LMT_ID is not null
			);	
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 18);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'STAGE_LIMIT_XREF', 'LXM_LMT_ID', 
				a.CMS_LSP_LMTS_XREF_MAP_ID, a.LXM_LMT_ID, l.SOURCE_ID, WOLDAP
		FROM STAGE_LIMIT_XREF a, BR_TEMP_BVLNCMAA t, STAGE_LIMIT l
		WHERE 
		    a.LXM_LMT_ID = t.WOLDAP	|| '-' || l.LMT_FAC_CODE || '-' || char(l.LMT_FAC_SEQ)
			AND a.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID			
            AND l.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y' 
			AND a.LXM_LMT_ID is not null
			);			
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 19);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKAA', 'CMS_STAGE_LSP_SYS_XREF', 'LSX_LMT_ID', 
				a.CMS_LSP_SYS_XREF_ID, a.LSX_LMT_ID, a.LSX_EXT_SYS_CODE_VALUE, WOLDAP 
		FROM CMS_STAGE_LSP_SYS_XREF a, BR_TEMP_BVLNCMAA t, STAGE_LIMIT_XREF m, STAGE_LIMIT l
		WHERE 
		    a.LSX_LMT_ID = t.WOLDAP	|| '-' || l.LMT_FAC_CODE || '-' || char(l.LMT_FAC_SEQ)
            AND m.CMS_LSP_APPR_LMTS_ID = l.CMS_LSP_APPR_LMTS_ID		
            AND m.CMS_LSP_SYS_XREF_ID = a.CMS_LSP_SYS_XREF_ID			      
			AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
            AND l.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			AND a.LSX_LMT_ID is not null
			);					

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_AA_CONVERT', 'CHECKAA', 0);    		
	COMMIT;
END
@


CREATE PROCEDURE BR_CHECK_ALL_FD_CONVERT
	LANGUAGE SQL
BEGIN	
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 1);    		

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKFD', 'CMS_CASH_DEPOSIT', 'DEPOSIT_RECEIPT_NUMBER', 
				a.CMS_COLLATERAL_ID, a.SOURCE_SECURITY_ID, a.SOURCE_ID, OFDR 
		FROM CMS_CASH_DEPOSIT a, BR_TEMP_BVCDCLIMS t
		WHERE 
		    a.DEPOSIT_RECEIPT_NUMBER = t.OFDR	
			AND a.DEPOSIT_RECEIPT_NUMBER IS NOT NULL
			AND a.SOURCE_ID in ('ARBS', 'SEMA')
			AND t.IS_VALID = 'Y'
			);			

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 2);    		

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKFD', 'CMS_CASH_DEPOSIT', 'DEPOSIT_REFERENCE_NUMBER', 
				a.CMS_COLLATERAL_ID, a.SOURCE_SECURITY_ID, a.SOURCE_ID, OACCG 
		FROM CMS_CASH_DEPOSIT a, BR_TEMP_BVCDCLIMS t
		WHERE 
		    a.DEPOSIT_REFERENCE_NUMBER = t.OACCG	
			AND a.DEPOSIT_REFERENCE_NUMBER IS NOT NULL
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 3);    		

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKFD', 'CMS_STAGE_CASH_DEPOSIT', 'DEPOSIT_RECEIPT_NUMBER', 
				a.CMS_COLLATERAL_ID, a.SOURCE_SECURITY_ID, a.SOURCE_ID, OFDR 
		FROM CMS_STAGE_CASH_DEPOSIT a, BR_TEMP_BVCDCLIMS t
		WHERE 
		    a.DEPOSIT_RECEIPT_NUMBER = t.OFDR	
			AND a.DEPOSIT_RECEIPT_NUMBER IS NOT NULL
			AND a.SOURCE_ID in ('ARBS', 'SEMA')
			AND t.IS_VALID = 'Y'
			);			

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 4);    		

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKFD', 'CMS_STAGE_CASH_DEPOSIT', 'DEPOSIT_REFERENCE_NUMBER', 
				a.CMS_COLLATERAL_ID, a.SOURCE_SECURITY_ID, a.SOURCE_ID, OACCG 
		FROM CMS_STAGE_CASH_DEPOSIT a, BR_TEMP_BVCDCLIMS t
		WHERE 
		    a.DEPOSIT_REFERENCE_NUMBER = t.OACCG	
			AND a.DEPOSIT_REFERENCE_NUMBER IS NOT NULL
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		       

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 5);    		
	             				 	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKFD', 'CMS_SECURITY', 'SCI_SECURITY_DTL_ID', 
				a.CMS_COLLATERAL_ID, a.SCI_SECURITY_DTL_ID, a.SOURCE_ID, m.SCI_LAS_LE_ID || OFDR
		FROM CMS_SECURITY a, BR_TEMP_BVCDCLIMS t, CMS_LIMIT_SECURITY_MAP m
		WHERE 
		    a.SCI_SECURITY_DTL_ID = m.SCI_LAS_LE_ID || t.OFDR	
			AND a.SOURCE_ID = 'SEMA'
			--and a.CMS_COLLATERAL_ID = m.CMS_COLLATERAL_ID
			and m.SOURCE_ID = 'SEMA'
			AND a.CMS_COLLATERAL_ID in (
					select CMS_COLLATERAL_ID from CMS_CASH_DEPOSIT d
					where d.DEPOSIT_RECEIPT_NUMBER = t.OFDR
					and d.source_id='SEMA' )
			AND t.IS_VALID = 'Y'
			);	

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 6);    		

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKFD', 'CMS_CASH_DEPOSIT', 'SOURCE_SECURITY_ID', 
				d.CMS_COLLATERAL_ID, d.SOURCE_SECURITY_ID, d.SOURCE_ID, m.SCI_LAS_LE_ID || OFDR
		FROM CMS_CASH_DEPOSIT d, CMS_SECURITY a, BR_TEMP_BVCDCLIMS t, CMS_LIMIT_SECURITY_MAP m
		WHERE 
		    d.SOURCE_SECURITY_ID = m.SCI_LAS_LE_ID || t.OFDR	
			AND a.SOURCE_ID = 'SEMA'		
			--and a.CMS_COLLATERAL_ID = m.CMS_COLLATERAL_ID
			and m.SOURCE_ID = 'SEMA'
			AND a.CMS_COLLATERAL_ID = d.CMS_COLLATERAL_ID 
			AND d.DEPOSIT_RECEIPT_NUMBER = t.OFDR
			and d.source_id='SEMA'
			AND t.IS_VALID = 'Y'
			);	

			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 7);    

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKFD', 'CMS_SECURITY_SOURCE', 'SOURCE_SECURITY_ID', 
				a.CMS_COLLATERAL_ID, a.SOURCE_SECURITY_ID, a.SOURCE_ID, m.SCI_LAS_LE_ID || OFDR
		FROM CMS_SECURITY_SOURCE a, CMS_SECURITY s, BR_TEMP_BVCDCLIMS t, CMS_LIMIT_SECURITY_MAP m
		WHERE 
		    a.SOURCE_SECURITY_ID = m.SCI_LAS_LE_ID || t.OFDR	
			AND a.SOURCE_ID = 'SEMA'
			and a.CMS_COLLATERAL_ID = s.CMS_COLLATERAL_ID
			AND s.SOURCE_ID = 'SEMA'
			--and s.CMS_COLLATERAL_ID = m.CMS_COLLATERAL_ID
			and m.SOURCE_ID = 'SEMA'
			AND s.CMS_COLLATERAL_ID in (
					select CMS_COLLATERAL_ID from CMS_CASH_DEPOSIT d
					where d.DEPOSIT_RECEIPT_NUMBER = t.OFDR
					and d.source_id='SEMA' )
			AND t.IS_VALID = 'Y'
			);		
			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 8);    		

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKFD', 'CMS_CHARGE_DETAIL', 'SCI_LAS_SEC_ID', 
				a.CMS_COLLATERAL_ID, a.SCI_LAS_SEC_ID, a.SOURCE_ID, m.SCI_LAS_LE_ID || OFDR
		FROM CMS_CHARGE_DETAIL a, CMS_SECURITY s, BR_TEMP_BVCDCLIMS t, CMS_LIMIT_SECURITY_MAP m
		WHERE 
		    a.SCI_LAS_SEC_ID = m.SCI_LAS_LE_ID || t.OFDR	
			AND a.SOURCE_ID = 'SEMA'
			and a.CMS_COLLATERAL_ID = s.CMS_COLLATERAL_ID
			AND s.SOURCE_ID = 'SEMA'
			--and s.CMS_COLLATERAL_ID = m.CMS_COLLATERAL_ID
			and m.SOURCE_ID = 'SEMA'
			AND s.CMS_COLLATERAL_ID in (
					select CMS_COLLATERAL_ID from CMS_CASH_DEPOSIT d
					where d.DEPOSIT_RECEIPT_NUMBER = t.OFDR
					and d.source_id='SEMA' )
			AND t.IS_VALID = 'Y'
			);	

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 9);    		

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT DISTINCT 'CHECKFD', 'CMS_STAGE_SECURITY', 'SCI_SECURITY_DTL_ID', 
				a.CMS_COLLATERAL_ID, a.SCI_SECURITY_DTL_ID, a.SOURCE_ID, m.SCI_LAS_LE_ID || OFDR
		FROM CMS_STAGE_SECURITY a, BR_TEMP_BVCDCLIMS t, CMS_STAGE_LIMIT_SECURITY_MAP m
		WHERE 
		    a.SCI_SECURITY_DTL_ID = m.SCI_LAS_LE_ID || t.OFDR	
			AND a.SOURCE_ID = 'SEMA'			
			and m.SOURCE_ID = 'SEMA'
			AND a.CMS_COLLATERAL_ID in (
					select CMS_COLLATERAL_ID from CMS_STAGE_CASH_DEPOSIT d
					where d.DEPOSIT_RECEIPT_NUMBER = t.OFDR
					and d.source_id='SEMA' )
			AND t.IS_VALID = 'Y'
			);	

	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 10);    		

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT DISTINCT 'CHECKFD', 'CMS_STAGE_CASH_DEPOSIT', 'SOURCE_SECURITY_ID', 
				d.CMS_COLLATERAL_ID, d.SOURCE_SECURITY_ID, d.SOURCE_ID, m.SCI_LAS_LE_ID || OFDR
		FROM CMS_STAGE_CASH_DEPOSIT d, CMS_STAGE_SECURITY a, BR_TEMP_BVCDCLIMS t, 
            CMS_STAGE_LIMIT_SECURITY_MAP m
		WHERE 
		    d.SOURCE_SECURITY_ID = m.SCI_LAS_LE_ID || t.OFDR	
			AND a.SOURCE_ID = 'SEMA'		
			and m.SOURCE_ID = 'SEMA'
			AND a.CMS_COLLATERAL_ID = d.CMS_COLLATERAL_ID 
			AND d.DEPOSIT_RECEIPT_NUMBER = t.OFDR
			and d.source_id='SEMA'
			AND t.IS_VALID = 'Y'
			);	

			
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 11);    
		
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT DISTINCT 'CHECKFD', 'CMS_STAGE_CHARGE_DETAIL', 'SCI_LAS_SEC_ID', 
				a.CMS_COLLATERAL_ID, a.SCI_LAS_SEC_ID, a.SOURCE_ID, m.SCI_LAS_LE_ID || OFDR
		FROM CMS_STAGE_CHARGE_DETAIL a, CMS_STAGE_SECURITY s, BR_TEMP_BVCDCLIMS t, CMS_STAGE_LIMIT_SECURITY_MAP m
		WHERE 
		    a.SCI_LAS_SEC_ID = m.SCI_LAS_LE_ID || t.OFDR	
			AND a.SOURCE_ID = 'SEMA'
			and a.CMS_COLLATERAL_ID = s.CMS_COLLATERAL_ID			
			and m.SOURCE_ID = 'SEMA'
			AND s.SOURCE_ID = 'SEMA'					
			AND s.CMS_COLLATERAL_ID in (
					select CMS_COLLATERAL_ID from CMS_STAGE_CASH_DEPOSIT d
					where d.DEPOSIT_RECEIPT_NUMBER = t.OFDR
					and d.source_id='SEMA' )
			AND t.IS_VALID = 'Y'
			);	


	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_FD_CONVERT', 'CHECKFD', 0);    		

END
@

CREATE PROCEDURE BR_CHECK_ALL_LN_ACT_CONVERT
	LANGUAGE SQL
BEGIN	
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_LN_ACT_CONVERT', 'CHECKLNACT', 1);    		
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKLNACT', 'SCI_LSP_SYS_XREF', 'LSX_EXT_SYS_ACCT_NUM', 
				a.CMS_LSP_SYS_XREF_ID, a.LSX_EXT_SYS_ACCT_NUM, a.LSX_EXT_SYS_ACCT_TYPE, a.LSX_EXT_SYS_CODE_VALUE, WOLDAC 
		FROM SCI_LSP_SYS_XREF a, BR_TEMP_BVLNCMAC t
		WHERE 
		    a.LSX_EXT_SYS_ACCT_NUM = t.WOLDAC	
			AND a.LSX_EXT_SYS_ACCT_TYPE = t.WACTYPE
			AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_LN_ACT_CONVERT', 'CHECKLNACT', 2);    	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, OLD_VALUE )
		(SELECT 'CHECKLNACT', 'CMS_ACCOUNT_SEC_MAP', 'LSX_EXT_SYS_ACCT_NUM', 
				a.CMS_ACCOUNT_SEC_MAP_ID, a.ASM_EXT_SYS_ACCOUNT_NUM, a.ASM_EXT_SYS_ACCOUNT_TYPE, WOLDAC 
		FROM CMS_ACCOUNT_SEC_MAP a, BR_TEMP_BVLNCMAC t
		WHERE 
		    a.ASM_EXT_SYS_ACCOUNT_NUM = t.WOLDAC	
			AND a.ASM_EXT_SYS_ACCOUNT_TYPE = t.WACTYPE
			--AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
			AND t.IS_VALID = 'Y'
			);	

		
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_LN_ACT_CONVERT', 'CHECKLNACT', 3);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
		
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKLNACT', 'CMS_NPL', 'ACCOUNT_NUMBER', 
				a.CMS_NPL_ID, a.ACCOUNT_NUMBER, a.SOURCE_ID, WOLDAC 
		FROM CMS_NPL a, BR_TEMP_BVLNCMAC t
		WHERE 
		    a.ACCOUNT_NUMBER = t.WOLDAC		
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_LN_ACT_CONVERT', 'CHECKLNACT', 4);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKLNACT', 'CMS_STAGE_LSP_SYS_XREF', 'LSX_EXT_SYS_ACCT_NUM', 
				a.CMS_LSP_SYS_XREF_ID, a.LSX_EXT_SYS_ACCT_NUM, a.LSX_EXT_SYS_ACCT_TYPE, a.LSX_EXT_SYS_CODE_VALUE, WOLDAC 
		FROM CMS_STAGE_LSP_SYS_XREF a, BR_TEMP_BVLNCMAC t
		WHERE 
		    a.LSX_EXT_SYS_ACCT_NUM = t.WOLDAC	
			AND a.LSX_EXT_SYS_ACCT_TYPE = t.WACTYPE
			AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	COMMIT;	
		
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_LN_ACT_CONVERT', 'CHECKLNACT', 0);    		
	
END
@

CREATE PROCEDURE BR_CHECK_ALL_CR_ACT_CONVERT
	LANGUAGE SQL
BEGIN	
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_CR_ACT_CONVERT', 'CHECKCRACT', 1);    		
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	

	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKCRACT', 'SCI_LSP_SYS_XREF', 'LSX_EXT_SYS_ACCT_NUM', 
				a.CMS_LSP_SYS_XREF_ID, a.LSX_EXT_SYS_ACCT_NUM, a.LSX_EXT_SYS_ACCT_TYPE, a.LSX_EXT_SYS_CODE_VALUE, OACC 
		FROM SCI_LSP_SYS_XREF a, BR_TEMP_BVDDCLIMS t
		WHERE 
		    a.LSX_EXT_SYS_ACCT_NUM = t.OACC	
			AND a.LSX_EXT_SYS_ACCT_TYPE = t.ATYP
			AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_CR_ACT_CONVERT', 'CHECKCRACT', 2);    	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, OLD_VALUE )
		(SELECT 'CHECKCRACT', 'CMS_ACCOUNT_SEC_MAP', 'LSX_EXT_SYS_ACCT_NUM', 
				a.CMS_ACCOUNT_SEC_MAP_ID, a.ASM_EXT_SYS_ACCOUNT_NUM, a.ASM_EXT_SYS_ACCOUNT_TYPE, OACC 
		FROM CMS_ACCOUNT_SEC_MAP a, BR_TEMP_BVDDCLIMS t
		WHERE 
		    a.ASM_EXT_SYS_ACCOUNT_NUM = t.OACC	
			AND a.ASM_EXT_SYS_ACCOUNT_TYPE = t.ATYP
			--AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
			AND t.IS_VALID = 'Y'
			);	

		
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_CR_ACT_CONVERT', 'CHECKCRACT', 3);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
		
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKCRACT', 'CMS_NPL', 'ACCOUNT_NUMBER', 
				a.CMS_NPL_ID, a.ACCOUNT_NUMBER, a.SOURCE_ID, OACC 
		FROM CMS_NPL a, BR_TEMP_BVDDCLIMS t
		WHERE 
		    a.ACCOUNT_NUMBER = t.OACC		
			AND a.SOURCE_ID = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_CR_ACT_CONVERT', 'CHECKCRACT', 4);    		

	COMMIT;
	lock table BR_BRANCH_NOT_CONVERT in share mode; 	
	
	INSERT INTO 
		BR_BRANCH_NOT_CONVERT (ACTION_NAME, TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, KEY_VALUE_3, SOURCE_ID, OLD_VALUE )
		(SELECT 'CHECKCRACT', 'CMS_STAGE_LSP_SYS_XREF', 'LSX_EXT_SYS_ACCT_NUM', 
				a.CMS_LSP_SYS_XREF_ID, a.LSX_EXT_SYS_ACCT_NUM, a.LSX_EXT_SYS_ACCT_TYPE, a.LSX_EXT_SYS_CODE_VALUE, OACC 
		FROM CMS_STAGE_LSP_SYS_XREF a, BR_TEMP_BVDDCLIMS t
		WHERE 
		    a.LSX_EXT_SYS_ACCT_NUM = t.OACC	
			AND a.LSX_EXT_SYS_ACCT_TYPE = t.ATYP
			AND a.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
			AND t.IS_VALID = 'Y'
			);		
	
	COMMIT;	
		
	CALL BR_LOG_PROC_TIME('BR_CHECK_ALL_CR_ACT_CONVERT', 'CHECKCRACT', 0);    		
	
END
@

CREATE PROCEDURE BR_RUN_ALL
	LANGUAGE SQL
BEGIN
	CALL UTIL_TRUNCATE_TABLE('BR_BRANCH_NOT_CONVERT');
	CALL UTIL_TRUNCATE_TABLE('BR_AUDIT_LOG');
	--CALL UTIL_TRUNCATE_TABLE('BR_PROC_TIME_LOG');
	
	CALL BR_VALIDATE_ALL;
		
	--CALL BR_CHECK_NEW_BRANCH_CODE;
	
	CALL BR_RUN_TEMP_BVLNCMBR;
	
	CALL BR_RUN_TEMP_BVLNCMAA;
	
	CALL BR_RUN_TEMP_BVLNCMAC;
	
	CALL BR_RUN_TEMP_BVDDCLIMS;
	
	CALL BR_RUN_TEMP_BVCDCLIMS;
	
	CALL BR_CHECK_ALL_BRANCH_CONVERT;
	
	CALL BR_CHECK_ALL_AA_CONVERT;
	
	CALL BR_CHECK_ALL_FD_CONVERT;
	
	CALL BR_CHECK_ALL_LN_ACT_CONVERT;
	
	CALL BR_CHECK_ALL_CR_ACT_CONVERT;
	
	CALL BR_DELETE_OLD_BRANCH_CODE;
 	
END
@