/* Patching for product type code is empty */

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ALTER TABLE 
-----------------------------------------
ALTER TABLE MIG_CA003_1
ADD COLUMN NEED_TO_PATCH_IND CHAR(1);

UPDATE MIG_CA003_1
SET (IS_VALID, NEED_TO_PATCH_IND) = ('Y', 'Y')
WHERE PRODUCT_TYPE_CODE = '';

ALTER TABLE MIG_CA003_2_BNM
ADD COLUMN NEED_TO_PATCH_IND CHAR(1);

UPDATE MIG_CA003_2_BNM bnm
SET (IS_VALID, NEED_TO_PATCH_IND) = ('Y', 'Y')
WHERE EXISTS (select 1 from MIG_CA003_1 lmt
				where bnm.LMT_ID = lmt.LIMIT_ID	
				and lmt.PRODUCT_TYPE_CODE = '')
AND bnm.IS_VALID = 'N';

ALTER TABLE MIG_CA003_3_OFF
ADD COLUMN NEED_TO_PATCH_IND CHAR(1);

UPDATE MIG_CA003_3_OFF offr
SET (IS_VALID, NEED_TO_PATCH_IND) = ('Y', 'Y')
WHERE EXISTS (select 1 from MIG_CA003_1 lmt
				where offr.LMT_ID = lmt.LIMIT_ID	
				and lmt.PRODUCT_TYPE_CODE = '')
AND offr.IS_VALID = 'N';

ALTER TABLE MIG_CA003_4_REL
ADD COLUMN NEED_TO_PATCH_IND CHAR(1);

UPDATE MIG_CA003_4_REL rel
SET (IS_VALID, NEED_TO_PATCH_IND) = ('Y', 'Y')
WHERE EXISTS (select 1 from MIG_CA003_1 lmt
				where rel.LMT_ID = lmt.LIMIT_ID	
				and lmt.PRODUCT_TYPE_CODE = '')
AND rel.IS_VALID = 'N';

ALTER TABLE MIG_CA003_6_MUL
ADD COLUMN NEED_TO_PATCH_IND CHAR(1);

UPDATE MIG_CA003_6_MUL mul
SET (IS_VALID, NEED_TO_PATCH_IND) = ('Y', 'Y')
WHERE EXISTS (select 1 from MIG_CA003_1 lmt
				where mul.LMT_ID = lmt.LIMIT_ID	
				and lmt.PRODUCT_TYPE_CODE = '')
AND mul.IS_VALID = 'N';

ALTER TABLE MIG_CA003_7_ISL
ADD COLUMN NEED_TO_PATCH_IND CHAR(1);

UPDATE MIG_CA003_7_ISL isl
SET (IS_VALID, NEED_TO_PATCH_IND) = ('Y', 'Y')
WHERE EXISTS (select 1 from MIG_CA003_1 lmt
				where isl.LMT_ID = lmt.LIMIT_ID	
				and lmt.PRODUCT_TYPE_CODE = '')
AND isl.IS_VALID = 'N';

ALTER TABLE MIG_CO019_PL
ADD COLUMN NEED_TO_PATCH_IND CHAR(1);

UPDATE MIG_CO019_PL pl
SET (IS_VALID, NEED_TO_PATCH_IND) = ('Y', 'Y')
WHERE EXISTS (select 1 from MIG_CA003_1 lmt
				where pl.LIMIT_ID = lmt.LIMIT_ID	
				and pl.APPLICATION_NO = lmt.AA_NUMBER
				and lmt.PRODUCT_TYPE_CODE = '')
AND pl.IS_VALID = 'N';

ALTER TABLE MIG_CO017_CD
ADD COLUMN NEED_TO_PATCH_IND CHAR(1);

UPDATE MIG_CO017_CD cd
SET (IS_VALID, NEED_TO_PATCH_IND) = ('Y', 'Y')
WHERE EXISTS (select 1 from MIG_CA003_1 lmt
				where cd.LIMIT_ID = lmt.LIMIT_ID	
				and lmt.PRODUCT_TYPE_CODE = '')
AND cd.IS_VALID = 'N';

commit;

drop table MIG_CA003_1_PATCH;
drop table MIG_CA003_2_BNM_PATCH;
drop table MIG_CA003_3_OFF_PATCH;
drop table MIG_CA003_4_REL_PATCH;
drop table MIG_CA003_6_MUL_PATCH;
drop table MIG_CA003_7_ISL_PATCH;
drop table MIG_CO019_PL_PATCH;
drop table MIG_CO017_CD_PATCH;

create table MIG_CA003_1_PATCH like MIG_CA003_1;
create table MIG_CA003_2_BNM_PATCH like MIG_CA003_2_BNM;
create table MIG_CA003_3_OFF_PATCH like MIG_CA003_3_OFF;
create table MIG_CA003_4_REL_PATCH like MIG_CA003_4_REL;
create table MIG_CA003_6_MUL_PATCH like MIG_CA003_6_MUL;
create table MIG_CA003_7_ISL_PATCH like MIG_CA003_7_ISL;
create table MIG_CO019_PL_PATCH like MIG_CO019_PL;
create table MIG_CO017_CD_PATCH like MIG_CO017_CD;

insert into MIG_CA003_1_PATCH (select * from MIG_CA003_1 where NEED_TO_PATCH_IND = 'Y');
insert into MIG_CA003_2_BNM_PATCH (select * from MIG_CA003_2_BNM where NEED_TO_PATCH_IND = 'Y');
insert into MIG_CA003_3_OFF_PATCH (select * from MIG_CA003_3_OFF where NEED_TO_PATCH_IND = 'Y');
insert into MIG_CA003_4_REL_PATCH (select * from MIG_CA003_4_REL where NEED_TO_PATCH_IND = 'Y');
insert into MIG_CA003_6_MUL_PATCH (select * from MIG_CA003_6_MUL where NEED_TO_PATCH_IND = 'Y');
insert into MIG_CA003_7_ISL_PATCH (select * from MIG_CA003_7_ISL where NEED_TO_PATCH_IND = 'Y');
insert into MIG_CO019_PL_PATCH (select * from MIG_CO019_PL where NEED_TO_PATCH_IND = 'Y');
insert into MIG_CO017_CD_PATCH (select * from MIG_CO017_CD where NEED_TO_PATCH_IND = 'Y');

commit;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- VALIDATE MIG_RUN_CA003_1
-----------------------------------------
UPDATE MIG_CA003_1_PATCH a SET is_valid = 'N'
WHERE (length(RECORD_TYPE)=0
		OR length(CIF_ID)=0
		OR length(LOS_AA_NUMBER)=0
		OR length(AA_NUMBER)=0
		OR length(LIMIT_ID)=0
		OR length(FACILITY_CODE)=0
		OR length(FACILITY_SEQ)=0
		OR length(ORI_LOC_COUNTRY)=0
		OR length(ORG_LOC_ORG_CODE)=0
		OR length(PRODUCT_TYPE_CODE)=0
		OR length(LIMIT_CURRENCY)=0
		OR length(LIMIT_AMT)=0
		OR (LIMIT_TENOR>0 and length(LIMIT_TENOR_UOM)=0)
		OR length(DRAWING_LIMIT_AMT)=0
		OR length(OUTSTANDING_AMT)=0
		OR length(FINANCED_AMOUNT) = 0
		OR length(APPLICATION_DATE) = 0
		OR length(INSTALLMENT_AMOUNT) = 0
		OR length(FINAL_PAYMENT) = 0
		OR length(CAR_CODE_VALUE) = 0
		OR length(FAC_STATUS_CODE_VALUE) = 0
		OR length(INTEREST_RATE) = 0
		OR (COMMISSION_RATE>0 and length(COMMISSION_FEES)=0)
		OR length(MAIN_FACILITY_IND) = 0
		OR (MAIN_FACILITY_IND='Y' and length(MAIN_FACILITY_AA_NUM)=0)
		OR (MAIN_FACILITY_IND='Y' and length(MAIN_FACILITY_CODE)=0)
		OR (MAIN_FACILITY_IND='Y' and length(MAIN_FACILITY_SEQ)=0)
		OR (length(GRADE_PERIOD_CODE_VALUE)>0 and length(GRADE_PERIOD_CD_CODE_VALUE)=0)
		OR length(REVOLVING_IND) = 0
		OR (REVOLVING_IND='R' and length(REVOLVING_ON_CRITERIA_IND)=0)
		OR (EFFECTIVE_COSE_OF_FUND='Y' and length(ECOF_ADMIN_COST)=0)
		OR (EFFECTIVE_COSE_OF_FUND='Y' and length(ECOF_RATE)=0))
AND a.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_1_PATCH a set is_valid = 'N'
where a.LIMIT_ID in (select t.LIMIT_ID
			 from MIG_CA003_1_PATCH t
			 group by limit_id
			 having count(*) > 1)
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';
	
UPDATE MIG_CA003_1_PATCH a SET is_valid = 'N'
WHERE NOT EXISTS (SELECT '1' FROM sci_le_main_profile
				  WHERE lmp_le_id = a.CIF_ID
				  AND source_id = 'SIBS')
and a.NEED_TO_PATCH_IND = 'Y';	

UPDATE MIG_CA003_1_PATCH a
set cms_act_lmt_profile_id = (select llp.cms_lsp_lmt_profile_id
				from sci_lsp_lmt_profile llp
				WHERE llp.LOS_BCA_REF_NUM = a.LOS_AA_NUMBER
				and llp.source_id = 'RLOS')
WHERE EXISTS (select 1 from sci_lsp_lmt_profile llp1
				WHERE llp1.LOS_BCA_REF_NUM = a.LOS_AA_NUMBER
				and llp1.source_id = 'RLOS')
and a.NEED_TO_PATCH_IND = 'Y';

update MIG_CA003_1_PATCH a set is_valid = 'N'
where cms_act_lmt_profile_id is null;

UPDATE MIG_CA003_1_PATCH a set is_valid = 'N'
where ( 
	  (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = ORG_LOC_ORG_CAT and entry_code = ORG_LOC_ORG_CODE fetch first row only)) 
	  OR (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = FACILITY_TYPE_CAT and entry_code = FACILITY_CODE fetch first row only)) 
	  OR (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = FAC_STATUS_CODE_NUM and entry_code = FAC_STATUS_CODE_VALUE fetch first row only)) 
	  OR (length(INTEREST_TYPE_CODE_VALUE) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = INTEREST_TYPE_CODE_NUM and entry_code = INTEREST_TYPE_CODE_VALUE fetch first row only))) 
	  OR (length(COMMISSION_BASIS_CODE_VALUE) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = COMMISSION_BASIS_CODE_NUM and entry_code = COMMISSION_BASIS_CODE_VALUE fetch first row only))) 
	  OR (length(COMTMT_RATE_NUM_CODE_VALUE) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = COMTMT_RATE_NUM_CODE_NUM and entry_code = COMTMT_RATE_NUM_CODE_VALUE fetch first row only))) 
	  OR (length(LIMIT_TENOR_UOM) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = LMT_TENOR_BASIS_NUM and entry_code = LIMIT_TENOR_UOM fetch first row only))) 
	  OR (length(PRIME_REVIEW_TERM_CODE_VALUE) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = PRIME_REVIEW_TERM_CODE_NUM and entry_code = PRIME_REVIEW_TERM_CODE_VALUE fetch first row only))) 
	  ) 
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_1_PATCH a set is_valid = 'N'
where ( 
		(INTEREST_RATE < 0 or INTEREST_RATE > 100)
	 OR (length(SPREAD) > 0 and (SPREAD < 0 or SPREAD > 100))
	 OR (length(PRIME_RATE_FLOOR) > 0 and (PRIME_RATE_FLOOR < 0 or PRIME_RATE_FLOOR > 100))
	 OR (length(PRIME_RATE_CEILING) > 0 and (PRIME_RATE_CEILING < 0 or PRIME_RATE_CEILING > 100))
	 OR (length(OD_EXCESS_RATE_VAR) > 0 and (OD_EXCESS_RATE_VAR < 0 or OD_EXCESS_RATE_VAR > 100))
	 OR (length(COMMISSION_RATE) > 0 and (COMMISSION_RATE < 0 or COMMISSION_RATE > 100))
	 OR (length(COMMITMENT_RATE) > 0 and (COMMITMENT_RATE < 0 or COMMITMENT_RATE > 100))
	 OR (REVOLVING_IND not in ('N', 'R'))
) 
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';
	
commit;	
	
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- MIGRATE MIG_CA003_1
-----------------------------------------
INSERT INTO SCI_LSP_APPR_LMTS (CMS_LSP_APPR_LMTS_ID, LMT_LE_ID, LMT_LSP_ID, LOS_BCA_REF_NUM, LMT_BCA_REF_NUM,
		LOS_LMT_ID, LMT_ID, LMT_OUTER_LMT_ID, LMT_EXPRY_DATE, CMS_BKG_COUNTRY, CMS_BKG_ORGANISATION,
		LMT_CRRNCY_ISO_CODE, LMT_AMT, LMT_TENOR, LMT_TENOR_BASIS_NUM, LMT_TENOR_BASIS_VALUE, CMS_ACTIVATED_LIMIT, 
		CMS_OUTSTANDING_AMT, LMT_PRD_TYPE_NUM, LMT_PRD_TYPE_VALUE, LMT_FAC_TYPE_NUM, LMT_FAC_TYPE_VALUE,
		LMT_TYPE_NUM, LMT_TYPE_VALUE, CMS_LIMIT_PROFILE_ID, CMS_LIMIT_STATUS, SOURCE_ID, LMT_FAC_CODE,
		LMT_FAC_SEQ, CMS_REF_ID, UPDATE_STATUS_IND, CMS_DRAWING_LIMIT)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR LIMIT_SEQ), 2)) as BIGINT), CIF_ID, 1, LOS_AA_NUMBER, AA_NUMBER, 
		LIMIT_ID, LIMIT_ID, 0, EXPIRY_DATE, ORI_LOC_COUNTRY, ORG_LOC_ORG_CODE,
		LIMIT_CURRENCY, LIMIT_AMT, LIMIT_TENOR, '28', LIMIT_TENOR_UOM, DRAWING_LIMIT_AMT,
		OUTSTANDING_AMT, PRODUCT_TYPE_CAT, PRODUCT_TYPE_CODE, FACILITY_TYPE_CAT, FACILITY_CODE,
		'25', 'OUTER', T.CMS_ACT_LMT_PROFILE_ID, 'ACTIVE', 'RLOS', T.FACILITY_CODE,
		T.FACILITY_SEQ, CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR LIMIT_SEQ), 2)) as BIGINT), 'I', DRAWING_LIMIT_AMT
FROM MIG_CA003_1_PATCH T
WHERE T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');		

CALL RUNSTATS_HELPER ('SCI_LSP_APPR_LMTS', 'ACCOUNT_TYPE, LMT_FAC_CODE, LMT_ID, SOURCE_ID');

UPDATE SCI_LSP_APPR_LMTS A 
SET ACCOUNT_TYPE = 
	(SELECT ACCOUNT_TYPE
	FROM HOST_FACILITY_TYPE fac
	WHERE fac.FACILITY_CODE = A.LMT_FAC_CODE)
WHERE ACCOUNT_TYPE is NULL;

INSERT INTO STAGE_LIMIT (CMS_LSP_APPR_LMTS_ID, LMT_LE_ID, LMT_LSP_ID, LOS_BCA_REF_NUM, LMT_BCA_REF_NUM, LOS_LMT_ID,
		LMT_ID, LMT_OUTER_LMT_ID, LMT_EXPRY_DATE, CMS_BKG_COUNTRY, CMS_BKG_ORGANISATION, LMT_CRRNCY_ISO_CODE, LMT_AMT,
		LMT_TENOR, LMT_TENOR_BASIS_NUM, LMT_TENOR_BASIS_VALUE, CMS_ACTIVATED_LIMIT, CMS_OUTSTANDING_AMT, LMT_PRD_TYPE_NUM, 
		LMT_PRD_TYPE_VALUE, LMT_FAC_TYPE_NUM, LMT_FAC_TYPE_VALUE, LMT_TYPE_NUM, LMT_TYPE_VALUE, 
		CMS_LIMIT_PROFILE_ID, CMS_LIMIT_STATUS, SOURCE_ID, LMT_FAC_CODE, LMT_FAC_SEQ, UPDATE_STATUS_IND, CMS_DRAWING_LIMIT)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR LIMIT_SEQ), 2)) as BIGINT),
		CIF_ID, 1, LOS_AA_NUMBER, AA_NUMBER, LIMIT_ID,
		LIMIT_ID, 0, EXPIRY_DATE, ORI_LOC_COUNTRY, ORG_LOC_ORG_CODE, LIMIT_CURRENCY, LIMIT_AMT,
		LIMIT_TENOR, '28', LIMIT_TENOR_UOM, DRAWING_LIMIT_AMT, OUTSTANDING_AMT, PRODUCT_TYPE_CAT,
		PRODUCT_TYPE_CODE, FACILITY_TYPE_CAT, FACILITY_CODE, '25', 'OUTER',
		T.CMS_ACT_LMT_PROFILE_ID, 'ACTIVE', 'RLOS', T.FACILITY_CODE, T.FACILITY_SEQ, 'I', DRAWING_LIMIT_AMT
FROM MIG_CA003_1_PATCH T
WHERE T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');

UPDATE STAGE_LIMIT A 
SET ACCOUNT_TYPE = 
	(SELECT ACCOUNT_TYPE
	FROM HOST_FACILITY_TYPE fac
	WHERE fac.FACILITY_CODE = A.LMT_FAC_CODE)
WHERE ACCOUNT_TYPE is NULL;

UPDATE MIG_CA003_1_PATCH A 
SET CMS_ACT_LMT_ID = 
	(SELECT CMS_LSP_APPR_LMTS_ID
	FROM SCI_LSP_APPR_LMTS LMTS
	WHERE A.LIMIT_ID = LMTS.LMT_ID
	AND LMTS.SOURCE_ID = 'RLOS')
WHERE A.IS_VALID = 'Y'
AND A.NEED_TO_PATCH_IND = 'Y'
AND A.CMS_ACT_LMT_ID IS NULL;

CALL RUNSTATS_HELPER ('MIG_CA003_1_PATCH', 'CMS_ACT_LMT_ID');
	
INSERT INTO CMS_FACILITY_MASTER (ID, CURRENCY_CODE, CMS_LSP_APPR_LMTS_ID,ACTUAL_PLEDGED_LIMIT, ALLOW_INCENTIVE_IND, ALT_RATE, 
	ALT_SCHEDULE, APPL_SRC_CODE_NUM, APPL_SRC_CODE_VALUE, AVAIL_PERIOD_DAY, AVAIL_PERIOD_MONTH, CAL_FIRST_INSTL_DATE, 
	CGC_BNM_APPROVED_DATE, CREDIT_LINE_IND, DEALER_NUM_LPP_CODE_NUM, DEALER_NUM_LPP_CODE_VALUE, DEPARTMENT_CODE_NUM, 
	DEPARTMENT_CODE_VALUE, DISBURSEMENT_MANNER, ECOF_ADMIN_COST, ECOF_RATE, ECOF_VARIANCE, ECOF_VARIANCE_CODE, 
	EFFECTIVE_COSE_OF_FUND, AVAIL_DATE, AVAIL_PERIOD, FLOOR_PLEDGED_LIMIT, INT_IN_SUSPENSE, ISO_REFERRAL_NUM,
	LAST_MAINTENANCE_DATE, LAWYER_CODE_NUM, LAWYER_CODE_VALUE, LEVEL, MAIN_FACILITY_IND, MAIN_FACILITY_AA_NUM, 
	MAIN_FACILITY_CODE, MAIN_FACILITY_SEQ, OD_EXCESS_RATE_VAR, OD_EXCESS_RATE_VAR_CODE, PAR_VALUE_SHARES, 
	PROD_PACKAGE_CODE_NUM, PROD_PACKAGE_CODE_VALUE, REFINANCE_FROM_BANK_CODE_NUM, REFINANCE_FROM_BANK_CODE_VALUE, 
	RETENTION_PERIOD_CODE, RETENTION_SUM, REVOLVING_IND, REVOLVING_ON_CRITERIA_IND, SOLICITOR_NAME, 
	SOLICITOR_REFERENCE, SPEC_PROVISION, STANDBY_LINE, STANDBY_LINE_FAC_CODE, STANDBY_LINE_FAC_SEQ, ACF_NO, 
	RETENTION_PERIOD, DATE_INSTRUCTED, CMS_DRAWING_LIMIT, LMT_PRD_TYPE_VALUE)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FACILITY_MASTER_SEQ), 2)) AS BIGINT),
		LIMIT_CURRENCY, CMS_ACT_LMT_ID, ACTUAL_PLEDGED_LIMIT, ALLOW_INCENTIVE_IND, ALT_RATE, ALT_SCHEDULE, 
		APPL_SRC_CODE_NUM, APPL_SRC_CODE_VALUE, AVAIL_PERIOD_DAY, AVAIL_PERIOD_MONTH, CAL_FIRST_INSTL_DATE, 
		CGC_BNM_APPROVED_DATE, CREDIT_LINE_IND, DEALER_NUM_LPP_CODE_NUM, DEALER_NUM_LPP_CODE_VALUE, DEPARTMENT_CODE_NUM, 
		DEPARTMENT_CODE_VALUE, DISBURSEMENT_MANNER, ECOF_ADMIN_COST, ECOF_RATE, ECOF_VARIANCE, ECOF_VARIANCE_CODE, 
		EFFECTIVE_COSE_OF_FUND, AVAIL_DATE, AVAIL_PERIOD, FLOOR_PLEDGED_LIMIT, INT_IN_SUSPENSE, ISO_REFERRAL_NUM,
		LAST_MAINTENANCE_DATE, LAWYER_CODE_NUM, LAWYER_CODE_VALUE, LEVEL, MAIN_FACILITY_IND, STRIP(MAIN_FACILITY_AA_NUM, LEADING, '0'), 
		MAIN_FACILITY_CODE, MAIN_FACILITY_SEQ, OD_EXCESS_RATE_VAR, OD_EXCESS_RATE_VAR_CODE, PAR_VALUE_SHARES, 
		PROD_PACKAGE_CODE_NUM, PROD_PACKAGE_CODE_VALUE, REFINANCE_FROM_BANK_CODE_NUM, REFINANCE_FROM_BANK_CODE_VALUE, 
		RETENTION_PERIOD_CODE, RETENTION_SUM, REVOLVING_IND, REVOLVING_ON_CRITERIA_IND, SOLICITOR_NAME, 
		SOLICITOR_REFERENCE, SPEC_PROVISION, STANDBY_LINE, STANDBY_LINE_FAC_CODE, STANDBY_LINE_FAC_SEQ, ACF_NO,
		RETENTION_PERIOD, DATE_INSTRUCTED, DRAWING_LIMIT_AMT, PRODUCT_TYPE_CODE
FROM MIG_CA003_1_PATCH T
WHERE T.CMS_ACT_LMT_ID IS NOT NULL		
AND T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');

update MIG_CA003_1_PATCH a
set CMS_STG_LMT_ID = (select cms_lsp_appr_lmts_id
	from stage_limit l
	where lmt_id = a.limit_id
	and source_id = 'RLOS')
where a.is_valid = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y'
AND a.CMS_STG_LMT_ID IS NULL;

CALL RUNSTATS_HELPER ('MIG_CA003_1_PATCH', 'CMS_STG_LMT_ID, FAC_STATUS_CODE_VALUE, CMS_ACT_LMT_PROFILE_ID');

INSERT INTO CMS_STG_FACILITY_MASTER (ID, CURRENCY_CODE, CMS_LSP_APPR_LMTS_ID,ACTUAL_PLEDGED_LIMIT, ALLOW_INCENTIVE_IND, ALT_RATE, 
	ALT_SCHEDULE, APPL_SRC_CODE_NUM, APPL_SRC_CODE_VALUE, AVAIL_PERIOD_DAY, AVAIL_PERIOD_MONTH, CAL_FIRST_INSTL_DATE, 
	CGC_BNM_APPROVED_DATE, CREDIT_LINE_IND, DEALER_NUM_LPP_CODE_NUM, DEALER_NUM_LPP_CODE_VALUE, DEPARTMENT_CODE_NUM, 
	DEPARTMENT_CODE_VALUE, DISBURSEMENT_MANNER, ECOF_ADMIN_COST, ECOF_RATE, ECOF_VARIANCE, ECOF_VARIANCE_CODE, 
	EFFECTIVE_COSE_OF_FUND, AVAIL_DATE, AVAIL_PERIOD, FLOOR_PLEDGED_LIMIT, INT_IN_SUSPENSE, ISO_REFERRAL_NUM,
	LAST_MAINTENANCE_DATE, LAWYER_CODE_NUM, LAWYER_CODE_VALUE, LEVEL, MAIN_FACILITY_IND, MAIN_FACILITY_AA_NUM, 
	MAIN_FACILITY_CODE, MAIN_FACILITY_SEQ, OD_EXCESS_RATE_VAR, OD_EXCESS_RATE_VAR_CODE, PAR_VALUE_SHARES, 
	PROD_PACKAGE_CODE_NUM, PROD_PACKAGE_CODE_VALUE, REFINANCE_FROM_BANK_CODE_NUM, REFINANCE_FROM_BANK_CODE_VALUE, 
	RETENTION_PERIOD_CODE, RETENTION_SUM, REVOLVING_IND, REVOLVING_ON_CRITERIA_IND, SOLICITOR_NAME, 
	SOLICITOR_REFERENCE, SPEC_PROVISION, STANDBY_LINE, STANDBY_LINE_FAC_CODE, STANDBY_LINE_FAC_SEQ, ACF_NO, 
	RETENTION_PERIOD, DATE_INSTRUCTED, CMS_DRAWING_LIMIT, LMT_PRD_TYPE_VALUE)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FACILITY_MASTER_SEQ), 2)) AS BIGINT),
		LIMIT_CURRENCY, CMS_ACT_LMT_ID, ACTUAL_PLEDGED_LIMIT, ALLOW_INCENTIVE_IND, ALT_RATE, ALT_SCHEDULE, 
		APPL_SRC_CODE_NUM, APPL_SRC_CODE_VALUE, AVAIL_PERIOD_DAY, AVAIL_PERIOD_MONTH, CAL_FIRST_INSTL_DATE, 
		CGC_BNM_APPROVED_DATE, CREDIT_LINE_IND, DEALER_NUM_LPP_CODE_NUM, DEALER_NUM_LPP_CODE_VALUE, DEPARTMENT_CODE_NUM, 
		DEPARTMENT_CODE_VALUE, DISBURSEMENT_MANNER, ECOF_ADMIN_COST, ECOF_RATE, ECOF_VARIANCE, ECOF_VARIANCE_CODE, 
		EFFECTIVE_COSE_OF_FUND, AVAIL_DATE, AVAIL_PERIOD, FLOOR_PLEDGED_LIMIT, INT_IN_SUSPENSE, ISO_REFERRAL_NUM,
		LAST_MAINTENANCE_DATE, LAWYER_CODE_NUM, LAWYER_CODE_VALUE, LEVEL, MAIN_FACILITY_IND, STRIP(MAIN_FACILITY_AA_NUM, LEADING, '0'), 
		MAIN_FACILITY_CODE, MAIN_FACILITY_SEQ, OD_EXCESS_RATE_VAR, OD_EXCESS_RATE_VAR_CODE, PAR_VALUE_SHARES, 
		PROD_PACKAGE_CODE_NUM, PROD_PACKAGE_CODE_VALUE, REFINANCE_FROM_BANK_CODE_NUM, REFINANCE_FROM_BANK_CODE_VALUE, 
		RETENTION_PERIOD_CODE, RETENTION_SUM, REVOLVING_IND, REVOLVING_ON_CRITERIA_IND, SOLICITOR_NAME, 
		SOLICITOR_REFERENCE, SPEC_PROVISION, STANDBY_LINE, STANDBY_LINE_FAC_CODE, STANDBY_LINE_FAC_SEQ, ACF_NO,
		RETENTION_PERIOD, DATE_INSTRUCTED, DRAWING_LIMIT_AMT, PRODUCT_TYPE_CODE
FROM MIG_CA003_1_PATCH T
WHERE T.CMS_ACT_LMT_ID IS NOT NULL		
AND T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');

CALL RUNSTATS_HELPER ('CMS_FACILITY_MASTER', 'CMS_LSP_APPR_LMTS_ID, ID');

UPDATE MIG_CA003_1_PATCH A 
SET CMS_ACT_FAC_MASTER_ID = 
	(SELECT ID
	FROM CMS_FACILITY_MASTER FAC
	WHERE A.CMS_ACT_LMT_ID = FAC.CMS_LSP_APPR_LMTS_ID)
WHERE A.IS_VALID = 'Y'
AND A.NEED_TO_PATCH_IND = 'Y'
AND A.CMS_ACT_FAC_MASTER_ID IS NULL;

INSERT INTO CMS_FAC_FEE_CHARGE (CMS_FAC_MASTER_ID, CURRENCY_CODE, COMMISSION_BASIS_CODE_NUM, COMMISSION_BASIS_CODE_VALUE, COMMISSION_FEES, COMMISSION_RATE,
		COMMITMENT_RATE, COMTMT_RATE_NUM_CODE_NUM, COMTMT_RATE_NUM_CODE_VALUE, HANDLING_FEES, LATE_CHARGE_TYPE, MAX_COMSSN_AMOUNT,
		MIN_COMSSN_AMOUNT, OTHERS_FEE, SUBSIDY_AMOUNT)
(SELECT CMS_ACT_FAC_MASTER_ID, LIMIT_CURRENCY, COMMISSION_BASIS_CODE_NUM, COMMISSION_BASIS_CODE_VALUE, COMMISSION_FEES, COMMISSION_RATE,
		COMMITMENT_RATE, COMTMT_RATE_NUM_CODE_NUM, COMTMT_RATE_NUM_CODE_VALUE, HANDLING_FEES, LATE_CHARGE_TYPE, MAX_COMSSN_AMOUNT,
		MIN_COMSSN_AMOUNT, OTHERS_FEE, SUBSIDY_AMOUNT
FROM MIG_CA003_1_PATCH T
WHERE T.CMS_ACT_FAC_MASTER_ID IS NOT NULL		
AND T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');

CALL RUNSTATS_HELPER ('CMS_STG_FACILITY_MASTER', 'CMS_LSP_APPR_LMTS_ID, ID');

UPDATE MIG_CA003_1_PATCH A 
SET CMS_STG_FAC_MASTER_ID = 
	(SELECT stgFac.ID
	FROM CMS_STG_FACILITY_MASTER stgFac
	WHERE stgFac.CMS_LSP_APPR_LMTS_ID = A.CMS_ACT_LMT_ID)
WHERE A.IS_VALID = 'Y'
AND A.NEED_TO_PATCH_IND = 'Y'
AND A.CMS_STG_FAC_MASTER_ID IS NULL;

CALL RUNSTATS_HELPER ('MIG_CA003_1_PATCH', 'IS_VALID, CMS_STG_FAC_MASTER_ID');

INSERT INTO CMS_STG_FAC_FEE_CHARGE (CMS_FAC_MASTER_ID, CURRENCY_CODE, COMMISSION_BASIS_CODE_NUM, COMMISSION_BASIS_CODE_VALUE, COMMISSION_FEES, COMMISSION_RATE,
		COMMITMENT_RATE, COMTMT_RATE_NUM_CODE_NUM, COMTMT_RATE_NUM_CODE_VALUE, HANDLING_FEES, LATE_CHARGE_TYPE, MAX_COMSSN_AMOUNT,
		MIN_COMSSN_AMOUNT, OTHERS_FEE, SUBSIDY_AMOUNT)
(SELECT CMS_STG_FAC_MASTER_ID, LIMIT_CURRENCY, COMMISSION_BASIS_CODE_NUM, COMMISSION_BASIS_CODE_VALUE, COMMISSION_FEES, COMMISSION_RATE,
		COMMITMENT_RATE, COMTMT_RATE_NUM_CODE_NUM, COMTMT_RATE_NUM_CODE_VALUE, HANDLING_FEES, LATE_CHARGE_TYPE, MAX_COMSSN_AMOUNT,
		MIN_COMSSN_AMOUNT, OTHERS_FEE, SUBSIDY_AMOUNT
FROM MIG_CA003_1_PATCH T
WHERE T.CMS_STG_FAC_MASTER_ID IS NOT NULL		
AND T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');

INSERT INTO CMS_FAC_GENERAL (CMS_FAC_MASTER_ID, CURRENCY_CODE, APPLICATION_DATE, APPROVED_DATE, CAR_CODE_NUM, CAR_CODE_FLAG, CAR_CODE_VALUE,
	FAC_STATUS_CODE_NUM, FAC_STATUS_CODE_VALUE, FINAL_PAYMENT, FINANCED_AMOUNT, INSTALLMENT_AMOUNT, LMT_STATUS_CODE_NUM,
	LMT_STATUS_CODE_VALUE, LOAN_PURPOSE_CODE_NUM, LOAN_PURPOSE_CODE_VALUE, OFFER_ACCEPTED_DATE, OFFER_DATE, OFFICER_CODE_NUM, 
	OFFICER_CODE_VALUE, ORIGINAL_AMOUNT, OUTSTANDING_AMOUNT, PERSON_APPROVED_CODE_NUM, PERSON_APPROVED_CODE_VALUE, UTILISED_AMOUNT, ENTERED_DATE)
(SELECT CMS_ACT_FAC_MASTER_ID, LIMIT_CURRENCY, APPLICATION_DATE, APPROVED_DATE, CAR_CODE_NUM, CAR_CODE_FLAG, CAR_CODE_VALUE,
	FAC_STATUS_CODE_NUM, FAC_STATUS_CODE_VALUE, FINAL_PAYMENT, FINANCED_AMOUNT, INSTALLMENT_AMOUNT, LMT_STATUS_CODE_NUM,
	LMT_STATUS_CODE_VALUE, LOAN_PURPOSE_CODE_NUM, LOAN_PURPOSE_CODE_VALUE, OFFER_ACCEPTED_DATE, OFFER_DATE, OFFICER_CODE_NUM, 
	OFFICER_CODE_VALUE, ORIGINAL_AMOUNT, OUTSTANDING_AMOUNT, PERSON_APPROVED_CODE_NUM, PERSON_APPROVED_CODE_VALUE, UTILISED_AMOUNT, ENTERED_DATE
FROM MIG_CA003_1_PATCH T
WHERE T.CMS_ACT_FAC_MASTER_ID IS NOT NULL		
AND T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');

INSERT INTO CMS_STG_FAC_GENERAL (CMS_FAC_MASTER_ID, CURRENCY_CODE, APPLICATION_DATE, APPROVED_DATE, CAR_CODE_NUM, CAR_CODE_FLAG, CAR_CODE_VALUE,
	FAC_STATUS_CODE_NUM, FAC_STATUS_CODE_VALUE, FINAL_PAYMENT, FINANCED_AMOUNT, INSTALLMENT_AMOUNT, LMT_STATUS_CODE_NUM,
	LMT_STATUS_CODE_VALUE, LOAN_PURPOSE_CODE_NUM, LOAN_PURPOSE_CODE_VALUE, OFFER_ACCEPTED_DATE, OFFER_DATE, OFFICER_CODE_NUM, 
	OFFICER_CODE_VALUE, ORIGINAL_AMOUNT, OUTSTANDING_AMOUNT, PERSON_APPROVED_CODE_NUM, PERSON_APPROVED_CODE_VALUE, UTILISED_AMOUNT, ENTERED_DATE)
(SELECT CMS_STG_FAC_MASTER_ID, LIMIT_CURRENCY, APPLICATION_DATE, APPROVED_DATE, CAR_CODE_NUM, CAR_CODE_FLAG, CAR_CODE_VALUE,
	FAC_STATUS_CODE_NUM, FAC_STATUS_CODE_VALUE, FINAL_PAYMENT, FINANCED_AMOUNT, INSTALLMENT_AMOUNT, LMT_STATUS_CODE_NUM,
	LMT_STATUS_CODE_VALUE, LOAN_PURPOSE_CODE_NUM, LOAN_PURPOSE_CODE_VALUE, OFFER_ACCEPTED_DATE, OFFER_DATE, OFFICER_CODE_NUM, 
	OFFICER_CODE_VALUE, ORIGINAL_AMOUNT, OUTSTANDING_AMOUNT, PERSON_APPROVED_CODE_NUM, PERSON_APPROVED_CODE_VALUE, UTILISED_AMOUNT, ENTERED_DATE
FROM MIG_CA003_1_PATCH T
WHERE T.CMS_STG_FAC_MASTER_ID IS NOT NULL		
AND T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');

INSERT INTO CMS_FAC_INTEREST (CMS_FAC_MASTER_ID, INTEREST_RATE, INTEREST_TYPE_CODE_NUM, INTEREST_TYPE_CODE_VALUE, PRIME_RATE_CEILING, PRIME_RATE_FLOOR,
	PRIME_REVIEW_DATE, PRIME_REVIEW_TERM, PRIME_REVIEW_TERM_CODE_NUM, PRIME_REVIEW_TERM_CODE_VALUE, SPREAD, SPREAD_SIGN)
(SELECT CMS_ACT_FAC_MASTER_ID, INTEREST_RATE, INTEREST_TYPE_CODE_NUM, INTEREST_TYPE_CODE_VALUE, PRIME_RATE_CEILING, PRIME_RATE_FLOOR,
	PRIME_REVIEW_DATE, PRIME_REVIEW_TERM, PRIME_REVIEW_TERM_CODE_NUM, PRIME_REVIEW_TERM_CODE_VALUE, SPREAD, SPREAD_SIGN
FROM MIG_CA003_1_PATCH T
WHERE T.CMS_ACT_FAC_MASTER_ID IS NOT NULL		
AND T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');
				
update CMS_FAC_INTEREST set spread_sign = null where spread_sign = '';				

INSERT INTO CMS_STG_FAC_INTEREST (CMS_FAC_MASTER_ID, INTEREST_RATE, INTEREST_TYPE_CODE_NUM, INTEREST_TYPE_CODE_VALUE, PRIME_RATE_CEILING, PRIME_RATE_FLOOR,
	PRIME_REVIEW_DATE, PRIME_REVIEW_TERM, PRIME_REVIEW_TERM_CODE_NUM, PRIME_REVIEW_TERM_CODE_VALUE, SPREAD, SPREAD_SIGN)
(SELECT CMS_STG_FAC_MASTER_ID, INTEREST_RATE, INTEREST_TYPE_CODE_NUM, INTEREST_TYPE_CODE_VALUE, PRIME_RATE_CEILING, PRIME_RATE_FLOOR,
	PRIME_REVIEW_DATE, PRIME_REVIEW_TERM, PRIME_REVIEW_TERM_CODE_NUM, PRIME_REVIEW_TERM_CODE_VALUE, SPREAD, SPREAD_SIGN
FROM MIG_CA003_1_PATCH T
WHERE T.CMS_STG_FAC_MASTER_ID IS NOT NULL		
AND T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');
				
update CMS_STG_FAC_INTEREST set spread_sign = null where spread_sign = '';				

INSERT INTO CMS_FAC_PAYMENT (CMS_FAC_MASTER_ID, GRADE_PERIOD_CODE_VALUE, GRADE_PERIOD_CD_CODE_VALUE, INT_PAYMENT_FREQ_CODE_VALUE, PAYMENT_CD_CODE_VALUE, PAYMENT_FREQ_CODE_VALUE, PAYMENT_FREQ_CD_CODE_VALUE, INT_PAYMENT_FREQ_CD_CODE_VALUE)
(SELECT CMS_ACT_FAC_MASTER_ID, GRADE_PERIOD_CODE_VALUE, GRADE_PERIOD_CD_CODE_VALUE, INT_PAYMENT_FREQ_CODE_VALUE, PAYMENT_CD_CODE_VALUE, PAYMENT_FREQ_CODE_VALUE, PAYMENT_FREQ_CD_CODE_VALUE, INT_PAYMENT_FREQ_CD_CODE_VALUE
FROM MIG_CA003_1_PATCH T
WHERE T.CMS_ACT_FAC_MASTER_ID IS NOT NULL		
AND T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');

INSERT INTO CMS_STG_FAC_PAYMENT (CMS_FAC_MASTER_ID, GRADE_PERIOD_CODE_VALUE, GRADE_PERIOD_CD_CODE_VALUE, INT_PAYMENT_FREQ_CODE_VALUE, PAYMENT_CD_CODE_VALUE, PAYMENT_FREQ_CODE_VALUE, PAYMENT_FREQ_CD_CODE_VALUE, INT_PAYMENT_FREQ_CD_CODE_VALUE)
(SELECT CMS_STG_FAC_MASTER_ID, GRADE_PERIOD_CODE_VALUE, GRADE_PERIOD_CD_CODE_VALUE, INT_PAYMENT_FREQ_CODE_VALUE, PAYMENT_CD_CODE_VALUE, PAYMENT_FREQ_CODE_VALUE, PAYMENT_FREQ_CD_CODE_VALUE, INT_PAYMENT_FREQ_CD_CODE_VALUE
FROM MIG_CA003_1_PATCH T
WHERE T.CMS_STG_FAC_MASTER_ID IS NOT NULL		
AND T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y');

UPDATE CMS_TAT_DOCUMENT A 
SET DOC_COMPLETION_DATE = CURRENT DATE
WHERE EXISTS (select 1 FROM MIG_CA003_1_PATCH mig2
					WHERE mig2.FAC_STATUS_CODE_VALUE NOT IN ('P','T')
					AND mig2.IS_VALID = 'Y'
					AND mig2.NEED_TO_PATCH_IND = 'Y'
					and mig2.CMS_ACT_LMT_PROFILE_ID = A.CMS_LSP_LMT_PROFILE_ID fetch first row only)
AND A.DOC_COMPLETION_DATE is null;

commit;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- VALIDATE MIG_CA003_2_BNM
-----------------------------------------
UPDATE MIG_CA003_2_BNM_PATCH a SET is_valid = 'N'
WHERE (length(RECORD_TYPE)=0
		OR length(LMT_ID)=0
		OR length(LLP_BCA_REF_NUM)=0
		OR length(LMT_FAC_CODE)=0
		OR length(LMT_FAC_SEQ)=0
		OR length(INDUSTRY_CODE_VALUE)=0
		OR length(SECTOR_CODE_VALUE)=0
		OR length(STATE_CODE_VALUE)=0
		OR length(BUMI_NRCC_CODE_VALUE)=0
		OR length(SMALL_SCALE_CODE_VALUE)=0
		OR length(RELATIONSHIP_CODE_VALUE)=0
		OR length(EXEMPTED_CODE_IND)=0
		OR (EXEMPTED_CODE_IND='Y' and length(EXEMPTED_CODE_VALUE)=0))
and a.NEED_TO_PATCH_IND = 'Y';
		
UPDATE MIG_CA003_2_BNM_PATCH a set is_valid = 'N'
where a.LMT_ID in 
	(select LMT_ID
	from MIG_CA003_2_BNM_PATCH t
	group by LMT_ID
	having count(*) > 1)
and a.IS_VALID = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';			
		
update MIG_CA003_2_BNM_PATCH a
set CMS_ACT_LIMIT_ID = (select lmts.cms_lsp_appr_lmts_id
	from sci_lsp_appr_lmts lmts
	where lmts.lmt_id = a.lmt_id
	and lmts.source_id = 'RLOS')
where IS_VALID = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';

update MIG_CA003_2_BNM_PATCH a
set CMS_ACT_FAC_MASTER_ID = (select fac.id
	from cms_facility_master fac
	where fac.cms_lsp_appr_lmts_id = a.cms_act_limit_id)
where IS_VALID = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';		
		
UPDATE MIG_CA003_2_BNM_PATCH SET IS_VALID = 'N'
WHERE CMS_ACT_FAC_MASTER_ID IS NULL
and NEED_TO_PATCH_IND = 'Y';		
		
UPDATE MIG_CA003_2_BNM_PATCH a set is_valid = 'N'
where ( 
	(not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = INDUSTRY_CODE_NUM and entry_code = INDUSTRY_CODE_VALUE  )) 
 OR (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = SECTOR_CODE_NUM and entry_code = SECTOR_CODE_VALUE )) 
 OR (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = STATE_CODE_NUM and entry_code = STATE_CODE_VALUE )) 
 OR (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = BUMI_NRCC_CODE_NUM and entry_code = BUMI_NRCC_CODE_VALUE )) 
 OR (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = SMALL_SCALE_CODE_NUM and entry_code = SMALL_SCALE_CODE_VALUE )) 
 OR (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = RELATIONSHIP_CODE_NUM and entry_code = RELATIONSHIP_CODE_VALUE )) 
 OR (length(PRESCRIBED_RATE_CODE_VALUE) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = PRESCRIBED_RATE_CODE_NUM and entry_code = PRESCRIBED_RATE_CODE_VALUE ))) 
 OR (length(GOODS_FINANCED_ONE_CODE_VALUE) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = GOODS_FINANCED_ONE_CODE_NUM and entry_code = GOODS_FINANCED_ONE_CODE_VALUE ))) 
 OR (length(GOODS_FINANCED_TWO_CODE_VALUE) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = GOODS_FINANCED_TWO_CODE_NUM and entry_code = GOODS_FINANCED_TWO_CODE_VALUE ))) 
) 
and a.IS_VALID = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';		
	
UPDATE MIG_CA003_2_BNM_PATCH a set is_valid = 'N'
where a.EXEMPTED_CODE_IND not in ('Y', 'N')
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';	
	
commit;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- MIGRATE MIG_CA003_2_BNM
-----------------------------------------
CALL RUNSTATS_HELPER('MIG_CA003_2_BNM_PATCH','CMS_ACT_FAC_MASTER_ID,IS_VALID, CMS_ACT_LIMIT_ID');

INSERT INTO CMS_FAC_BNM_CODES (CMS_FAC_MASTER_ID, BUMI_NRCC_CODE_NUM, BUMI_NRCC_CODE_VALUE, 
		EXEMPTED_CODE_NUM, EXEMPTED_CODE_VALUE, GOODS_FINANCED_ONE_CODE_NUM, GOODS_FINANCED_ONE_CODE_VALUE, 
		GOODS_FINANCED_TWO_CODE_NUM, GOODS_FINANCED_TWO_CODE_VALUE, HOST_TIER_SEQ, INDUSTRY_CODE_NUM,
		INDUSTRY_CODE_VALUE, PRESCRIBED_RATE_CODE_NUM, PRESCRIBED_RATE_CODE_VALUE, PURPOSE_CODE_NUM, 
		PURPOSE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, SECTOR_CODE_NUM, SECTOR_CODE_VALUE, 
		SMALL_SCALE_CODE_NUM, SMALL_SCALE_CODE_VALUE, STATE_CODE_NUM, STATE_CODE_VALUE, EXEMPTED_CODE_IND) 
(SELECT CMS_ACT_FAC_MASTER_ID, BUMI_NRCC_CODE_NUM, BUMI_NRCC_CODE_VALUE, EXEMPTED_CODE_NUM, EXEMPTED_CODE_VALUE, GOODS_FINANCED_ONE_CODE_NUM, 
		GOODS_FINANCED_ONE_CODE_VALUE, GOODS_FINANCED_TWO_CODE_NUM, GOODS_FINANCED_TWO_CODE_VALUE, HOST_TIER_SEQ, 
		INDUSTRY_CODE_NUM, INDUSTRY_CODE_VALUE, PRESCRIBED_RATE_CODE_NUM, PRESCRIBED_RATE_CODE_VALUE, PURPOSE_CODE_NUM, 
		PURPOSE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, SECTOR_CODE_NUM, SECTOR_CODE_VALUE, 
		SMALL_SCALE_CODE_NUM, SMALL_SCALE_CODE_VALUE, STATE_CODE_NUM, STATE_CODE_VALUE, EXEMPTED_CODE_IND
FROM MIG_CA003_2_BNM_PATCH
WHERE CMS_ACT_FAC_MASTER_ID IS NOT NULL		
AND IS_VALID = 'Y'
AND NEED_TO_PATCH_IND = 'Y');

CREATE INDEX TEMP_INDEX_1 ON MIG_CA003_2_BNM_PATCH 
	(IS_VALID, CMS_ACT_LIMIT_ID) ALLOW REVERSE SCANS
	collect statistics;
COMMIT;

INSERT INTO CMS_STG_FAC_BNM_CODES (CMS_FAC_MASTER_ID, BUMI_NRCC_CODE_NUM, BUMI_NRCC_CODE_VALUE, 
		EXEMPTED_CODE_NUM, EXEMPTED_CODE_VALUE, GOODS_FINANCED_ONE_CODE_NUM, GOODS_FINANCED_ONE_CODE_VALUE, 
		GOODS_FINANCED_TWO_CODE_NUM, GOODS_FINANCED_TWO_CODE_VALUE, HOST_TIER_SEQ, INDUSTRY_CODE_NUM,
		INDUSTRY_CODE_VALUE, PRESCRIBED_RATE_CODE_NUM, PRESCRIBED_RATE_CODE_VALUE, PURPOSE_CODE_NUM, 
		PURPOSE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, SECTOR_CODE_NUM, SECTOR_CODE_VALUE, 
		SMALL_SCALE_CODE_NUM, SMALL_SCALE_CODE_VALUE, STATE_CODE_NUM, STATE_CODE_VALUE, EXEMPTED_CODE_IND) 
(SELECT c.ID, BUMI_NRCC_CODE_NUM, BUMI_NRCC_CODE_VALUE, EXEMPTED_CODE_NUM, EXEMPTED_CODE_VALUE, GOODS_FINANCED_ONE_CODE_NUM, 
		GOODS_FINANCED_ONE_CODE_VALUE, GOODS_FINANCED_TWO_CODE_NUM, GOODS_FINANCED_TWO_CODE_VALUE, HOST_TIER_SEQ, 
		INDUSTRY_CODE_NUM, INDUSTRY_CODE_VALUE, PRESCRIBED_RATE_CODE_NUM, PRESCRIBED_RATE_CODE_VALUE, PURPOSE_CODE_NUM, 
		PURPOSE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, SECTOR_CODE_NUM, SECTOR_CODE_VALUE, 
		SMALL_SCALE_CODE_NUM, SMALL_SCALE_CODE_VALUE, STATE_CODE_NUM, STATE_CODE_VALUE, EXEMPTED_CODE_IND
FROM MIG_CA003_2_BNM_PATCH a, CMS_STG_FACILITY_MASTER c
WHERE a.CMS_ACT_LIMIT_ID = c.CMS_LSP_APPR_LMTS_ID 
AND a.IS_VALID = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y');

DROP INDEX TEMP_INDEX_1;

commit;
	
		
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- VALIDATE MIG_CA003_3_OFF
-----------------------------------------
UPDATE MIG_CA003_3_OFF_PATCH a SET is_valid = 'N'
WHERE (length(RECORD_TYPE)=0
		OR length(LMT_ID)=0
		OR length(LLP_BCA_REF_NUM)=0
		OR length(LMT_FAC_CODE)=0
		OR length(LMT_FAC_SEQ)=0
		OR length(SEQ_NUM)=0
		OR length(OFFICER_CODE_VALUE)=0)
and a.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_3_OFF_PATCH a set is_valid = 'N'
where (a.LMT_ID, SEQ_NUM) in 
	(select LMT_ID, SEQ_NUM
	from MIG_CA003_3_OFF_PATCH t
	group by LMT_ID, SEQ_NUM
	having count(*) > 1)
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';	
	
UPDATE MIG_CA003_3_OFF_PATCH A
	SET (CMS_ACT_FAC_MASTER_ID, CMS_ACT_LIMIT_ID) = (SELECT FAC.ID, FAC.CMS_LSP_APPR_LMTS_ID
				     FROM SCI_LSP_APPR_LMTS LMT, CMS_FACILITY_MASTER FAC
				     WHERE A.LMT_ID = LMT.LMT_ID
				     AND LMT.CMS_LSP_APPR_LMTS_ID = FAC.CMS_LSP_APPR_LMTS_ID 
				     AND LMT.SOURCE_ID = 'RLOS')
WHERE A.CMS_ACT_FAC_MASTER_ID IS NULL
AND A.CMS_ACT_LIMIT_ID IS NULL
AND A.NEED_TO_PATCH_IND = 'Y';	
	
UPDATE MIG_CA003_3_OFF_PATCH SET IS_VALID = 'N'
WHERE CMS_ACT_FAC_MASTER_ID IS NULL;	
	
UPDATE MIG_CA003_3_OFF_PATCH a set is_valid = 'N'
where ( 
	(not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = RELATIONSHIP_CODE_NUM and entry_code = RELATIONSHIP_CODE_VALUE  )) 
) 
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';	
	
commit;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- MIGRATE MIG_CA003_3_OFF
-----------------------------------------
INSERT INTO CMS_FAC_OFFICER (ID, CMS_FAC_MASTER_ID, OFFICER_CODE_NUM, OFFICER_CODE_VALUE, OFFICER_TYPE_CODE_NUM, 
		OFFICER_TYPE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, STATUS, SEQ_NUM, HOST_SEQ_NUM,
		CMS_REF_ID) 
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_OFFICER_SEQ), 2)) AS BIGINT), 
		CMS_ACT_FAC_MASTER_ID, OFFICER_CODE_NUM, OFFICER_CODE_VALUE, OFFICER_TYPE_CODE_NUM, 
		OFFICER_TYPE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, 'I', SEQ_NUM, SEQ_NUM,
		CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_OFFICER_SEQ), 2)) AS BIGINT)
FROM MIG_CA003_3_OFF_PATCH T
WHERE T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y'
AND T.CMS_ACT_FAC_MASTER_ID IS NOT NULL);

CREATE INDEX TEMP_INDEX_1 ON MIG_CA003_3_OFF_PATCH
	(IS_VALID, CMS_ACT_FAC_MASTER_ID, SEQ_NUM)
	ALLOW REVERSE SCANS
	collect statistics;
	
UPDATE MIG_CA003_3_OFF_PATCH A 
SET CMS_ACT_FAC_OFFICER_ID = 
	(SELECT ID
	FROM CMS_FAC_OFFICER B
	WHERE B.CMS_FAC_MASTER_ID = A.CMS_ACT_FAC_MASTER_ID
	AND B.SEQ_NUM = A.SEQ_NUM)
WHERE A.IS_VALID = 'Y'
AND A.NEED_TO_PATCH_IND = 'Y'
AND A.CMS_ACT_FAC_OFFICER_ID IS NULL;

DROP INDEX TEMP_INDEX_1;

create index temp_index_1 on MIG_CA003_3_OFF_PATCH
	(is_valid, cms_act_limit_id) allow reverse scans
	collect statistics;

INSERT INTO CMS_STG_FAC_OFFICER (ID, CMS_FAC_MASTER_ID, CMS_REF_ID, OFFICER_CODE_NUM, OFFICER_CODE_VALUE, OFFICER_TYPE_CODE_NUM, 
	OFFICER_TYPE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, STATUS, SEQ_NUM, HOST_SEQ_NUM) 
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_OFFICER_SEQ), 2)) AS BIGINT), 
		c.ID, a.CMS_ACT_FAC_OFFICER_ID, OFFICER_CODE_NUM, OFFICER_CODE_VALUE, OFFICER_TYPE_CODE_NUM, 
	OFFICER_TYPE_CODE_VALUE, RELATIONSHIP_CODE_NUM, RELATIONSHIP_CODE_VALUE, 'I', SEQ_NUM, a.SEQ_NUM
FROM MIG_CA003_3_OFF_PATCH a, CMS_STG_FACILITY_MASTER c
WHERE a.cms_act_limit_id = c.CMS_LSP_APPR_LMTS_ID 
AND a.IS_VALID = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y');

drop index temp_index_1;

commit;
	
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- VALIDATE MIG_CA003_4_REL
-----------------------------------------
UPDATE MIG_CA003_4_REL_PATCH a SET is_valid = 'N'
WHERE (length(LMT_ID)=0
		OR length(LLP_BCA_REF_NUM)=0
		OR length(LMT_FAC_CODE)=0
		OR length(LMT_FAC_SEQ)=0
		OR length(CIF_NUMBER)=0
		OR length(ACCT_RELATIONSHIP_CODE_VALUE)=0
		OR (length(GUARANTEE_AMOUNT)=0 AND length(GUARANTEE_PERCENTAGE)=0)
		OR length(HOST_ADD_SEQ_NUM)=0
		OR length(CUSTOMER_NAME)=0)
AND a.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_4_REL_PATCH a set is_valid = 'N'
where (a.LMT_ID, CIF_NUMBER) in 
    	(select LMT_ID, CIF_NUMBER
  		from MIG_CA003_4_REL_PATCH t
		group by LMT_ID, CIF_NUMBER
		having count(*) > 1)
AND a.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_4_REL_PATCH A
SET CMS_LE_MAIN_PROFILE_ID = (SELECT CMS_LE_MAIN_PROFILE_ID 
								FROM SCI_LE_MAIN_PROFILE CUS
								WHERE A.CIF_NUMBER = CUS.LMP_LE_ID
								and source_id = 'SIBS'
								FETCH FIRST 1 ROW ONLY)
WHERE length(A.CIF_NUMBER) > 0 
AND EXISTS (SELECT 1 
		  FROM SCI_LE_MAIN_PROFILE CUS1
		  WHERE A.CIF_NUMBER = CUS1.LMP_LE_ID
		  and source_id = 'SIBS'
		  FETCH FIRST 1 ROW ONLY)
AND A.CMS_LE_MAIN_PROFILE_ID is null
AND A.NEED_TO_PATCH_IND = 'Y';

update MIG_CA003_4_REL_PATCH a
set (cms_act_limit_id, currency_code) =
	(select cms_lsp_appr_lmts_id, LMT_CRRNCY_ISO_CODE
	from sci_lsp_appr_lmts lmts
	where a.lmt_id = lmts.lmt_id
	and lmts.source_id = 'RLOS')
where is_valid = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y';

update MIG_CA003_4_REL_PATCH a
set cms_act_fac_master_id = (select fac.id
	from cms_facility_master fac
	where fac.cms_lsp_appr_lmts_id = a.cms_act_limit_id)
where is_valid = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_4_REL_PATCH SET IS_VALID = 'N'
WHERE CMS_ACT_FAC_MASTER_ID IS NULL
and is_valid = 'Y'
AND NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_4_REL_PATCH a set is_valid = 'N'
where ( (GUARANTEE_PERCENTAGE < 0 or GUARANTEE_PERCENTAGE > 100)
		 OR (length(SHARE_HOLDER_PERCENTAGE) > 0 and (SHARE_HOLDER_PERCENTAGE < 0 or SHARE_HOLDER_PERCENTAGE > 100))
		 OR (length(RECEIVE_MAIL_CODE) > 0 and (RECEIVE_MAIL_CODE not in ('Y','N')))
		 OR (length(PROFIT_RATIO) > 0 and (PROFIT_RATIO < 0 or PROFIT_RATIO > 100))
	 OR (length(DIVIDEND_RATIO) > 0 and (DIVIDEND_RATIO < 0 or DIVIDEND_RATIO > 100))
	) 
	and a.is_valid = 'Y'
	AND a.NEED_TO_PATCH_IND = 'Y';

commit;
		

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- MIGRATE MIG_CA003_4_REL
-----------------------------------------
CALL RUNSTATS_HELPER('MIG_CA003_4_REL_PATCH', 'IS_VALID, CMS_ACT_FAC_MASTER_ID, CIF_NUMBER, CMS_ACT_LIMIT_ID');

INSERT INTO CMS_FAC_RELATIONSHIP (ID, CMS_FAC_MASTER_ID, CIF_NUMBER, CMS_LE_MAIN_PROFILE_ID, ACCT_RELATIONSHIP_CODE_NUM, ACCT_RELATIONSHIP_CODE_VALUE, 
	GUARANTEE_AMOUNT, GUARANTEE_PERCENTAGE, SHARE_HOLDER_PERCENTAGE, HOST_ADD_SEQ_NUM, RECEIVE_MAIL_CODE,
	HOLD_MAIN_CODE_NUM, HOLD_MAIN_CODE_VALUE, NAME_ASSOC_WITH_FAC_ORDER, NAME_CONJUNCTION_POSITION, NAME_CONJUNCTION, 
	PROFIT_RATIO, DIVIDEND_RATIO, CUSTOMER_NAME, STATUS, CMS_REF_ID, CURRENCY_CODE) 
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_RELATIONSHIP_SEQ), 2)) AS BIGINT), 
	CMS_ACT_FAC_MASTER_ID, STRIP(CIF_NUMBER, LEADING, '0'), CMS_LE_MAIN_PROFILE_ID, ACCT_RELATIONSHIP_CODE_NUM, ACCT_RELATIONSHIP_CODE_VALUE, 
	GUARANTEE_AMOUNT, GUARANTEE_PERCENTAGE, SHARE_HOLDER_PERCENTAGE, HOST_ADD_SEQ_NUM, RECEIVE_MAIL_CODE,
	HOLD_MAIN_CODE_NUM, HOLD_MAIN_CODE_VALUE, NAME_ASSOC_WITH_FAC_ORDER, NAME_CONJUNCTION_POSITION, NAME_CONJUNCTION_CODE,
	PROFIT_RATIO, DIVIDEND_RATIO, CUSTOMER_NAME, 'I',
	CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_RELATIONSHIP_SEQ), 2)) AS BIGINT), CURRENCY_CODE
FROM MIG_CA003_4_REL_PATCH T
WHERE T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y'
AND T.CMS_ACT_FAC_MASTER_ID IS NOT NULL);

CALL RUNSTATS_HELPER('CMS_FAC_RELATIONSHIP', 'CMS_FAC_MASTER_ID, CIF_NUMBER');

create index temp_index_1 on MIG_CA003_4_REL_PATCH
(is_valid, cms_act_fac_master_id, cif_number)
allow reverse scans
collect statistics;		

UPDATE MIG_CA003_4_REL_PATCH A 
SET CMS_ACT_FAC_RELATIONSHIP_ID = 
	(SELECT ID FROM CMS_FAC_RELATIONSHIP B
	WHERE B.CMS_FAC_MASTER_ID = A.CMS_ACT_FAC_MASTER_ID
	AND B.CIF_NUMBER = STRIP(A.CIF_NUMBER, LEADING, '0'))
WHERE A.IS_VALID = 'Y'
AND A.NEED_TO_PATCH_IND = 'Y'
AND A.CMS_ACT_FAC_RELATIONSHIP_ID IS NULL
AND CMS_ACT_FAC_MASTER_ID IS NOT NULL;

drop index temp_index_1;

INSERT INTO CMS_STG_FAC_RELATIONSHIP (ID, CMS_FAC_MASTER_ID, CMS_REF_ID, CIF_NUMBER, CMS_LE_MAIN_PROFILE_ID, ACCT_RELATIONSHIP_CODE_NUM, ACCT_RELATIONSHIP_CODE_VALUE, 
	GUARANTEE_AMOUNT, GUARANTEE_PERCENTAGE, SHARE_HOLDER_PERCENTAGE, HOST_ADD_SEQ_NUM, RECEIVE_MAIL_CODE,
	HOLD_MAIN_CODE_NUM, HOLD_MAIN_CODE_VALUE, NAME_ASSOC_WITH_FAC_ORDER, NAME_CONJUNCTION_POSITION, NAME_CONJUNCTION, 
	PROFIT_RATIO, DIVIDEND_RATIO, CUSTOMER_NAME, STATUS, CURRENCY_CODE) 
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_RELATIONSHIP_SEQ), 2)) AS BIGINT), 
	c.ID, a.CMS_ACT_FAC_RELATIONSHIP_ID, STRIP(CIF_NUMBER, LEADING, '0'), CMS_LE_MAIN_PROFILE_ID, ACCT_RELATIONSHIP_CODE_NUM, ACCT_RELATIONSHIP_CODE_VALUE, 
	GUARANTEE_AMOUNT, GUARANTEE_PERCENTAGE, SHARE_HOLDER_PERCENTAGE, HOST_ADD_SEQ_NUM, RECEIVE_MAIL_CODE,
	HOLD_MAIN_CODE_NUM, HOLD_MAIN_CODE_VALUE, NAME_ASSOC_WITH_FAC_ORDER, NAME_CONJUNCTION_POSITION, NAME_CONJUNCTION_CODE,
	PROFIT_RATIO, DIVIDEND_RATIO, CUSTOMER_NAME, 'I', a.CURRENCY_CODE
FROM MIG_CA003_4_REL_PATCH a, CMS_STG_FACILITY_MASTER c
WHERE a.CMS_ACT_LIMIT_ID = c.CMS_LSP_APPR_LMTS_ID 
AND a.IS_VALID = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y');	

commit;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- VALIDATE MIG_CA003_6_MUL
-----------------------------------------
UPDATE MIG_CA003_6_MUL_PATCH a SET is_valid = 'N'
WHERE (length(RECORD_TYPE)=0
		OR length(LMT_ID)=0
		OR length(LLP_BCA_REF_NUM)=0
		OR length(LMT_FAC_CODE)=0
		OR length(LMT_FAC_SEQ)=0
		OR length(TIER_SEQ_NO)=0
		OR length(TIER_TERM)=0
		OR length(TIER_TERM_CODE)=0
		OR length(RATE)=0)
AND a.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_6_MUL_PATCH a set is_valid = 'N'
where (a.LMT_ID, a.TIER_SEQ_NO) in 
(select LMT_ID, TIER_SEQ_NO
	from MIG_CA003_6_MUL_PATCH t
	group by LMT_ID, TIER_SEQ_NO
	having count(*) > 1)
and a.is_valid = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y';	

UPDATE MIG_CA003_6_MUL_PATCH a 
SET CMS_ACT_FAC_MASTER_ID = (SELECT FAC.ID
				 FROM SCI_LSP_APPR_LMTS LMT, CMS_FACILITY_MASTER FAC
				 WHERE a.LMT_ID = LMT.LMT_ID
				 AND LMT.CMS_LSP_APPR_LMTS_ID = FAC.CMS_LSP_APPR_LMTS_ID 
				 AND LMT.SOURCE_ID = 'RLOS');

UPDATE MIG_CA003_6_MUL_PATCH SET IS_VALID = 'N'
WHERE CMS_ACT_FAC_MASTER_ID IS NULL
AND NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_6_MUL_PATCH a set is_valid = 'N'
where ( 
		(TIER_TERM_CODE not in ('D', 'M', 'Y'))
) 
and a.is_valid = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y';

commit;
		
		
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- MIGRATE MIG_CA003_6_MUL
-----------------------------------------
CALL RUNSTATS_HELPER('MIG_CA003_6_MUL_PATCH', 'IS_VALID, CMS_ACT_FAC_MASTER_ID, TIER_SEQ_NO, LMT_ID');

INSERT INTO CMS_FAC_MULTI_TIER_FINANCING(ID, CMS_REF_ID, CMS_FAC_MASTER_ID, TIER_SEQ_NO, TIER_TERM, TIER_TERM_CODE, RATE) 
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_MULTI_TIER_SEQ), 2)) as BIGINT),
	CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_MULTI_TIER_SEQ), 2)) as BIGINT),
	CMS_ACT_FAC_MASTER_ID, TIER_SEQ_NO, TIER_TERM, TIER_TERM_CODE, RATE
FROM MIG_CA003_6_MUL_PATCH a
WHERE a.IS_VALID = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y'
AND char(a.CMS_ACT_FAC_MASTER_ID) like '20090923%');

CALL RUNSTATS_HELPER('CMS_FAC_MULTI_TIER_FINANCING', '(CMS_FAC_MASTER_ID,TIER_SEQ_NO)');

UPDATE MIG_CA003_6_MUL_PATCH mul
SET CMS_REF_ID = (SELECT CMS_REF_ID FROM CMS_FAC_MULTI_TIER_FINANCING mtf
	WHERE mtf.CMS_FAC_MASTER_ID = mul.CMS_ACT_FAC_MASTER_ID
	AND mtf.TIER_SEQ_NO = mul.TIER_SEQ_NO)
WHERE EXISTS (SELECT 1 FROM CMS_FAC_MULTI_TIER_FINANCING mtf1
	WHERE mtf1.CMS_FAC_MASTER_ID = mul.CMS_ACT_FAC_MASTER_ID
	AND mtf1.TIER_SEQ_NO = mul.TIER_SEQ_NO)
AND mul.IS_VALID = 'Y'
AND mul.NEED_TO_PATCH_IND = 'Y'
AND mul.CMS_REF_ID IS NULL;

INSERT INTO CMS_STG_FAC_MULTI_TIER_FINANCING (ID, CMS_REF_ID, CMS_FAC_MASTER_ID, TIER_SEQ_NO, TIER_TERM, TIER_TERM_CODE, RATE) 
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR FAC_MULTI_TIER_SEQ), 2)) as BIGINT),        
	a.CMS_REF_ID, c.ID, a.TIER_SEQ_NO, a.TIER_TERM, a.TIER_TERM_CODE, a.RATE
FROM MIG_CA003_6_MUL_PATCH a, SCI_LSP_APPR_LMTS b, CMS_STG_FACILITY_MASTER c
WHERE a.LMT_ID = b.LMT_ID
AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
AND a.IS_VALID = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y'
AND char(a.CMS_STG_FAC_MASTER_ID) like '20090923%');

commit;			


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- VALIDATE MIG_CA003_7_ISL
-----------------------------------------
UPDATE MIG_CA003_7_ISL_PATCH a SET is_valid = 'N'
WHERE (length(RECORD_TYPE)=0
		OR length(LMT_ID)=0
		OR length(LLP_BCA_REF_NUM)=0
		OR length(LMT_FAC_CODE)=0
		OR length(LMT_FAC_SEQ)=0
		OR length(GPP_PAYMENT_MODE_VALUE)=0
		OR (GPP_PAYMENT_MODE_VALUE in ('Y', 'E', 'N') and length(GPP_TERM)=0)
		OR (GPP_PAYMENT_MODE_VALUE in ('Y', 'E', 'N') and length(GPP_TERM_CODE)=0)
		OR length(CUSTOMER_INTEREST_RATE)=0
		OR (GPP_PAYMENT_MODE_VALUE in ('Y', 'E', 'N') and length(GPP_CALCULATION_MEHTOD_VALUE)=0)
		OR length(COMPOUNDING_METHOD)=0
		OR (COMPOUNDING_METHOD = 'Y' and length(DATE_STOP_COMPOUNDING)=0)
		OR (FULREL_PROFIC_CALC_METHOD = 'Y' and length(REFUND_FULREL_PROFIT_VALUE)=0)
		OR length(EXC_CMP_IN_PMT_AMT)=0
		OR length(FULL_REL_PFT_12_METHOD)=0)
AND a.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_7_ISL_PATCH a set is_valid = 'N'
where a.LMT_ID in 
(select LMT_ID
	from MIG_CA003_7_ISL_PATCH t
	group by LMT_ID
	having count(*) > 1)
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';	
	
UPDATE MIG_CA003_7_ISL_PATCH a 
SET CMS_ACT_FAC_MASTER_ID = (SELECT FAC.ID
				 FROM SCI_LSP_APPR_LMTS LMT, CMS_FACILITY_MASTER FAC
				 WHERE a.LMT_ID = LMT.LMT_ID
				 AND LMT.CMS_LSP_APPR_LMTS_ID = FAC.CMS_LSP_APPR_LMTS_ID 
				 AND LMT.SOURCE_ID = 'RLOS')
where a.CMS_ACT_FAC_MASTER_ID is null
and a.NEED_TO_PATCH_IND = 'Y';
								
UPDATE MIG_CA003_7_ISL_PATCH SET IS_VALID = 'N'
WHERE CMS_ACT_FAC_MASTER_ID IS NULL
and NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_7_ISL_PATCH a set is_valid = 'N'
where ( 
	(not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = GPP_PAYMENT_MODE_NUM and entry_code = GPP_PAYMENT_MODE_VALUE  )) 
 OR (length(GPP_CALCULATION_MEHTOD_VALUE) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = GPP_CALCULATION_METHOD_NUM and entry_code = GPP_CALCULATION_MEHTOD_VALUE ))) 
 OR (length(REFUND_GPP_PROFIT_VALUE) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = REFUND_GPP_PROFIT_NUM and entry_code = REFUND_GPP_PROFIT_VALUE ))) 
 OR (length(REFUND_FULREL_PROFIT_VALUE) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = REFUND_FULREL_PROFIT_NUM and entry_code = REFUND_FULREL_PROFIT_VALUE ))) 
 OR (length(SPTF_DUAL_REPAYMENT_MODE_VALUE) > 0 and (not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = SPTF_DUAL_REPAYMENT_MODE_NUM and entry_code = SPTF_DUAL_REPAYMENT_MODE_VALUE ))) 
) 
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CA003_7_ISL_PATCH a set is_valid = 'N'
where ( 
		(length(SECURITY_DEP_PERCENTAGE) > 0 and (SECURITY_DEP_PERCENTAGE < 0 or SECURITY_DEP_PERCENTAGE > 100))
	 OR (CUSTOMER_INTEREST_RATE < 0 or CUSTOMER_INTEREST_RATE > 100)
	 OR (COMPOUNDING_METHOD not in ('Y', 'N'))
	 OR (length(COMMISSION_RATE) > 0 and (COMMISSION_RATE < 0 or COMMISSION_RATE > 100))
	 OR (EXC_CMP_IN_PMT_AMT not in ('Y', 'N'))
	 OR (FULL_REL_PFT_12_METHOD not in ('Y', 'N'))
) 
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';

commit;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- MIGRATE MIG_RUN_CA003_7_ISL
-----------------------------------------
INSERT INTO CMS_FAC_ISLAMIC_MASTER(CMS_FAC_MASTER_ID, GPP_TERM, GPP_TERM_CODE, GPP_PAYMENT_MODE_NUM, GPP_PAYMENT_MODE_VALUE, 
	SELLING_PRICE, TOTAL_GPP_AMT, SECURITY_DEP_OF_MTH, SECURITY_DEP_PERCENTAGE, SECURITY_DEP_AMT, 
	CUSOTMER_INTEREST_RATE, GPP_CALCULATION_METHOD_NUM, GPP_CALCULATION_MEHTOD_VALUE, FULREL_PROFIC_CALC_METHOD, 
	COMPOUNDING_METHOD, DATE_STOP_COMPOUNDING, REFUND_GPP_PROFIT_NUM, REFUND_GPP_PROFIT_VALUE, 
	REFUND_FULREL_PROFIT_NUM, REFUND_FULREL_PROFIT_VALUE, COMMISSION_RATE, FIXED_COM_AMOUNT, 
	COMMISSION_TERM, COMMISSION_EXPIRY_DATE, EXC_CMP_IN_PMT_AMT, SPTF_DUAL_REPAYMENT_MODE_NUM, 
	SPTF_DUAL_REPAYMENT_MODE_VALUE, SNP_AGREEMENT_DATE, GPP_DURATION_FOR_SNP, SNP_TERM, 
	SNP_TERM_CODE_VALUE, FULL_REL_PFT_12_METHOD, CURRENCY_CODE, SPTF_GRACE_EXP_DATE, FIXED_AMT_REFUND)    
(SELECT c.ID, GPP_TERM, GPP_TERM_CODE, GPP_PAYMENT_MODE_NUM, GPP_PAYMENT_MODE_VALUE, 
	SELLING_PRICE, TOTAL_GPP_AMT, SECURITY_DEP_OF_MTH, SECURITY_DEP_PERCENTAGE, SECURITY_DEP_AMT, 
	CUSTOMER_INTEREST_RATE, GPP_CALCULATION_METHOD_NUM, GPP_CALCULATION_MEHTOD_VALUE, FULREL_PROFIC_CALC_METHOD, 
	COMPOUNDING_METHOD, DATE_STOP_COMPOUNDING, REFUND_GPP_PROFIT_NUM, REFUND_GPP_PROFIT_VALUE, 
	REFUND_FULREL_PROFIT_NUM, REFUND_FULREL_PROFIT_VALUE, COMMISSION_RATE, FIXED_COM_AMOUNT, 
	COMMISSION_TERM, COMMISSION_EXPIRY_DATE, EXC_CMP_IN_PMT_AMT, SPTF_DUAL_REPAYMENT_MODE_NUM, 
	SPTF_DUAL_REPAYMENT_MODE_VALUE, SNP_AGREEMENT_DATE, GPP_DURATION_FOR_SNP, SNP_TERM, 
	SNP_TERM_CODE_VALUE, FULL_REL_PFT_12_METHOD, c.CURRENCY_CODE, SPTF_GRACE_EXP_DATE, FIXED_AMT_REFUND 
FROM MIG_CA003_7_ISL_PATCH a, sci_lsp_appr_lmts b, cms_facility_master c
WHERE a.LMT_ID = b.LMT_ID
AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
AND a.IS_VALID = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y'
AND char(a.CMS_ACT_FAC_MASTER_ID) like '20090923%');

update CMS_FAC_ISLAMIC_MASTER set gpp_duration_for_snp = null where gpp_duration_for_snp = '';

INSERT INTO CMS_STG_FAC_ISLAMIC_MASTER(CMS_FAC_MASTER_ID, GPP_TERM, GPP_TERM_CODE, GPP_PAYMENT_MODE_NUM, GPP_PAYMENT_MODE_VALUE, 
	SELLING_PRICE, TOTAL_GPP_AMT, SECURITY_DEP_OF_MTH, SECURITY_DEP_PERCENTAGE, SECURITY_DEP_AMT, 
	CUSOTMER_INTEREST_RATE, GPP_CALCULATION_METHOD_NUM, GPP_CALCULATION_MEHTOD_VALUE, FULREL_PROFIC_CALC_METHOD, 
	COMPOUNDING_METHOD, DATE_STOP_COMPOUNDING, REFUND_GPP_PROFIT_NUM, REFUND_GPP_PROFIT_VALUE, 
	REFUND_FULREL_PROFIT_NUM, REFUND_FULREL_PROFIT_VALUE, COMMISSION_RATE, FIXED_COM_AMOUNT, 
	COMMISSION_TERM, COMMISSION_EXPIRY_DATE, EXC_CMP_IN_PMT_AMT, SPTF_DUAL_REPAYMENT_MODE_NUM, 
	SPTF_DUAL_REPAYMENT_MODE_VALUE, SNP_AGREEMENT_DATE, GPP_DURATION_FOR_SNP, SNP_TERM, 
	SNP_TERM_CODE_VALUE, FULL_REL_PFT_12_METHOD, CURRENCY_CODE, SPTF_GRACE_EXP_DATE, FIXED_AMT_REFUND)    
(SELECT c.ID, GPP_TERM, GPP_TERM_CODE, GPP_PAYMENT_MODE_NUM, GPP_PAYMENT_MODE_VALUE, 
	SELLING_PRICE, TOTAL_GPP_AMT, SECURITY_DEP_OF_MTH, SECURITY_DEP_PERCENTAGE, SECURITY_DEP_AMT, 
	CUSTOMER_INTEREST_RATE, GPP_CALCULATION_METHOD_NUM, GPP_CALCULATION_MEHTOD_VALUE, FULREL_PROFIC_CALC_METHOD, 
	COMPOUNDING_METHOD, DATE_STOP_COMPOUNDING, REFUND_GPP_PROFIT_NUM, REFUND_GPP_PROFIT_VALUE, 
	REFUND_FULREL_PROFIT_NUM, REFUND_FULREL_PROFIT_VALUE, COMMISSION_RATE, FIXED_COM_AMOUNT, 
	COMMISSION_TERM, COMMISSION_EXPIRY_DATE, EXC_CMP_IN_PMT_AMT, SPTF_DUAL_REPAYMENT_MODE_NUM, 
	SPTF_DUAL_REPAYMENT_MODE_VALUE, SNP_AGREEMENT_DATE, GPP_DURATION_FOR_SNP, SNP_TERM, 
	SNP_TERM_CODE_VALUE, FULL_REL_PFT_12_METHOD, c.CURRENCY_CODE, SPTF_GRACE_EXP_DATE, FIXED_AMT_REFUND 
FROM MIG_CA003_7_ISL_PATCH a, sci_lsp_appr_lmts b, cms_facility_master c
WHERE a.LMT_ID = b.LMT_ID
AND b.CMS_LSP_APPR_LMTS_ID = c.CMS_LSP_APPR_LMTS_ID 
AND a.IS_VALID = 'Y'
AND a.NEED_TO_PATCH_IND = 'Y'
AND char(a.CMS_STG_FAC_MASTER_ID) like '20090923%');

update CMS_STG_FAC_ISLAMIC_MASTER set gpp_duration_for_snp = null where gpp_duration_for_snp = '';

commit;				
	

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- VALIDATE MIG_CO019_PL
-----------------------------------------
UPDATE MIG_CO019_PL_PATCH
SET IS_VALID = 'N'
WHERE (length(RECORD_TYPE)=0
		OR length(SECURITY_ID)=0
		OR length(LIMIT_ID)=0
	OR length(APPLICATION_NO)=0            
	OR length(FACILITY_CODE)=0
	OR length(FACILITY_SEQUENCE)=0
	OR length(AMOUNT_PLEDGED)=0            
			OR length(PERCENT_PLEDGED)=0
			OR length(AMOUNT_DRAW)=0
			OR length(PERCENT_DRAW)=0)
and NEED_TO_PATCH_IND = 'Y';
				
UPDATE MIG_CO019_PL_PATCH a set is_valid = 'N'
where (a.SECURITY_ID, a.APPLICATION_NO, a.LIMIT_ID, a.FACILITY_CODE, a.FACILITY_SEQUENCE) in 
(select t.SECURITY_ID, t.APPLICATION_NO, t.LIMIT_ID, t.FACILITY_CODE, t.FACILITY_SEQUENCE
from MIG_CO019_PL_PATCH t
group by t.SECURITY_ID, t.APPLICATION_NO, t.LIMIT_ID, t.FACILITY_CODE, t.FACILITY_SEQUENCE
having count(*) > 1)
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';
	
create index temp_index_1 on sci_lsp_appr_lmts
	(source_id, lmt_id, cms_lsp_appr_lmts_id, cms_limit_profile_id, lmt_le_id)
	allow reverse scans
	collect statistics;
commit;
	
update MIG_CO019_PL_PATCH 
set (cms_act_lmt_profile_id, src_le_id, cms_act_lmt_id) = 
	(select cms_limit_profile_id, lmt_le_id, cms_lsp_appr_lmts_id
	from sci_lsp_appr_lmts
	where lmt_id = limit_id
	and source_id = 'RLOS')
where is_valid = 'Y'
and NEED_TO_PATCH_IND = 'Y';

drop index temp_index_1;	
	
UPDATE MIG_CO019_PL_PATCH A SET IS_VALID = 'N'
WHERE CMS_ACT_LMT_ID IS NULL
and A.NEED_TO_PATCH_IND = 'Y';	
	
UPDATE MIG_CO019_PL_PATCH A
SET CMS_ACT_COL_ID = (SELECT CMS_COLLATERAL_ID
						FROM CMS_SECURITY
						WHERE SCI_SECURITY_DTL_ID = A.SECURITY_ID)
where A.NEED_TO_PATCH_IND = 'Y';	
	
UPDATE MIG_CO019_PL_PATCH A SET IS_VALID = 'N'
WHERE CMS_ACT_COL_ID IS NULL
and A.NEED_TO_PATCH_IND = 'Y';	

commit;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- MIGRATE MIG_CO019_PL
-----------------------------------------
CALL RUNSTATS_HELPER('MIG_CO019_PL_PATCH', 'IS_VALID, CMS_ACT_COL_ID, CMS_STG_COL_ID, AMOUNT_PLEDGED, PERCENT_PLEDGED, AMOUNT_DRAW, PERCENT_DRAW, CMS_ACT_LMT_ID');
call runstats_helper('CMS_SECURITY', 'IS_MIGRATED_IND, CMS_COLLATERAL_ID');

create index temp_index_1 on MIG_CO019_PL_PATCH
	(is_valid, amount_pledged, cms_act_col_id)
	allow reverse scans
	collect statistics;
	
create index temp_index_2 on MIG_CO019_PL_PATCH
	(is_valid, percent_pledged, cms_act_col_id)
	allow reverse scans
	collect statistics;

update CMS_SECURITY sec
set PLEDGE_AMOUNT_USAGE_IND = 'A'
where exists (select 1 from MIG_CO019_PL_PATCH migpl
				where migpl.CMS_ACT_COL_ID = sec.cms_collateral_id
				and migpl.AMOUNT_PLEDGED > 0
				and migpl.is_valid = 'Y'
				and migpl.NEED_TO_PATCH_IND = 'Y')
and IS_MIGRATED_IND = 'Y';

update CMS_SECURITY sec
set PLEDGE_AMOUNT_USAGE_IND = 'P'
where exists (select 1 from MIG_CO019_PL_PATCH migpl
				where migpl.CMS_ACT_COL_ID = sec.cms_collateral_id
				and migpl.PERCENT_PLEDGED >= 0
				and PLEDGE_AMOUNT_USAGE_IND is null 
				and migpl.is_valid = 'Y'
				and migpl.NEED_TO_PATCH_IND = 'Y' fetch first row only)
and IS_MIGRATED_IND = 'Y';

update CMS_STAGE_SECURITY sec
set PLEDGE_AMOUNT_USAGE_IND = 'A'
where exists (select 1 from MIG_CO019_PL_PATCH migpl
				where migpl.SECURITY_ID = sec.SCI_SECURITY_DTL_ID
				and migpl.AMOUNT_PLEDGED > 0
				and migpl.is_valid = 'Y'
				and migpl.NEED_TO_PATCH_IND = 'Y')
and source_id = 'SIBS';

update CMS_STAGE_SECURITY sec
set PLEDGE_AMOUNT_USAGE_IND = 'P'
where exists (select 1 from MIG_CO019_PL_PATCH migpl
				where migpl.SECURITY_ID = sec.SCI_SECURITY_DTL_ID
				and migpl.PERCENT_PLEDGED >= 0
				and PLEDGE_AMOUNT_USAGE_IND is null
				and migpl.is_valid = 'Y'
				and migpl.NEED_TO_PATCH_IND = 'Y')
and source_id = 'SIBS';

drop index temp_index_1;
drop index temp_index_2;

create index temp_index_1 on MIG_CO019_PL_PATCH
	(is_valid, AMOUNT_DRAW, cms_act_col_id)
	allow reverse scans
	collect statistics;
	
create index temp_index_2 on MIG_CO019_PL_PATCH
	(is_valid, PERCENT_DRAW, cms_act_col_id)
	allow reverse scans
	collect statistics;

update CMS_SECURITY sec
set DRAW_AMOUNT_USAGE_IND = 'A'
where exists (select 1 from MIG_CO019_PL_PATCH migpl
				where migpl.CMS_ACT_COL_ID = sec.cms_collateral_id
				and migpl.AMOUNT_DRAW > 0 
				and migpl.is_valid = 'Y'
				and migpl.NEED_TO_PATCH_IND = 'Y' fetch first row only)
and IS_MIGRATED_IND = 'Y';

update CMS_SECURITY sec
set DRAW_AMOUNT_USAGE_IND = 'P'
where exists (select 1 from MIG_CO019_PL_PATCH migpl
				where migpl.CMS_ACT_COL_ID = sec.cms_collateral_id
				and migpl.PERCENT_DRAW >= 0
				and DRAW_AMOUNT_USAGE_IND is null 
				and migpl.is_valid = 'Y'
				and migpl.NEED_TO_PATCH_IND = 'Y' fetch first row only)
and IS_MIGRATED_IND = 'Y';	
	
update CMS_STAGE_SECURITY sec
set DRAW_AMOUNT_USAGE_IND = 'A'
where exists (select 1 from MIG_CO019_PL_PATCH migpl
				where migpl.SECURITY_ID = sec.SCI_SECURITY_DTL_ID
				and migpl.AMOUNT_DRAW > 0
				and migpl.is_valid = 'Y'
				and migpl.NEED_TO_PATCH_IND = 'Y')
and source_id = 'SIBS';

update CMS_STAGE_SECURITY sec
set DRAW_AMOUNT_USAGE_IND = 'P'
where exists (select 1 from MIG_CO019_PL_PATCH migpl
				where migpl.SECURITY_ID = sec.SCI_SECURITY_DTL_ID
				and migpl.PERCENT_DRAW >= 0
				and DRAW_AMOUNT_USAGE_IND is null
				and migpl.is_valid = 'Y'
				and migpl.NEED_TO_PATCH_IND = 'Y')
and source_id = 'SIBS';		

drop index temp_index_1;
drop index temp_index_2;

UPDATE MIG_CO019_PL_PATCH T SET (CMS_STG_COL_ID) =
	(SELECT TRX.STAGING_REFERENCE_ID
	FROM TRANSACTION TRX
	WHERE T.CMS_ACT_COL_ID = TRX.REFERENCE_ID
	AND TRX.TRANSACTION_TYPE = 'COL')
WHERE T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y'
AND T.CMS_STG_COL_ID IS NULL;

UPDATE MIG_CO019_PL_PATCH T 
SET CMS_STG_LMT_ID = 
	(SELECT STAGING_REFERENCE_ID 
	FROM TRANSACTION TRX 
	WHERE T.CMS_ACT_LMT_ID = TRX.REFERENCE_ID 
	AND TRX.TRANSACTION_TYPE = 'LIMIT') 
WHERE T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y'
AND T.CMS_STG_LMT_ID IS NULL;

INSERT INTO CMS_LIMIT_SECURITY_MAP (CHARGE_ID, CMS_LSP_APPR_LMTS_ID, CMS_COLLATERAL_ID, SCI_LAS_LMT_ID, SCI_LAS_SEC_ID,
	CUSTOMER_CATEGORY, CMS_LSP_LMT_PROFILE_ID, SCI_LAS_BCA_REF_NUM, SCI_LAS_FAC_CODE, SCI_LAS_FAC_SEQ,
	SCI_LAS_LE_ID, PLEDGE_AMOUNT, PLEDGE_AMOUNT_PERCENTAGE, DRAW_AMOUNT, DRAW_AMOUNT_PERCENTAGE, CREATE_DATE, 
	SOURCE_ID, UPDATE_STATUS_IND, SCI_LAS_SYS_GEN_ID)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COL_LIMIT_MAP_SEQ), 2)) AS BIGINT), 
	CMS_ACT_LMT_ID, CMS_ACT_COL_ID, LIMIT_ID, SECURITY_ID,
	'MB', CMS_ACT_LMT_PROFILE_ID, T.APPLICATION_NO, T.FACILITY_CODE, T.FACILITY_SEQUENCE,
	SRC_LE_ID, AMOUNT_PLEDGED, PERCENT_PLEDGED, AMOUNT_DRAW, PERCENT_DRAW, CURRENT_TIMESTAMP, 
	'SIBS', 'I',
	CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COL_LIMIT_MAP_SEQ), 2)) AS BIGINT)
FROM MIG_CO019_PL_PATCH T 
WHERE T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y'
AND T.CMS_ACT_COL_ID IS NOT NULL
AND T.CMS_ACT_LMT_ID IS NOT NULL
AND NOT EXISTS (SELECT 1 FROM CMS_LIMIT_SECURITY_MAP B
				WHERE B.CMS_COLLATERAL_ID=T.CMS_ACT_COL_ID
				AND B.CMS_LSP_APPR_LMTS_ID=T.CMS_ACT_LMT_ID));

INSERT INTO CMS_STAGE_LIMIT_SECURITY_MAP (CHARGE_ID, CMS_LSP_APPR_LMTS_ID, CMS_COLLATERAL_ID, SCI_LAS_LMT_ID, SCI_LAS_SEC_ID,
	CUSTOMER_CATEGORY, CMS_LSP_LMT_PROFILE_ID, SCI_LAS_BCA_REF_NUM, SCI_LAS_FAC_CODE, SCI_LAS_FAC_SEQ,
	SCI_LAS_LE_ID, PLEDGE_AMOUNT, PLEDGE_AMOUNT_PERCENTAGE, DRAW_AMOUNT, DRAW_AMOUNT_PERCENTAGE, CREATE_DATE, 
	SOURCE_ID, UPDATE_STATUS_IND, SCI_LAS_SYS_GEN_ID)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR COL_LIMIT_MAP_SEQ), 2)) AS BIGINT), 
	CMS_ACT_LMT_ID, CMS_STG_COL_ID, T.LIMIT_ID, lsm.SECURITY_ID,
	'MB', CMS_ACT_LMT_PROFILE_ID, T.APPLICATION_NO, T.FACILITY_CODE, T.FACILITY_SEQUENCE,
	SRC_LE_ID, AMOUNT_PLEDGED, PERCENT_PLEDGED, AMOUNT_DRAW, PERCENT_DRAW, CURRENT_TIMESTAMP, 
	'SIBS', 'I', lsm.SCI_LAS_SYS_GEN_ID
FROM MIG_CO019_PL_PATCH T , CMS_LIMIT_SECURITY_MAP lsm
WHERE T.IS_VALID = 'Y'
AND T.NEED_TO_PATCH_IND = 'Y'
AND T.CMS_ACT_LMT_ID IS NOT NULL
AND T.CMS_STG_COL_ID IS NOT NULL
AND T.CMS_ACT_LMT_ID = lsm.CMS_LSP_APPR_LMTS_ID
AND T.CMS_ACT_COL_ID = lsm.CMS_COLLATERAL_ID
AND NOT EXISTS (SELECT 1 FROM CMS_STAGE_LIMIT_SECURITY_MAP B
				WHERE B.CMS_COLLATERAL_ID=T.CMS_STG_COL_ID
				AND B.CMS_LSP_APPR_LMTS_ID=T.CMS_ACT_LMT_ID));

call runstats_helper('cms_charge_detail', 'cms_collateral_id, charge_detail_id');
call runstats_helper('cms_limit_security_map', 'cms_collateral_id');

INSERT INTO CMS_LIMIT_CHARGE_MAP (limit_charge_map_id, cms_lsp_appr_lmts_id, charge_id, charge_detail_id, cms_collateral_id, 
								  status, customer_category, cms_lsp_lmt_profile_id)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR limit_charge_map_seq), 2)) as BIGINT),
	lsm.CMS_LSP_APPR_LMTS_ID, lsm.CHARGE_ID, chg.charge_detail_id, chg.cms_collateral_id, 
	'ACTIVE', lsm.CUSTOMER_CATEGORY, lsm.cms_lsp_lmt_profile_id
from cms_charge_detail chg, cms_limit_security_map lsm
where chg.cms_collateral_id = lsm.cms_collateral_id
and not exists (select 1 from cms_limit_charge_map map 
				where chg.charge_detail_id = map.CHARGE_DETAIL_ID));

call runstats_helper('CMS_STAGE_CHARGE_DETAIL', 'cms_collateral_id, charge_detail_id');
call runstats_helper('CMS_STAGE_LIMIT_SECURITY_MAP', 'cms_collateral_id');

INSERT INTO CMS_STAGE_LIMIT_CHARGE_MAP (LIMIT_CHARGE_MAP_ID, CMS_LSP_APPR_LMTS_ID, CHARGE_ID, CHARGE_DETAIL_ID, CMS_COLLATERAL_ID, 
										STATUS, CUSTOMER_CATEGORY, CMS_LSP_LMT_PROFILE_ID)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR limit_charge_map_seq), 2)) as BIGINT),
	lsm.CMS_LSP_APPR_LMTS_ID, lsm.CHARGE_ID, chg.charge_detail_id, chg.cms_collateral_id, 
	'ACTIVE', lsm.CUSTOMER_CATEGORY, lsm.cms_lsp_lmt_profile_id
from CMS_STAGE_CHARGE_DETAIL chg, CMS_STAGE_LIMIT_SECURITY_MAP lsm
where chg.cms_collateral_id = lsm.cms_collateral_id
and not exists (select 1 from CMS_STAGE_LIMIT_CHARGE_MAP map 
				where chg.charge_detail_id = map.CHARGE_DETAIL_ID));
				
commit;				


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- VALIDATE MIG_CO017_CD
-----------------------------------------
UPDATE MIG_CO017_CD_PATCH
SET IS_VALID = 'N'
WHERE (length(SECURITY_ID) = 0
		OR length(LIMIT_ID) = 0
		OR length(APPLICATION_NO) = 0
		OR length(FACILITY_CODE) = 0
		OR FACILITY_SEQ = 0
		OR FACILITY_SEQ IS NULL
		OR RANKING_OF_SECURITY = 0
		OR length(CHARGE_AMT) = 0
		OR length(FIRST_THIRD_PARTY_CHARGE) = 0
		OR length(CHARGE_TYPE_CODE) = 0
		OR length(CAVEAT_WAIVED_IND) = 0)
and NEED_TO_PATCH_IND = 'Y';
			
create index temp_index_1 on MIG_CO017_CD_PATCH
	(is_valid, security_id)
	allow reverse scans
	collect statistics;

UPDATE MIG_CO017_CD_PATCH t SET (cms_act_col_id, cms_stg_col_id, currency_code) =
		(select reference_id , staging_reference_id, sec.SCI_SECURITY_CURRENCY
		from cms_security sec, transaction trx
		where sec.cms_collateral_id = reference_id
		and trx.transaction_type = 'COL'
		and sec.source_id = 'SIBS'
		and sec.sci_security_dtl_id = t.security_id)
WHERE t.is_valid = 'Y'
and t.NEED_TO_PATCH_IND = 'Y';
		
UPDATE MIG_CO017_CD_PATCH t
SET cms_act_lmt_id = 
	(select cms_lsp_appr_lmts_id
	from sci_lsp_appr_lmts lmt
	where source_id = 'RLOS'
	and LMT_ID = t.LIMIT_ID)
WHERE t.is_valid = 'Y'
and t.NEED_TO_PATCH_IND = 'Y';			

UPDATE MIG_CO017_CD_PATCH t SET cms_stg_lmt_id =
	(select staging_reference_id
	from transaction trx
	where t.cms_act_lmt_id = reference_id
	and trx.transaction_type = 'LIMIT')
WHERE is_valid = 'Y'
and t.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CO017_CD_PATCH t SET (cms_act_chrg_id, cms_act_aa_id) = 
	(select charge_id , cms_lsp_lmt_profile_id
	from cms_limit_security_map 
	where cms_collateral_id = t.cms_act_col_id
	and cms_lsp_appr_lmts_id = t.cms_act_lmt_id)
WHERE t.is_valid = 'Y'
and t.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CO017_CD_PATCH a SET is_valid = 'N'
WHERE (a.CMS_ACT_COL_ID, a.CMS_ACT_LMT_ID, a.RANKING_OF_SECURITY) in 
	(select t.CMS_ACT_COL_ID, t.CMS_ACT_LMT_ID, t.RANKING_OF_SECURITY
	from MIG_CO017_CD_PATCH t
	where t.cms_act_col_id is not null
	and t.cms_act_lmt_id is not null
	group by t.CMS_ACT_COL_ID, t.CMS_ACT_LMT_ID, t.RANKING_OF_SECURITY
	having count(*) > 1)
AND a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y'
and a.cms_act_col_id is not null
and a.cms_act_lmt_id is not null;

UPDATE MIG_CO017_CD_PATCH
	SET IS_VALID = 'N'
	WHERE cms_act_col_id IS NULL
AND IS_VALID = 'Y'
and NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CO017_CD_PATCH
SET IS_VALID = 'N'
WHERE cms_act_lmt_id IS NULL
AND IS_VALID = 'Y'
and NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CO017_CD_PATCH
SET IS_VALID = 'N'
WHERE cms_act_lmt_id IS NOT NULL
AND cms_act_col_id IS NOT NULL
AND cms_act_chrg_id IS NULL
AND IS_VALID = 'Y'
and NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CO017_CD_PATCH a set is_valid = 'N'
where ( 
	(not exists (select 1 from COMMON_CODE_CATEGORY_ENTRY where category_code = CHARGE_TYPE_CAT and entry_code = CHARGE_TYPE_CODE fetch first row only)) 
) 
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';	
	
UPDATE MIG_CO017_CD_PATCH a set is_valid = 'N'
where ( (length(CHARGE_PENDING_REDEMPTION)>0 and (CHARGE_PENDING_REDEMPTION <> 'Y' and CHARGE_PENDING_REDEMPTION <> 'N'))
	 OR (CAVEAT_WAIVED_IND not in ('Y', 'N'))
) 
and a.is_valid = 'Y'
and a.NEED_TO_PATCH_IND = 'Y';

UPDATE MIG_CO017_CD_PATCH a set is_valid = 'N'
where ( length(NATURE_OF_CHARGE)>0
	 AND (
			((SELECT SOURCE_SECURITY_SUB_TYPE FROM CMS_SECURITY sec WHERE sec.SCI_SECURITY_DTL_ID = a.SECURITY_ID and sec.SOURCE_ID = 'SIBS') IN ('E20', 'E40', 'E99', 'F20') AND NATURE_OF_CHARGE <> 'NOC_GENC13')
		 OR ((SELECT SOURCE_SECURITY_SUB_TYPE FROM CMS_SECURITY sec WHERE sec.SCI_SECURITY_DTL_ID = a.SECURITY_ID and sec.SOURCE_ID = 'SIBS') IN ('F10', 'F11', 'F12', 'F70', 'F71', 'F72') AND NATURE_OF_CHARGE <> 'NOC_PLT04')
		 OR ((SELECT SOURCE_SECURITY_SUB_TYPE FROM CMS_SECURITY sec WHERE sec.SCI_SECURITY_DTL_ID = a.SECURITY_ID and sec.SOURCE_ID = 'SIBS') IN ('F15') AND NATURE_OF_CHARGE <> 'NOC_OTH09')
		 OR ((SELECT SOURCE_SECURITY_SUB_TYPE FROM CMS_SECURITY sec WHERE sec.SCI_SECURITY_DTL_ID = a.SECURITY_ID and sec.SOURCE_ID = 'SIBS') IN ('I16', 'I17', 'I18') AND NATURE_OF_CHARGE <> 'NOC_AIR10')
		 OR ((SELECT SOURCE_SECURITY_SUB_TYPE FROM CMS_SECURITY sec WHERE sec.SCI_SECURITY_DTL_ID = a.SECURITY_ID and sec.SOURCE_ID = 'SIBS') IN ('F13', 'F14', 'F73', 'F74', 'F75', 'F76') AND NATURE_OF_CHARGE <> 'NOC_VEH08')
		 OR ((SELECT SOURCE_SECURITY_SUB_TYPE FROM CMS_SECURITY sec WHERE sec.SCI_SECURITY_DTL_ID = a.SECURITY_ID and sec.SOURCE_ID = 'SIBS') IN ('G80') AND NATURE_OF_CHARGE <> 'NOC_GOLD04')
		 OR ((SELECT SOURCE_SECURITY_SUB_TYPE FROM CMS_SECURITY sec WHERE sec.SCI_SECURITY_DTL_ID = a.SECURITY_ID and sec.SOURCE_ID = 'SIBS') IN ('I10', 'I11', 'I12', 'I13', 'I14', 'I15', 'I19') AND NATURE_OF_CHARGE <> 'NOC_VES10')
		 OR ((SELECT SCI_SECURITY_TYPE_VALUE FROM CMS_SECURITY sec WHERE sec.SCI_SECURITY_DTL_ID = a.SECURITY_ID and sec.SOURCE_ID = 'SIBS') = 'PT' AND NATURE_OF_CHARGE <> 'NOC_PROP08')
		 OR ((SELECT SOURCE_SECURITY_SUB_TYPE FROM CMS_SECURITY sec WHERE sec.SCI_SECURITY_DTL_ID = a.SECURITY_ID and sec.SOURCE_ID = 'SIBS') IN ('M01', 'F30', 'F40', 'F50', 'O10') AND NATURE_OF_CHARGE <> 'NOC_OTH12')
	 )
	) 
	and a.is_valid = 'Y'
	and a.NEED_TO_PATCH_IND = 'Y';
		
commit;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- MIGRATE MIG_CO017_CD
-----------------------------------------
CALL RUNSTATS_HELPER('MIG_CO017_CD_PATCH', 'RANKING_OF_SECURITY, IS_VALID, CMS_ACT_LMT_ID, CMS_STG_COL_ID, SECURITY_ID');
CALL RUNSTATS_HELPER('CMS_STAGE_LIMIT_SECURITY_MAP', 'CMS_COLLATERAL_ID, CMS_LSP_APPR_LMTS_ID, CHARGE_ID');

create index temp_index_1 on MIG_CO017_CD_PATCH
	(is_valid, cms_stg_col_id, cms_act_lmt_id)
	allow reverse scans
	collect statistics;		
		
create index temp_index_2 on cms_stage_limit_security_map
	(cms_lsp_appr_lmts_id, cms_collateral_id, charge_id)
	allow reverse scans
	collect statistics;

UPDATE MIG_CO017_CD_PATCH t SET t.CMS_STG_CHRG_ID = 
(SELECT s.charge_id FROM cms_stage_limit_security_map s
  WHERE s.cms_collateral_id = t.cms_stg_col_id
	AND s.cms_lsp_appr_lmts_id = t.cms_act_lmt_id)
WHERE t.IS_VALID = 'Y'
AND	t.NEED_TO_PATCH_IND = 'Y'
AND t.CMS_STG_CHRG_ID IS NULL;
 
drop index temp_index_1;
drop index temp_index_2;

UPDATE MIG_CO017_CD_PATCH chrg set chrg.CURRENCY_CODE =
	(select sec.SCI_SECURITY_CURRENCY from cms_security sec
	where sec.sci_security_dtl_id = chrg.SECURITY_ID)
where chrg.IS_VALID = 'Y'
AND	chrg.NEED_TO_PATCH_IND = 'Y'
AND chrg.CURRENCY_CODE is null;

INSERT INTO CMS_CHARGE_DETAIL (CHARGE_DETAIL_ID, SCI_LAS_SEC_ID, CMS_COLLATERAL_ID, SECURITY_RANK, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT, LEGAL_CHARGE_DATE, 
								PRESENTATION_NO, PRESENTATION_DATE, FOLIO_CHARGE, JILID_CHARGE, PARTY_CHARGE, CHARGE_TYPE,
								CHARGE_NATURE, CHARGE_PENDING_REDEMPTION, CAVEAT_WAIVED_IND,
								STATUS, SOURCE_ID, CMS_REF_ID)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT),
		security_id, cms_act_col_id, ranking_of_security, currency_code, charge_amt, date_legally_charge, 
		presentation_no, presentation_date, folio, jilid, first_third_party_charge, charge_type_code,
		nature_of_charge, charge_pending_redemption, caveat_waived_ind,
		'ACTIVE', 'SIBS',
		CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT)
	from	
	(select row_number()over(partition by cms_act_col_id, ranking_of_security) rownum,
	security_id, t.cms_act_col_id, ranking_of_security, currency_code, charge_amt, date_legally_charge, 
		presentation_no, presentation_date, folio, jilid, first_third_party_charge, charge_type_code,
		nature_of_charge, charge_pending_redemption, caveat_waived_ind
FROM MIG_CO017_CD_PATCH t
WHERE t.is_valid = 'Y'
AND t.NEED_TO_PATCH_IND = 'Y'
AND char(t.CMS_ACT_LMT_ID) like '20090923%') as t_charge
where rownum = 1);

CALL RUNSTATS_HELPER('CMS_CHARGE_DETAIL', 'STATUS, CMS_COLLATERAL_ID, SECURITY_RANK, SOURCE_ID, CHARGE_DETAIL_ID');

update MIG_CO017_CD_PATCH cd
set cd.cms_act_chrg_dtl_id =
	(select chrg.charge_detail_id
	from cms_charge_detail chrg
	where chrg.status = 'ACTIVE'
	and chrg.cms_collateral_id = cd.cms_act_col_id
	and chrg.security_rank = cd.ranking_of_security
	and chrg.source_id = 'SIBS')
where cd.is_valid = 'Y'
AND cd.NEED_TO_PATCH_IND = 'Y'
AND cd.cms_act_chrg_dtl_id is null;

INSERT INTO cms_limit_charge_map (limit_charge_map_id, cms_lsp_appr_lmts_id, charge_id, charge_detail_id, cms_collateral_id, 
								  status, customer_category, cms_lsp_lmt_profile_id)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR limit_charge_map_seq), 2)) as BIGINT),
		cms_act_lmt_id, cms_act_chrg_id, cms_act_chrg_dtl_id, t.cms_act_col_id, 'ACTIVE', 'MB', cms_act_aa_id
   FROM MIG_CO017_CD_PATCH t
  WHERE t.IS_VALID = 'Y'
  AND t.NEED_TO_PATCH_IND = 'Y');

INSERT INTO CMS_STAGE_CHARGE_DETAIL (CHARGE_DETAIL_ID, SCI_LAS_SEC_ID, CMS_COLLATERAL_ID, SECURITY_RANK, CHARGE_CURRENCY_CODE, CHARGE_AMOUNT, LEGAL_CHARGE_DATE, 
									PRESENTATION_NO, PRESENTATION_DATE, FOLIO_CHARGE, JILID_CHARGE, PARTY_CHARGE, CHARGE_TYPE,
									CHARGE_NATURE, CHARGE_PENDING_REDEMPTION, CAVEAT_WAIVED_IND,
									STATUS, SOURCE_ID, CMS_REF_ID)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR col_limit_charge_seq), 2)) as BIGINT),
		security_id, cms_stg_col_id, ranking_of_security, currency_code, charge_amt, date_legally_charge, 
		presentation_no, presentation_date, folio, jilid, first_third_party_charge, charge_type_code,
		nature_of_charge, charge_pending_redemption, caveat_waived_ind,
		'ACTIVE', 'SIBS', cms_act_chrg_dtl_id
	from (select row_number()over(partition by cms_stg_col_id, ranking_of_security) rownum,
	security_id, t.cms_stg_col_id, ranking_of_security, currency_code, charge_amt, date_legally_charge, 
		presentation_no, presentation_date, folio, jilid, first_third_party_charge, charge_type_code,
		nature_of_charge, charge_pending_redemption, caveat_waived_ind, cms_act_chrg_dtl_id
   FROM MIG_CO017_CD_PATCH t
   WHERE t.is_valid = 'Y'
   AND t.NEED_TO_PATCH_IND = 'Y'
   AND char(t.CMS_STG_LMT_ID) like '20090923%') as t_charge
   where rownum = 1);

call RUNSTATS_HELPER('CMS_STAGE_CHARGE_DETAIL', 'CMS_COLLATERAL_ID, SECURITY_RANK, SOURCE_ID');

update MIG_CO017_CD_PATCH cd
set cd.cms_stg_chrg_dtl_id = 
	(select chrg.charge_detail_id
	from cms_stage_charge_detail chrg
	where chrg.cms_collateral_id = cd.cms_stg_col_id
	and chrg.security_rank = cd.ranking_of_security
	and chrg.source_id = 'SIBS')
where cd.is_valid = 'Y'
and cd.NEED_TO_PATCH_IND = 'Y'
and cd.cms_stg_chrg_dtl_id is null;

INSERT INTO CMS_STAGE_LIMIT_CHARGE_MAP (LIMIT_CHARGE_MAP_ID, CMS_LSP_APPR_LMTS_ID, CHARGE_ID, CHARGE_DETAIL_ID, CMS_COLLATERAL_ID, 
										STATUS, CUSTOMER_CATEGORY, CMS_LSP_LMT_PROFILE_ID)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR limit_charge_map_seq), 2)) as BIGINT),
		cms_act_lmt_id, cms_act_chrg_id, cms_stg_chrg_dtl_id, cms_stg_col_id, 'ACTIVE', 'MB', t.cms_act_aa_id
   FROM MIG_CO017_CD_PATCH t
  WHERE t.is_valid = 'Y'
  and t.NEED_TO_PATCH_IND = 'Y'
  AND char(t.CMS_STG_LMT_ID) like '20090923%');
  
commit;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- STP TRANSACTION
-----------------------------------------
INSERT INTO transaction (transaction_id, from_state, user_id, transaction_type, creation_date, 
				transaction_date, reference_id, status, staging_reference_id, team_id, version, opsdesc, 
				trx_origin_country, trx_origin_organisation, limit_profile_id, cur_trx_history_id)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR TRX_SEQ), 2)) AS CHAR(17)),  
		   'ND', -1, 'LIMIT', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CMS_ACT_LMT_ID, 'ACTIVE', CMS_STG_LMT_ID, 0, 1, 
		   'CREATE', ORI_LOC_COUNTRY, ORG_LOC_ORG_CODE, cms_act_lmt_profile_id,
		   CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR trx_history_seq), 2)) AS CHAR(17))
	from MIG_CA003_1_PATCH
	where is_valid = 'Y'
	and NEED_TO_PATCH_IND = 'Y');

-- create index temp_index_1 on transaction
	-- (transaction_type, trx_reference_id, limit_profile_id)
	-- allow reverse scans
	-- collect statistics;

COMMIT;				
				
UPDATE transaction a SET a.trx_reference_id = (
	SELECT CAST(t.transaction_id AS BIGINT) 
	  FROM transaction t
	 WHERE t.reference_id = a.limit_profile_id
	   AND t.transaction_type = 'LIMITPROFILE'
	   ) 
 WHERE a.trx_reference_id IS NULL
   AND a.transaction_type = 'LIMIT';
   
drop index temp_index_1;   

INSERT INTO transaction (transaction_id, from_state, user_id, transaction_type, creation_date, 
						transaction_date, reference_id, status, staging_reference_id, team_id, version, opsdesc, 
						trx_origin_country, trx_origin_organisation, limit_profile_id, cur_trx_history_id)
(SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR TRX_SEQ), 2)) AS CHAR(17)),  
		   'ND', -1, 'FACILITY', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CMS_ACT_FAC_MASTER_ID, 'ACTIVE', CMS_STG_FAC_MASTER_ID, 0, 1, 
		   'CREATE', ORI_LOC_COUNTRY, ORG_LOC_ORG_CODE, cms_act_lmt_profile_id,
		   CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR trx_history_seq), 2)) AS CHAR(17))
	FROM MIG_CA003_1_PATCH
	WHERE IS_VALID = 'Y'
	and NEED_TO_PATCH_IND = 'Y');				

UPDATE transaction a SET a.trx_reference_id = (
	SELECT CAST(t.transaction_id AS BIGINT) 
	from transaction t, cms_facility_master f
	where f.id = a.reference_id
	and f.cms_lsp_appr_lmts_id = t.reference_id
	and t.transaction_type = 'LIMIT') 
 WHERE a.trx_reference_id IS NULL
   AND a.transaction_type = 'FACILITY';
   
-- CREATE INDEX TEMP_INDEX_1 ON TRANSACTION
	-- (TRANSACTION_TYPE, TRANSACTION_ID)
	-- ALLOW REVERSE SCANS
	-- COLLECT STATISTICS;
	
-- COMMIT;   

INSERT INTO trans_history (tr_history_id, transaction_id, from_state, to_state, user_id, transaction_type, 
			creation_date, transaction_date, reference_id, status, staging_reference_id, 
			opsdesc, customer_id, trx_origin_country, trx_origin_organisation, limit_profile_id)
(
   SELECT CAST(cur_trx_history_id AS BIGINT), transaction_id, from_state, status, user_id, transaction_type, creation_date,
		  transaction_date, CAST(reference_id AS CHAR(17)), status, CAST(staging_reference_id AS CHAR(17)), opsdesc,customer_id, 
		  trx_origin_country, trx_origin_organisation, limit_profile_id 
   FROM transaction t
   WHERE transaction_type IN ('LIMIT', 'FACILITY') 
   AND NOT EXISTS (SELECT 1 FROM trans_history h
					WHERE h.transaction_id = t.transaction_id
					AND h.TRANSACTION_TYPE IN ('LIMIT', 'FACILITY') fetch first row only)
);
		
-- DROP INDEX TEMP_INDEX_1;

commit;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- STP FACILITY
-----------------------------------------

CALL RUNSTATS_HELPER('MIG_CA003_1_PATCH', 'IS_VALID, CMS_ACT_FAC_MASTER_ID');

-- CREATE INDEX temp_index1 ON TRANSACTION
-- ("TRANSACTION_TYPE" ASC, "STATUS" ASC, "REFERENCE_ID" ASC, "TRANSACTION_ID" ASC, "CUR_TRX_HISTORY_ID" ASC) 
-- ALLOW REVERSE SCANS 
-- COLLECT STATISTICS; 

DECLARE GLOBAL TEMPORARY TABLE SESSION.fac_trx_info(
	fac_master_id bigint,
	transaction_id varchar(20),
	cur_trx_history_id varchar(20),
	stp_master_trx_id bigint
) 
WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;		
	
insert into SESSION.fac_trx_info (fac_master_id, transaction_id, cur_trx_history_id)
(select CMS_ACT_FAC_MASTER_ID, TRANSACTION_ID, CUR_TRX_HISTORY_ID
	from MIG_CA003_1_PATCH fac, TRANSACTION trans 
	where fac.is_valid = 'Y'
	and fac.NEED_TO_PATCH_IND = 'Y'
	and trans.transaction_type = 'FACILITY'
	and trans.status = 'ACTIVE'
	and trans.reference_id = fac.cms_act_fac_master_id
);

-- CREATE INDEX session.fac_trx_info_idx1
		 -- ON session.fac_trx_info(fac_master_id, transaction_id )
		 -- allow REVERSE SCANS
		 -- COLLECT STATISTICS;	

INSERT INTO STP_MASTER_TRANS (MASTER_TRX_ID, TRANSACTION_ID, STATUS, TRANSACTION_TYPE, REFERENCE_ID, LAST_SUBMISSION_DATE)
(
	SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_MASTER_TRANS_SEQ), 2)) AS BIGINT), 
		   TRANSACTION_ID, 'COMPLETE', 'FACILITY', fac_master_id, CURRENT_TIMESTAMP
	from SESSION.fac_trx_info t
	where not exists (select 1 from STP_MASTER_TRANS mTrans
		where mTrans.transaction_id = t.transaction_id
		and mTrans.reference_id = t.fac_master_id
		and mTrans.transaction_type = 'FACILITY' fetch first row only)
);
------ here

update session.fac_trx_info t
set stp_master_trx_id = (select s.MASTER_TRX_ID
	from stp_master_trans s
	where s.transaction_id = t.transaction_id
	and s.transaction_type = 'FACILITY');
	
CREATE INDEX session.fac_trx_info_idx2
		 ON session.fac_trx_info(fac_master_id, stp_master_trx_id )
		 allow REVERSE SCANS;		
commit;

INSERT INTO STP_TRANS (TRX_ID, MASTER_TRX_ID, TRX_TYPE, CREATION_DATE, LAST_UPDATE_DATE, STATUS, 
			CUR_TRX_HISTORY_ID, MSG_COUNT, RESPONSE_CODE, REFERENCE_ID, OPS_DESC, TRX_UID)
(
	SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_SEQ), 2)) AS BIGINT), 
		   stp_master_trx_id, '321', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'SUCCESS', 
		   CUR_TRX_HISTORY_ID, 1, 'AA', fac_master_id, 'CREATE',
		   CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_UID_SEQ), 2)) AS BIGINT)
	from session.fac_trx_info t
	where not exists (select 1 from stp_trans sTrans
		where sTrans.master_trx_id = stp_master_trx_id
		and sTrans.trx_type = '321' fetch first row only)
);

INSERT INTO STP_TRANS (TRX_ID, MASTER_TRX_ID, TRX_TYPE, CREATION_DATE, LAST_UPDATE_DATE, STATUS, 
			CUR_TRX_HISTORY_ID, MSG_COUNT, RESPONSE_CODE, REFERENCE_ID, OPS_DESC, TRX_UID)
(
	SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_SEQ), 2)) AS BIGINT), 
		   stp_master_trx_id, '327', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'SUCCESS', 
		   CUR_TRX_HISTORY_ID, 1, 'AA', fac_master_id, 'CREATE',
		   CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_UID_SEQ), 2)) AS BIGINT)
	from session.fac_trx_info t, MIG_CA003_2_BNM_PATCH bnm 
	where bnm.is_valid = 'Y'
	and bnm.cms_act_fac_master_id = fac_master_id
	and not exists (select 1 from stp_trans sTrans
					where sTrans.master_trx_id = t.stp_master_trx_id
					and sTrans.trx_type = '327' fetch first row only)
);

INSERT INTO STP_TRANS (TRX_ID, MASTER_TRX_ID, TRX_TYPE, CREATION_DATE, LAST_UPDATE_DATE, STATUS, 
			CUR_TRX_HISTORY_ID, MSG_COUNT, RESPONSE_CODE, REFERENCE_ID, OPS_DESC, TRX_UID)
(
	SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_SEQ), 2)) AS BIGINT), 
		   stp_master_trx_id, '328', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'SUCCESS', 
		   CUR_TRX_HISTORY_ID, 1, 'AA', officer.CMS_ACT_FAC_OFFICER_ID, 'CREATE',
		   CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_UID_SEQ), 2)) AS BIGINT)
	from session.fac_trx_info t, MIG_CA003_3_OFF_PATCH officer 
	where fac_master_id = officer.cms_act_fac_master_id
	and officer.is_valid = 'Y'
	and not exists (select 1 from stp_trans sTRans
					where sTrans.master_trx_id = t.stp_master_trx_id
					and sTrans.reference_id = officer.cms_act_fac_officer_id
					and sTrans.trx_type = '328' fetch first row only)
);

CALL RUNSTATS_HELPER('MIG_CA003_4_REL_PATCH', 'IS_VALID, CMS_ACT_FAC_MASTER_ID');

INSERT INTO STP_TRANS (TRX_ID, MASTER_TRX_ID, TRX_TYPE, CREATION_DATE, LAST_UPDATE_DATE, STATUS, 
			CUR_TRX_HISTORY_ID, MSG_COUNT, RESPONSE_CODE, REFERENCE_ID, OPS_DESC, TRX_UID)
(
	SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_SEQ), 2)) AS BIGINT), 
		   stp_master_trx_id, '322', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'SUCCESS', 
		   CUR_TRX_HISTORY_ID, 1, 'AA', rel.CMS_ACT_FAC_RELATIONSHIP_ID, 'CREATE',
		   CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_UID_SEQ), 2)) AS BIGINT)
	from session.fac_trx_info t, MIG_CA003_4_REL_PATCH rel 
	where t.fac_master_id = rel.cms_act_fac_master_id
	and rel.is_valid = 'Y'
	and not exists (select 1 from stp_trans sTrans
					where sTrans.master_trx_id = stp_master_trx_id
					and sTRans.reference_id = rel.cms_act_fac_relationship_id
					and sTrans.trx_type = '322' fetch first row only)
);

-- CALL RUNSTATS_HELPER('MIG_CA003_5_INS', 'IS_VALID, CMS_ACT_FAC_MASTER_ID');
CALL RUNSTATS_HELPER('STP_TRANS', 'TRX_TYPE, MASTER_TRX_ID');

-- INSERT INTO STP_TRANS (TRX_ID, MASTER_TRX_ID, TRX_TYPE, CREATION_DATE, LAST_UPDATE_DATE, STATUS, 
			-- CUR_TRX_HISTORY_ID, MSG_COUNT, RESPONSE_CODE, REFERENCE_ID, OPS_DESC, TRX_UID)
-- (
	-- SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_SEQ), 2)) AS BIGINT), 
			   -- stp_master_trx_id, '329', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'SUCCESS', 
			   -- CUR_TRX_HISTORY_ID, 1, 'AA', ins.CMS_ACT_FAC_MASTER_ID, 'CREATE',
		   -- CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_UID_SEQ), 2)) AS BIGINT)
		-- from session.fac_trx_info t, MIG_CA003_5_INS_PATCH ins
		-- where ins.is_valid = 'Y'
		-- and t.fac_master_id = ins.cms_act_fac_master_id
		-- and not exists (select 1 from stp_trans sTrans
						-- where sTrans.master_trx_id = t.stp_master_trx_id
						-- and sTrans.trx_type = '329' fetch first row only)
-- );

-- INSERT INTO STP_TRANS (TRX_ID, MASTER_TRX_ID, TRX_TYPE, CREATION_DATE, LAST_UPDATE_DATE, STATUS, 
			-- CUR_TRX_HISTORY_ID, MSG_COUNT, RESPONSE_CODE, REFERENCE_ID, OPS_DESC, TRX_UID)
-- (
	-- SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_SEQ), 2)) AS BIGINT), 
		   -- stp_master_trx_id, '376', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'SUCCESS', 
		   -- CUR_TRX_HISTORY_ID, 1, 'AA', islamic.CMS_ACT_FAC_MASTER_ID, 'CREATE',
		   -- CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_UID_SEQ), 2)) AS BIGINT)
	-- from session.fac_trx_info t, MIG_CA003_7_ISL_PATCH islamic 
	-- where t.fac_master_id = islamic.cms_act_fac_master_id
	-- and islamic.is_valid = 'Y'
	-- and not exists (select 1 from stp_trans sTrans
					-- where sTrans.master_trx_id = t.stp_master_trx_id
					-- and sTrans.trx_type = '376' fetch first row only)
-- );

CALL RUNSTATS_HELPER('STP_TRANS', 'TRX_TYPE, REFERENCE_ID, MASTER_TRX_ID');

INSERT INTO STP_TRANS (TRX_ID, MASTER_TRX_ID, TRX_TYPE, CREATION_DATE, LAST_UPDATE_DATE, STATUS, 
			CUR_TRX_HISTORY_ID, MSG_COUNT, RESPONSE_CODE, REFERENCE_ID, OPS_DESC, TRX_UID)
(
	SELECT CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_SEQ), 2)) AS BIGINT), 
		   stp_master_trx_id, '324', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'SUCCESS', 
		   CUR_TRX_HISTORY_ID, 1, 'AA', mtf.CMS_REF_ID, 'CREATE',
		   CAST((TS_FMT(CURRENT_TIMESTAMP, 'yyyymmdd') || SUBSTR(DIGITS(NEXT VALUE FOR STP_TRANS_UID_SEQ), 2)) AS BIGINT)
	from session.fac_trx_info t, MIG_CA003_6_MUL_PATCH mtf 
	where t.fac_master_id = mtf.cms_act_fac_master_id
	and mtf.is_valid = 'Y'
	and not exists (select 1 from stp_trans sTrans
					where sTrans.master_trx_id = t.stp_master_trx_id
					and sTrans.reference_id = mtf.cms_ref_id
					and sTrans.trx_type = '324' fetch first row only)
);

commit;
drop table session.fac_trx_info;

commit;

