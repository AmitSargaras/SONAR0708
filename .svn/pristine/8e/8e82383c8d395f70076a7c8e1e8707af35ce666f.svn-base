DROP PROCEDURE BR_RUN_TEMP_BVLNCMBR@
DROP PROCEDURE BR_RUN_TEMP_BVLNCMAC@
DROP PROCEDURE BR_RUN_TEMP_BVDDCLIMS@

-- Branch Number Mapping
CREATE PROCEDURE BR_RUN_TEMP_BVLNCMBR
LANGUAGE SQL

BEGIN

CALL br_log_proc_time('BR_RUN_TEMP_BVLNCMBR', 'BVLNCMBR', 1);

FOR CUR_AA AS
	SELECT A.CMS_LSP_LMT_PROFILE_ID AS AA_KEY, A.LLP_BCA_REF_NUM AS AA, T.WOLDBR AS O_BR, T.WNEWBR AS N_BR, A.SOURCE_ID AS SRC_ID
  FROM SCI_LSP_LMT_PROFILE A, BR_TEMP_BVLNCMBR T
  WHERE A.CMS_ORIG_ORGANISATION = T.WOLDBR
    AND A.SOURCE_ID IN ('SEMA','QUAN','TSPR') AND T.IS_VALID = 'Y'
DO
	UPDATE SCI_LSP_LMT_PROFILE SET CMS_ORIG_ORGANISATION = CUR_AA.N_BR WHERE CMS_LSP_LMT_PROFILE_ID = CUR_AA.AA_KEY AND SOURCE_ID = CUR_AA.SRC_ID;
	-- AUDIT LOG
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP)
	VALUES ('SCI_LSP_LMT_PROFILE', 'CMS_ORIG_ORGANISATION', CUR_AA.AA_KEY, CUR_AA.AA, CUR_AA.SRC_ID, CUR_AA.O_BR, CUR_AA.N_BR, CURRENT_TIMESTAMP);
	
	UPDATE SCI_LSP_APPR_LMTS SET CMS_BKG_ORGANISATION = CUR_AA.N_BR WHERE CMS_LIMIT_PROFILE_ID = CUR_AA.AA_KEY AND SOURCE_ID = CUR_AA.SRC_ID;
	-- AUDIT LOG
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP )
		(SELECT DISTINCT 'SCI_LSP_APPR_LMTS', 'CMS_BKG_ORGANISATION', L.CMS_LSP_APPR_LMTS_ID, L.LMT_ID, L.SOURCE_ID, CUR_AA.O_BR, CUR_AA.N_BR, CURRENT_TIMESTAMP  
			FROM BR_TEMP_BVLNCMBR T, SCI_LSP_APPR_LMTS L 
			WHERE L.CMS_LIMIT_PROFILE_ID = CUR_AA.AA_KEY AND L.SOURCE_ID = CUR_AA.SRC_ID AND IS_VALID = 'Y');
			
	UPDATE STAGE_LIMIT_PROFILE SET CMS_ORIG_ORGANISATION = CUR_AA.N_BR
	WHERE SOURCE_ID = CUR_AA.SRC_ID AND char( CMS_LSP_LMT_PROFILE_ID ) in 
		( select DISTINCT h.staging_reference_id 
		  from TRANS_HISTORY h, TRANSACTION t
		  WHERE t.reference_id = CUR_AA.AA_KEY
		    AND t.transaction_type = 'LIMITPROFILE' 
			AND t.transaction_id = h.transaction_id );
				
	UPDATE STAGE_LIMIT SET CMS_BKG_ORGANISATION = CUR_AA.N_BR
	WHERE SOURCE_ID = CUR_AA.SRC_ID AND 
		char(CMS_LSP_APPR_LMTS_ID) in 
		( select DISTINCT h.staging_reference_id 
		  from TRANS_HISTORY h, TRANSACTION t
		  WHERE t.reference_id in ( select CMS_LSP_APPR_LMTS_ID from SCI_LSP_APPR_LMTS WHERE CMS_LIMIT_PROFILE_ID = CUR_AA.AA_KEY )
		    AND t.transaction_type = 'LIMIT' 
			AND t.transaction_id = h.transaction_id );
END FOR;

FOR CUR_SEC AS
	SELECT A.CMS_COLLATERAL_ID AS COL_ID, T.WOLDBR AS O_BR, T.WNEWBR AS N_BR, A.SOURCE_ID AS SRC_ID
  FROM CMS_SECURITY A, BR_TEMP_BVLNCMBR T
  WHERE A.SECURITY_ORGANISATION = T.WOLDBR
    AND A.SOURCE_ID IN ('ARBS','SEMA','CLMS') AND T.IS_VALID = 'Y'
DO
	UPDATE CMS_SECURITY SET SECURITY_ORGANISATION = CUR_SEC.N_BR WHERE CMS_COLLATERAL_ID = CUR_SEC.COL_ID AND SOURCE_ID = CUR_SEC.SRC_ID;
	-- AUDIT LOG
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP)
	VALUES ('CMS_SECURITY', 'SECURITY_ORGANISATION', CUR_SEC.COL_ID, CUR_SEC.SRC_ID, CUR_SEC.O_BR, CUR_SEC.N_BR, CURRENT_TIMESTAMP);
	
	UPDATE SCI_PLEDGOR_DTL P SET P.CMS_ORIG_ORGANISATION = CUR_SEC.N_BR
	WHERE P.CMS_PLEDGOR_DTL_ID IN 
		(SELECT M.CMS_PLEDGOR_DTL_ID FROM SCI_SEC_PLDGR_MAP M WHERE M.CMS_COLLATERAL_ID = CUR_SEC.COL_ID AND M.SOURCE_ID = CUR_SEC.SRC_ID)
			AND P.SOURCE_ID = CUR_SEC.SRC_ID;
	-- AUDIT LOG
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP)
	VALUES ('SCI_PLEDGOR_DTL', 'CMS_ORIG_ORGANISATION', CUR_SEC.COL_ID, CUR_SEC.SRC_ID, CUR_SEC.O_BR, CUR_SEC.N_BR, CURRENT_TIMESTAMP);
	
END FOR;

FOR CUR_SEC_CUS AS
	SELECT A.CMS_COLLATERAL_ID AS COL_ID, T.WOLDBR AS O_BR, T.WNEWBR AS N_BR, A.SOURCE_ID AS SRC_ID
  FROM CMS_SECURITY A, BR_TEMP_BVLNCMBR T
  WHERE A.SECURITY_CUSTODIAN = T.WOLDBR AND A.CUSTODIAN_TYPE = 'I' AND T.IS_VALID = 'Y'
DO
	UPDATE CMS_SECURITY SET SECURITY_CUSTODIAN = CUR_SEC_CUS.N_BR WHERE CMS_COLLATERAL_ID = CUR_SEC_CUS.COL_ID AND CUSTODIAN_TYPE = 'I';
	-- AUDIT LOG
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP)
	VALUES ('CMS_SECURITY', 'SECURITY_CUSTODIAN', CUR_SEC_CUS.COL_ID, CUR_SEC_CUS.SRC_ID, CUR_SEC_CUS.O_BR, CUR_SEC_CUS.N_BR, CURRENT_TIMESTAMP);

END FOR;

FOR CUR_TEAM AS
	SELECT A.CODE_ID AS TEAM_ID, T.WOLDBR AS O_BR, M.DESCRIPTION AS DESCR
  FROM CMS_TEAM_ORGANISATION_CODE A, CMS_TEAM M, BR_TEMP_BVLNCMBR T
  WHERE A.ORGANISATION_CODE = T.WOLDBR AND A.TEAM_ID = M.TEAM_ID AND T.IS_VALID = 'Y'
DO
	DELETE FROM CMS_TEAM_ORGANISATION_CODE WHERE CODE_ID = CUR_TEAM.TEAM_ID;
	-- AUDIT LOG
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, OLD_VALUE, UPDATE_TIMESTAMP)
	VALUES ('CMS_TEAM_ORGANISATION_CODE', 'CODE_ID', CUR_TEAM.TEAM_ID, CUR_TEAM.DESCR, CUR_TEAM.O_BR, CURRENT_TIMESTAMP);
	
END FOR;

FOR CUR_TRX AS
	SELECT A.TRANSACTION_ID AS TRX_ID, T.WOLDBR AS O_BR, T.WNEWBR AS N_BR
  FROM TRANSACTION A, BR_TEMP_BVLNCMBR T
  WHERE A.TRX_ORIGIN_ORGANISATION = T.WOLDBR AND T.IS_VALID = 'Y'
  AND A.TRX_ORIGIN_ORGANISATION IS NOT NULL
DO
	UPDATE TRANSACTION SET TRX_ORIGIN_ORGANISATION = CUR_TRX.N_BR WHERE TRANSACTION_ID = CUR_TRX.TRX_ID;
	UPDATE TRANS_HISTORY SET TRX_ORIGIN_ORGANISATION = CUR_TRX.N_BR WHERE TRANSACTION_ID = CUR_TRX.TRX_ID;

END FOR;

FOR CUR_SEC_STG AS
	SELECT A.CMS_COLLATERAL_ID AS COL_ID, T.WOLDBR AS O_BR, T.WNEWBR AS N_BR, A.SOURCE_ID AS SRC_ID
  FROM CMS_STAGE_SECURITY A, BR_TEMP_BVLNCMBR T
  WHERE A.SECURITY_ORGANISATION = T.WOLDBR
    AND A.SOURCE_ID IN ('ARBS','SEMA','CLMS') AND T.IS_VALID = 'Y'
DO
	UPDATE CMS_STAGE_SECURITY SET SECURITY_ORGANISATION = CUR_SEC_STG.N_BR WHERE CMS_COLLATERAL_ID = CUR_SEC_STG.COL_ID AND SOURCE_ID = CUR_SEC_STG.SRC_ID;
	
	UPDATE STAGE_PLEDGOR_DTL P SET P.CMS_ORIG_ORGANISATION = CUR_SEC_STG.N_BR
	WHERE P.CMS_PLEDGOR_DTL_ID IN 
		(SELECT M.CMS_PLEDGOR_DTL_ID FROM STAGE_SEC_PLDGR_MAP M 
		WHERE 
		M.CMS_COLLATERAL_ID = CUR_SEC_STG.COL_ID AND M.SOURCE_ID = CUR_SEC_STG.SRC_ID)
		AND P.SOURCE_ID = CUR_SEC_STG.SRC_ID;
	
END FOR;

FOR CUR_SEC_CUS_STG AS
	SELECT A.CMS_COLLATERAL_ID AS COL_ID, T.WOLDBR AS O_BR, T.WNEWBR AS N_BR
  FROM CMS_STAGE_SECURITY A, BR_TEMP_BVLNCMBR T
  WHERE A.SECURITY_CUSTODIAN = T.WOLDBR AND A.CUSTODIAN_TYPE = 'I' AND T.IS_VALID = 'Y'
DO
	UPDATE CMS_STAGE_SECURITY SET SECURITY_CUSTODIAN = CUR_SEC_CUS_STG.N_BR WHERE CMS_COLLATERAL_ID = CUR_SEC_CUS_STG.COL_ID AND CUSTODIAN_TYPE = 'I';

END FOR;

FOR CUR_TEAM_STG AS
	SELECT A.CODE_ID AS TEAM_ID, T.WOLDBR AS O_BR
  FROM STAGE_TEAM_ORGANISATION_CODE A, BR_TEMP_BVLNCMBR T
  WHERE A.ORGANISATION_CODE = T.WOLDBR AND T.IS_VALID = 'Y'
DO
	DELETE FROM STAGE_TEAM_ORGANISATION_CODE WHERE CODE_ID = CUR_TEAM_STG.TEAM_ID;

END FOR;

CALL br_log_proc_time('BR_RUN_TEMP_BVLNCMBR', 'BVLNCMBR', 0);

END@


-- Loan Account Mapping
CREATE PROCEDURE BR_RUN_TEMP_BVLNCMAC
LANGUAGE SQL

BEGIN

CALL br_log_proc_time('BR_RUN_TEMP_BVLNCMAC', 'BVLNCMAC', 1);

FOR CUR_ACC AS
	SELECT DISTINCT
		L.CMS_LSP_APPR_LMTS_ID AS LMT_ID, A.CMS_LSP_SYS_XREF_ID AS ACC_ID, 
		T.WOLDAC AS O_ACC, T.WNEWAC AS N_ACC, 
		T.WOLDBR AS O_BR, T.WNEWBR AS N_BR, T.WACTYPE AS AC_TYPE
	FROM 
		SCI_LSP_SYS_XREF A, BR_TEMP_BVLNCMAC T, SCI_LSP_APPR_LMTS L, SCI_LSP_LMTS_XREF_MAP M
	WHERE 
		A.LSX_EXT_SYS_ACCT_NUM = T.WOLDAC  
		AND LSX_EXT_SYS_ACCT_TYPE = T.WACTYPE 
		AND A.LSX_EXT_SYS_CODE_VALUE = 'ARBS' 
		AND T.IS_VALID = 'Y'
		AND L.CMS_LSP_APPR_LMTS_ID = M.CMS_LSP_APPR_LMTS_ID
		AND A.CMS_LSP_SYS_XREF_ID = M.CMS_LSP_SYS_XREF_ID
		AND L.SOURCE_ID = 'ARBS'
		
DO
	UPDATE SCI_LSP_SYS_XREF SET LSX_EXT_SYS_ACCT_NUM = CUR_ACC.N_ACC, LSX_BKG_LOCTN_ORG = CUR_ACC.N_BR
	WHERE CMS_LSP_SYS_XREF_ID = CUR_ACC.ACC_ID AND LSX_EXT_SYS_ACCT_TYPE = CUR_ACC.AC_TYPE AND LSX_EXT_SYS_CODE_VALUE = 'ARBS';
	-- AUDIT LOG
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP)
	VALUES ('SCI_LSP_SYS_XREF', 'LSX_EXT_SYS_ACCT_NUM', CUR_ACC.ACC_ID, CUR_ACC.AC_TYPE, 'ARBS', CUR_ACC.O_ACC, CUR_ACC.N_ACC, CURRENT_TIMESTAMP);
	
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP)
	VALUES ('SCI_LSP_SYS_XREF', 'LSX_BKG_LOCTN_ORG', CUR_ACC.ACC_ID, CUR_ACC.AC_TYPE, 'ARBS', CUR_ACC.O_BR, CUR_ACC.N_BR, CURRENT_TIMESTAMP);
	
	UPDATE CMS_ACCOUNT_SEC_MAP SET ASM_EXT_SYS_ACCOUNT_NUM = CUR_ACC.N_ACC
	WHERE CMS_LSP_SYS_XREF_ID = CUR_ACC.ACC_ID AND ASM_EXT_SYS_ACCOUNT_TYPE = CUR_ACC.AC_TYPE;
	
	-- Use actual apprv lmt id in STAGE_LIMIT_XREF
	UPDATE CMS_STAGE_LSP_SYS_XREF x SET LSX_EXT_SYS_ACCT_NUM = CUR_ACC.N_ACC, LSX_BKG_LOCTN_ORG = CUR_ACC.N_BR
	WHERE CMS_LSP_SYS_XREF_ID IN 
	( select distinct m.CMS_LSP_SYS_XREF_ID
	  from TRANS_HISTORY h, TRANSACTION t, STAGE_LIMIT_XREF m, STAGE_LIMIT s
	  WHERE t.reference_id = CUR_ACC.LMT_ID 
		AND s.CMS_LSP_APPR_LMTS_ID = m.CMS_LSP_APPR_LMTS_ID
		AND h.staging_reference_id = char( s.CMS_LSP_APPR_LMTS_ID )		
		AND t.transaction_type = 'LIMIT' 
		AND t.transaction_id = h.transaction_id 
		AND s.SOURCE_ID = 'ARBS'
	 )
	AND x.LSX_EXT_SYS_CODE_VALUE='ARBS';
			
END FOR;

FOR CUR_NPL AS
	SELECT A.CMS_NPL_ID AS NPL_ID, T.WOLDAC AS O_ACC, T.WNEWAC AS N_ACC, T.WACTYPE AS ACC_TYP
  FROM CMS_NPL A, BR_TEMP_BVLNCMAC T
  WHERE A.ACCOUNT_NUMBER = T.WOLDAC AND A.SOURCE_ID = 'ARBS' AND T.IS_VALID = 'Y'
DO
	UPDATE CMS_NPL SET ACCOUNT_NUMBER = CUR_NPL.N_ACC
	WHERE CMS_NPL_ID = CUR_NPL.NPL_ID AND SOURCE_ID = 'ARBS';
	-- AUDIT LOG
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP)
	VALUES ('CMS_NPL', 'ACCOUNT_NUMBER', CUR_NPL.NPL_ID, CUR_NPL.ACC_TYP, 'ARBS', CUR_NPL.O_ACC, CUR_NPL.N_ACC, CURRENT_TIMESTAMP);
	
	-- CMS_STAGE_NPL
	
END FOR;

CALL br_log_proc_time('BR_RUN_TEMP_BVLNCMAC', 'BVLNCMAC', 0);

END@


-- Current/Saving Account Mapping
CREATE PROCEDURE BR_RUN_TEMP_BVDDCLIMS
LANGUAGE SQL

BEGIN

CALL br_log_proc_time('BR_RUN_TEMP_BVDDCLIMS', 'BVDDCLIMS', 1);

FOR CUR_ACC AS
	SELECT DISTINCT
		L.CMS_LSP_APPR_LMTS_ID AS LMT_ID, A.CMS_LSP_SYS_XREF_ID AS ACC_ID,
		T.OACC AS O_ACC, T.NACC AS N_ACC,
		T.OBRN AS O_BR, T.NBRN AS N_BR, T.ATYP AS ACC_TYP
	FROM 
	  SCI_LSP_SYS_XREF A, BR_TEMP_BVDDCLIMS T, SCI_LSP_APPR_LMTS L, SCI_LSP_LMTS_XREF_MAP M
	WHERE 
	  A.LSX_EXT_SYS_ACCT_NUM = T.OACC
		AND LSX_EXT_SYS_ACCT_TYPE = T.ATYP
		AND A.LSX_EXT_SYS_CODE_VALUE = 'ARBS'
		AND T.IS_VALID = 'Y'
		AND L.CMS_LSP_APPR_LMTS_ID = M.CMS_LSP_APPR_LMTS_ID
		AND A.CMS_LSP_SYS_XREF_ID = M.CMS_LSP_SYS_XREF_ID
		AND L.SOURCE_ID = 'ARBS'

DO
	UPDATE SCI_LSP_SYS_XREF SET LSX_EXT_SYS_ACCT_NUM = CUR_ACC.N_ACC, LSX_BKG_LOCTN_ORG = CUR_ACC.N_BR
	WHERE CMS_LSP_SYS_XREF_ID = CUR_ACC.ACC_ID AND LSX_EXT_SYS_ACCT_TYPE = CUR_ACC.ACC_TYP AND LSX_EXT_SYS_CODE_VALUE = 'ARBS';
	-- AUDIT LOG
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP)
	VALUES ('SCI_LSP_SYS_XREF', 'LSX_EXT_SYS_ACCT_NUM', CUR_ACC.ACC_ID, CUR_ACC.ACC_TYP, 'ARBS', CUR_ACC.O_ACC, CUR_ACC.N_ACC, CURRENT_TIMESTAMP);
	
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP)
	VALUES ('SCI_LSP_SYS_XREF', 'LSX_BKG_LOCTN_ORG', CUR_ACC.ACC_ID, CUR_ACC.ACC_TYP, 'ARBS', CUR_ACC.O_BR, CUR_ACC.N_BR, CURRENT_TIMESTAMP);
	
	UPDATE CMS_ACCOUNT_SEC_MAP SET ASM_EXT_SYS_ACCOUNT_NUM = CUR_ACC.N_ACC
	WHERE CMS_LSP_SYS_XREF_ID = CUR_ACC.ACC_ID AND ASM_EXT_SYS_ACCOUNT_TYPE = CUR_ACC.ACC_TYP;
	
	-- Use actual apprv lmt id in STAGE_LIMIT_XREF
	UPDATE CMS_STAGE_LSP_SYS_XREF x SET LSX_EXT_SYS_ACCT_NUM = CUR_ACC.N_ACC, LSX_BKG_LOCTN_ORG = CUR_ACC.N_BR
	WHERE CMS_LSP_SYS_XREF_ID IN 
	( select distinct m.CMS_LSP_SYS_XREF_ID
	  from TRANS_HISTORY h, TRANSACTION t, STAGE_LIMIT_XREF m, STAGE_LIMIT s
	  WHERE t.reference_id = CUR_ACC.LMT_ID 
		AND s.CMS_LSP_APPR_LMTS_ID = m.CMS_LSP_APPR_LMTS_ID
		AND h.staging_reference_id = char( s.CMS_LSP_APPR_LMTS_ID )		
		AND t.transaction_type = 'LIMIT' 
		AND t.transaction_id = h.transaction_id 
		AND s.SOURCE_ID = 'ARBS'
	 )
	AND x.LSX_EXT_SYS_CODE_VALUE='ARBS';
	
END FOR;

FOR CUR_NPL AS
	SELECT A.CMS_NPL_ID AS NPL_ID, T.OACC AS O_ACC, T.NACC AS N_ACC, T.ATYP AS ACC_TYP
  FROM CMS_NPL A, BR_TEMP_BVDDCLIMS T
  WHERE A.ACCOUNT_NUMBER = T.OACC AND A.SOURCE_ID = 'ARBS' AND T.IS_VALID = 'Y'
DO
	UPDATE CMS_NPL SET ACCOUNT_NUMBER = CUR_NPL.N_ACC
	WHERE CMS_NPL_ID = CUR_NPL.NPL_ID AND SOURCE_ID = 'ARBS';
	-- AUDIT LOG
	INSERT INTO BR_AUDIT_LOG (TABLE_NAME, COLUMN_NAME, KEY_VALUE_1, KEY_VALUE_2, SOURCE_ID, OLD_VALUE, NEW_VALUE, UPDATE_TIMESTAMP)
	VALUES ('CMS_NPL', 'ACCOUNT_NUMBER', CUR_NPL.NPL_ID, CUR_NPL.ACC_TYP, 'ARBS', CUR_NPL.O_ACC, CUR_NPL.N_ACC, CURRENT_TIMESTAMP);

	-- CMS_STAGE_NPL
	
END FOR;

CALL br_log_proc_time('BR_RUN_TEMP_BVDDCLIMS', 'BVDDCLIMS', 0);

END@
